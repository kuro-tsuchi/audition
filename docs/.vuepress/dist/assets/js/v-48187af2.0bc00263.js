"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[130],{4991:(l,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-48187af2",path:"/database/mysql.html",title:"1. mysql",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. MySQL 基础",slug:"_1-1-mysql-基础",children:[{level:3,title:"1.1.1. 关系型数据库介绍",slug:"_1-1-1-关系型数据库介绍",children:[]},{level:3,title:"1.1.2. MySQL 介绍",slug:"_1-1-2-mysql-介绍",children:[]}]},{level:2,title:"1.2. 存储引擎",slug:"_1-2-存储引擎",children:[{level:3,title:"1.2.1. 存储引擎相关的命令",slug:"_1-2-1-存储引擎相关的命令",children:[]},{level:3,title:"1.2.2. MyISAM 和 InnoDB 的区别",slug:"_1-2-2-myisam-和-innodb-的区别",children:[]}]},{level:2,title:"1.3. 什么是 MVCC",slug:"_1-3-什么是-mvcc",children:[{level:3,title:"1.3.1. 解决并发问题的通用方案有",slug:"_1-3-1-解决并发问题的通用方案有",children:[]}]},{level:2,title:"1.4. 锁机制",slug:"_1-4-锁机制",children:[{level:3,title:"1.4.1. MyISAM 和 InnoDB 存储引擎使用的锁",slug:"_1-4-1-myisam-和-innodb-存储引擎使用的锁",children:[]},{level:3,title:"1.4.2. 表级锁和行级锁对比",slug:"_1-4-2-表级锁和行级锁对比",children:[]}]},{level:2,title:"1.5. 查询缓存",slug:"_1-5-查询缓存",children:[]},{level:2,title:"1.6. 事务",slug:"_1-6-事务",children:[{level:3,title:"1.6.1. 何为事务？",slug:"_1-6-1-何为事务",children:[]},{level:3,title:"1.6.2. 何为数据库事务？",slug:"_1-6-2-何为数据库事务",children:[]},{level:3,title:"1.6.3. 何为 ACID 特性呢？",slug:"_1-6-3-何为-acid-特性呢",children:[]},{level:3,title:"1.6.4. 并发事务带来哪些问题？",slug:"_1-6-4-并发事务带来哪些问题",children:[]},{level:3,title:"1.6.5. 事务隔离级别有哪些？",slug:"_1-6-5-事务隔离级别有哪些",children:[]},{level:3,title:"1.6.6. MySQL 的默认隔离级别是 REPEATABLE-READ",slug:"_1-6-6-mysql-的默认隔离级别是-repeatable-read",children:[]}]},{level:2,title:"1.7. 一条 SQL 语句在 MySQL 中如何被执行的？",slug:"_1-7-一条-sql-语句在-mysql-中如何被执行的",children:[{level:3,title:"1.7.1. MySQL 基本架构概览",slug:"_1-7-1-mysql-基本架构概览",children:[]},{level:3,title:"1.7.2. MySQL 主要分为 Server 层和存储引擎层",slug:"_1-7-2-mysql-主要分为-server-层和存储引擎层",children:[]},{level:3,title:"1.7.3. 语句分析 - 查询语句",slug:"_1-7-3-语句分析-查询语句",children:[]},{level:3,title:"1.7.4. 语句分析 - 更新语句 (增加，更新，删除)",slug:"_1-7-4-语句分析-更新语句-增加-更新-删除",children:[]},{level:3,title:"1.7.5. 总结",slug:"_1-7-5-总结",children:[]}]},{level:2,title:"1.8. 索引是什么？",slug:"_1-8-索引是什么",children:[]},{level:2,title:"1.9. 索引有哪些优缺点？",slug:"_1-9-索引有哪些优缺点",children:[{level:3,title:"1.9.1. 索引的优点",slug:"_1-9-1-索引的优点",children:[]},{level:3,title:"1.9.2. 索引的缺点",slug:"_1-9-2-索引的缺点",children:[]}]},{level:2,title:"1.10. MySQL 有哪几种索引类型？",slug:"_1-10-mysql-有哪几种索引类型",children:[]},{level:2,title:"1.11. 联合索引是什么？为什么需要注意联合索引中的顺序？",slug:"_1-11-联合索引是什么-为什么需要注意联合索引中的顺序",children:[]},{level:2,title:"1.12. 讲一讲 MySQL 的最左前缀原则？",slug:"_1-12-讲一讲-mysql-的最左前缀原则",children:[]},{level:2,title:"1.13. 怎么查看 MySQL 语句有没有用到索引？",slug:"_1-13-怎么查看-mysql-语句有没有用到索引",children:[]},{level:2,title:"1.14. 为什么官方建议使用自增长主键作为索引？",slug:"_1-14-为什么官方建议使用自增长主键作为索引",children:[]},{level:2,title:"1.15. 如何创建索引？",slug:"_1-15-如何创建索引",children:[{level:3,title:"1.15.1. 在执行 CREATE TABLE 时创建索引",slug:"_1-15-1-在执行-create-table-时创建索引",children:[]},{level:3,title:"1.15.2. 使用 ALTER TABLE 命令去增加索引",slug:"_1-15-2-使用-alter-table-命令去增加索引",children:[]},{level:3,title:"1.15.3. 使用 CREATE INDEX 命令创建",slug:"_1-15-3-使用-create-index-命令创建",children:[]}]},{level:2,title:"1.16. 创建索引时需要注意什么？",slug:"_1-16-创建索引时需要注意什么",children:[]},{level:2,title:"1.17. 索引设计规范",slug:"_1-17-索引设计规范",children:[{level:3,title:"1.17.1. 限制每张表上的索引数量，建议单张表索引不超过 5 个",slug:"_1-17-1-限制每张表上的索引数量-建议单张表索引不超过-5-个",children:[]},{level:3,title:"1.17.2. 禁止给表中的每一列都建立单独的索引",slug:"_1-17-2-禁止给表中的每一列都建立单独的索引",children:[]},{level:3,title:"1.17.3. 每个 Innodb 表必须有个主键",slug:"_1-17-3-每个-innodb-表必须有个主键",children:[]},{level:3,title:"1.17.4. 常见索引列建议",slug:"_1-17-4-常见索引列建议",children:[]},{level:3,title:"1.17.5. 如何选择索引列的顺序",slug:"_1-17-5-如何选择索引列的顺序",children:[]},{level:3,title:"1.17.6. 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）",slug:"_1-17-6-避免建立冗余索引和重复索引-增加了查询优化器生成执行计划的时间",children:[]},{level:3,title:"1.17.7. 对于频繁的查询优先考虑使用覆盖索引",slug:"_1-17-7-对于频繁的查询优先考虑使用覆盖索引",children:[]},{level:3,title:"1.17.8. 尽量避免使用外键约束",slug:"_1-17-8-尽量避免使用外键约束",children:[]}]},{level:2,title:"1.18. 使用索引查询一定能提高查询的性能吗？",slug:"_1-18-使用索引查询一定能提高查询的性能吗",children:[]},{level:2,title:"1.19. 什么情况下不走索引 (索引失效)?",slug:"_1-19-什么情况下不走索引-索引失效",children:[]}],filePathRelative:"database/mysql.md",git:{updatedTime:1640781869e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:9}]}}},3594:(l,e,n)=>{n.r(e),n.d(e,{default:()=>Fe});var a=n(6252),_=n(7359),t=n(7141),s=n(2421),i=n(8998),r=n(3288);const d=(0,a._)("h1",{id:"_1-mysql",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-mysql","aria-hidden":"true"},"#"),(0,a.Uk)(" 1. mysql")],-1),u=(0,a._)("h2",{id:"_1-1-mysql-基础",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-mysql-基础","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1. MySQL 基础")],-1),c=(0,a._)("h3",{id:"_1-1-1-关系型数据库介绍",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-1-关系型数据库介绍","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.1. 关系型数据库介绍")],-1),o=(0,a._)("p",null,"关系型数据库就是一种建立在关系模型基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系 (一对一，一对多，多对多...).",-1),h=(0,a._)("p",null,"关系型数据库中，数据都被存放在了各种表中 (比如用户表), 表中的每一行就存放着一条数据",-1),p=(0,a._)("p",null,"大部分关系型数据库都使用 SQL 来操作数据库中的数据。并且，大部分关系型数据库都支持事务的四大特性 (ACID).",-1),k=(0,a._)("p",null,[(0,a._)("img",{src:_,alt:"picture 7"})],-1),y=(0,a._)("h4",{id:"_1-1-1-1-有哪些常见的关系型数据库呢",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-1-1-有哪些常见的关系型数据库呢","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.1.1. 有哪些常见的关系型数据库呢？")],-1),b=(0,a._)("p",null,"MySQL, PostgreSQL, Oracle, SQL Server, SQLite",-1),m=(0,a._)("h3",{id:"_1-1-2-mysql-介绍",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-2-mysql-介绍","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.2. MySQL 介绍")],-1),g=(0,a._)("p",null,"MySQL 是一种开源免费的关系型数据库，主要用于持久化存储系统中的一些数据，MySQL 的默认端口号是 3306.",-1),U=(0,a._)("h2",{id:"_1-2-存储引擎",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-存储引擎","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2. 存储引擎")],-1),E=(0,a._)("h3",{id:"_1-2-1-存储引擎相关的命令",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-1-存储引擎相关的命令","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.1. 存储引擎相关的命令")],-1),x=(0,a._)("p",null,"查看 MySQL 提供的所有存储引擎",-1),M=(0,a._)("div",{class:"language-sql ext-sql line-numbers-mode"},[(0,a._)("pre",{class:"language-sql"},[(0,a._)("code",null,[(0,a.Uk)("mysql"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"show"),(0,a.Uk)(" engines"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),L=(0,a._)("p",null,[(0,a._)("img",{src:t,alt:"picture 6"})],-1),S=(0,a._)("p",null,"MySQL 当前默认的存储引擎是 InnoDB，并且在 mysql 5.5 版本后，只有 InnoDB 是事务性数据库存储引擎",-1),I=(0,a._)("h3",{id:"_1-2-2-myisam-和-innodb-的区别",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-2-myisam-和-innodb-的区别","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.2. MyISAM 和 InnoDB 的区别")],-1),A=(0,a._)("p",null,"MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。",-1),f=(0,a._)("p",null,"MySQL 5.5 之后，默认的存储引擎为 InnoDB(事务性数据库存储引擎)",-1),v=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"是否支持行级锁"),(0,a._)("p",null,"MyISAM 只有表级锁 (table-level locking), 而 InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁。")]),(0,a._)("li",null,[(0,a._)("p",null,"是否支持事务"),(0,a._)("p",null,"MyISAM 不提供事务支持，InnoDB 提供事务支持，具有提交 (commit) 和回滚 (rollback) 事务的能力。")]),(0,a._)("li",null,[(0,a._)("p",null,"是否支持外键"),(0,a._)("p",null,"MyISAM 不支持，而 InnoDB 支持，不建议在数据库层面使用外键的，应用层面可以解决")]),(0,a._)("li",null,[(0,a._)("p",null,"是否支持数据库异常崩溃后的安全恢复"),(0,a._)("p",null,"MyISAM 不支持，而 InnoDB 支持。使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 redo log")]),(0,a._)("li",null,[(0,a._)("p",null,"是否支持 MVCC"),(0,a._)("p",null,"MyISAM 不支持，而 InnoDB 支持. MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提供性能。")])],-1),R=(0,a._)("h2",{id:"_1-3-什么是-mvcc",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-什么是-mvcc","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3. 什么是 MVCC")],-1),D=(0,a._)("p",null,"MVCC (Multi-Version Concurrency Control，多版本并发控制). MVCC 是在并发访问数据库时，通过对数据进行多版本保存，根据比较版本号来控制数据是否展示，从而达到读取数据时无需加锁就可以实现事务的隔离性，避免因写锁而导致读操作的堵塞",-1),q=(0,a._)("h3",{id:"_1-3-1-解决并发问题的通用方案有",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-1-解决并发问题的通用方案有","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3.1. 解决并发问题的通用方案有")],-1),Q=(0,a._)("ol",null,[(0,a._)("li",null,"对并发访问的数据添加一把排它锁，添加锁之后，其他的读和写操作都需等待锁释放后才能访问。"),(0,a._)("li",null,"添加一把共享锁，读读操作不需要等待锁的释放，读写和写写操作需要等待锁的释放。"),(0,a._)("li",null,"通过对并发数据进行快照备份，从而达到无锁数据的并发访问。")],-1),T=(0,a._)("h2",{id:"_1-4-锁机制",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-锁机制","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4. 锁机制")],-1),C=(0,a._)("h3",{id:"_1-4-1-myisam-和-innodb-存储引擎使用的锁",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-1-myisam-和-innodb-存储引擎使用的锁","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4.1. MyISAM 和 InnoDB 存储引擎使用的锁")],-1),B=(0,a._)("ol",null,[(0,a._)("li",null,"MyISAM 采用表级锁 (table-level locking)."),(0,a._)("li",null,"InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁")],-1),w=(0,a._)("h3",{id:"_1-4-2-表级锁和行级锁对比",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-2-表级锁和行级锁对比","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4.2. 表级锁和行级锁对比")],-1),O=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"表级锁： MySQL 中锁定粒度最大的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM 和 InnoDB 引擎都支持表级锁。")]),(0,a._)("li",null,[(0,a._)("p",null,"行级锁： MySQL 中锁定粒度最小的一种锁，只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。")])],-1),N=(0,a._)("h2",{id:"_1-5-查询缓存",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-查询缓存","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5. 查询缓存")],-1),P=(0,a._)("p",null,"MySQL 8.0 版本后移除查询缓存，因为这个功能不太实用",-1),Y=(0,a._)("p",null,"缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。因此，开启查询缓存要谨慎，尤其对于写密集的应用来说更是如此。",-1),V=(0,a._)("p",null,"可以修改配置 MySQL 开启查询缓存",-1),H=(0,a._)("h2",{id:"_1-6-事务",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-事务","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6. 事务")],-1),X=(0,a._)("h3",{id:"_1-6-1-何为事务",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-1-何为事务","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.1. 何为事务？")],-1),F=(0,a._)("p",null,"事务是逻辑上的一组操作，要么全部执行，要么全部不执行。",-1),K=(0,a._)("blockquote",null,[(0,a._)("p",null,"事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是："),(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"将小明的余额减少 1000 元")]),(0,a._)("li",null,[(0,a._)("p",null,"将小红的余额增加 1000 元。"),(0,a._)("p",null,"事务会把这两个操作就可以看成逻辑上的一个整体，这个整体包含的操作要么都成功，要么都要失败。这样就不会出现小明余额减少而小红的余额却并没有增加的情况。")])])],-1),W=(0,a._)("h3",{id:"_1-6-2-何为数据库事务",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-2-何为数据库事务","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.2. 何为数据库事务？")],-1),Z=(0,a._)("p",null,[(0,a._)("img",{src:s,alt:"picture 8"})],-1),j=(0,a._)("blockquote",null,[(0,a._)("p",null,"谈论事务的时候，如果没有特指分布式事务，往往指的就是数据库事务。单体架构项目使用最多的是数据库事务。")],-1),G=(0,a._)("p",null,"数据库事务可以保证多个对数据库的操作构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：要么全部执行，要么全部不执行。",-1),z=(0,a._)("div",{class:"language-sql ext-sql line-numbers-mode"},[(0,a._)("pre",{class:"language-sql"},[(0,a._)("code",null,[(0,a._)("span",{class:"token comment"},"# 开启一个事务"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token keyword"},"START"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"TRANSACTION"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token comment"},"# 多条 SQL 语句"),(0,a.Uk)("\nSQL1"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" SQL2"),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a.Uk)("\n"),(0,a._)("span",{class:"token comment"},"## 提交事务"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token keyword"},"COMMIT"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),J=(0,a._)("h3",{id:"_1-6-3-何为-acid-特性呢",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-3-何为-acid-特性呢","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.3. 何为 ACID 特性呢？")],-1),$=(0,a._)("p",null,"关系型数据库 (例如:MySQL, SQL Server, Oracle 等) 事务都有 ACID 特性：",-1),ll=(0,a._)("p",null,[(0,a._)("img",{src:i,alt:"picture 7"})],-1),el=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"原子性 (Atomicity) :"),(0,a._)("p",null,"事务是最小的执行单位，不允许分割。事务的原子性确保操作 要么全部执行，要么全部不执行")]),(0,a._)("li",null,[(0,a._)("p",null,"一致性 (Consistency):"),(0,a._)("p",null,"执行事务前后，数据保持一致"),(0,a._)("blockquote",null,[(0,a._)("p",null,"例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的;")])]),(0,a._)("li",null,[(0,a._)("p",null,"隔离性 (Isolation):"),(0,a._)("p",null,"并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;")]),(0,a._)("li",null,[(0,a._)("p",null,"持久性 (Durability):"),(0,a._)("p",null,"一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。")])],-1),nl=(0,a._)("h4",{id:"_1-6-3-1-数据事务的实现原理呢",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-3-1-数据事务的实现原理呢","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.3.1. 数据事务的实现原理呢？")],-1),al=(0,a._)("p",null,"MySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。",-1),_l=(0,a._)("p",null,"MySQL InnoDB 引擎通过锁机制，MVCC 等手段来保证事务的隔离性 ( 默认支持的隔离级别是 REPEATABLE-READ ).",-1),tl=(0,a._)("p",null,"保证了事务的持久性，原子性，隔离性之后，一致性才能得到保障。",-1),sl=(0,a._)("h3",{id:"_1-6-4-并发事务带来哪些问题",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-并发事务带来哪些问题","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4. 并发事务带来哪些问题？")],-1),il=(0,a._)("p",null,"多个事务并发运行，经常会操作相同的数据来完成各自的任务 (比如多个用户对同一数据进行操作) 并发虽然是必须的，但可能会导致以下的问题",-1),rl=(0,a._)("h4",{id:"_1-6-4-1-脏读-dirty-read",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-1-脏读-dirty-read","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4.1. 脏读 (Dirty read)")],-1),dl=(0,a._)("p",null,"当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。",-1),ul=(0,a._)("h4",{id:"_1-6-4-2-丢失修改-lost-to-modify",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-2-丢失修改-lost-to-modify","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4.2. 丢失修改 (Lost to modify)")],-1),cl=(0,a._)("p",null,"在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。",-1),ol=(0,a._)("h4",{id:"_1-6-4-3-不可重复读-unrepeatable-read",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-3-不可重复读-unrepeatable-read","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4.3. 不可重复读 (Unrepeatable read)")],-1),hl=(0,a._)("p",null,"在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。",-1),pl=(0,a._)("h4",{id:"_1-6-4-4-幻读-phantom-read",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-4-幻读-phantom-read","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4.4. 幻读 (Phantom read)")],-1),kl=(0,a._)("p",null,"一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。",-1),yl=(0,a._)("h4",{id:"_1-6-4-5-不可重复读和幻读的区别",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-4-5-不可重复读和幻读的区别","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.4.5. 不可重复读和幻读的区别")],-1),bl=(0,a._)("ol",null,[(0,a._)("li",null,"不可重复读的重点是修改，比如多次读取一条记录发现其中某些列的值被修改"),(0,a._)("li",null,"幻读的重点在于新增或者删除，比如多次读取发现记录条数增多或减少")],-1),ml=(0,a._)("h3",{id:"_1-6-5-事务隔离级别有哪些",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-5-事务隔离级别有哪些","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.5. 事务隔离级别有哪些？")],-1),gl=(0,a._)("table",null,[(0,a._)("thead",null,[(0,a._)("tr",null,[(0,a._)("th",{style:{"text-align":"center"}},"隔离级别"),(0,a._)("th",{style:{"text-align":"center"}},"脏读"),(0,a._)("th",{style:{"text-align":"center"}},"不可重复读"),(0,a._)("th",{style:{"text-align":"center"}},"幻读")])]),(0,a._)("tbody",null,[(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"center"}},"READ-UNCOMMITTED"),(0,a._)("td",{style:{"text-align":"center"}},"√"),(0,a._)("td",{style:{"text-align":"center"}},"√"),(0,a._)("td",{style:{"text-align":"center"}},"√")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"center"}},"READ-COMMITTED"),(0,a._)("td",{style:{"text-align":"center"}},"×"),(0,a._)("td",{style:{"text-align":"center"}},"√"),(0,a._)("td",{style:{"text-align":"center"}},"√")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"center"}},"REPEATABLE-READ"),(0,a._)("td",{style:{"text-align":"center"}},"×"),(0,a._)("td",{style:{"text-align":"center"}},"×"),(0,a._)("td",{style:{"text-align":"center"}},"√")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"center"}},"SERIALIZABLE"),(0,a._)("td",{style:{"text-align":"center"}},"×"),(0,a._)("td",{style:{"text-align":"center"}},"×"),(0,a._)("td",{style:{"text-align":"center"}},"×")])])],-1),Ul=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"READ-UNCOMMITTED(读取未提交):"),(0,a._)("p",null,"最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读，幻读或不可重复读。")]),(0,a._)("li",null,[(0,a._)("p",null,"READ-COMMITTED(读取已提交):"),(0,a._)("p",null,"允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。")]),(0,a._)("li",null,[(0,a._)("p",null,"REPEATABLE-READ(可重复读):"),(0,a._)("p",null,"对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。")]),(0,a._)("li",null,[(0,a._)("p",null,"SERIALIZABLE(可串行化):"),(0,a._)("p",null,"最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读，不可重复读以及幻读。")])],-1),El=(0,a._)("h3",{id:"_1-6-6-mysql-的默认隔离级别是-repeatable-read",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-6-mysql-的默认隔离级别是-repeatable-read","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6.6. MySQL 的默认隔离级别是 REPEATABLE-READ")],-1),xl=(0,a._)("p",null,"MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ, InnoDB 存储引擎在分布式事务的情况下一般会用到 SERIALIZABLE 隔离级别。",-1),Ml=(0,a._)("p",null,"隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED, InnoDB 存储引擎默认使用 REPEATABLE-READ , 但是并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是 next-key locks",-1),Ll=(0,a._)("p",null,[(0,a._)("code",null,"SELECT @@transaction_isolation;"),(0,a.Uk)(" 可以查询当前隔离级别")],-1),Sl=(0,a._)("h2",{id:"_1-7-一条-sql-语句在-mysql-中如何被执行的",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-一条-sql-语句在-mysql-中如何被执行的","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7. 一条 SQL 语句在 MySQL 中如何被执行的？")],-1),Il=(0,a._)("p",null,[(0,a._)("img",{src:r,alt:"picture 9"})],-1),Al=(0,a._)("h3",{id:"_1-7-1-mysql-基本架构概览",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-mysql-基本架构概览","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1. MySQL 基本架构概览")],-1),fl=(0,a._)("ol",null,[(0,a._)("li",null,"连接器：身份认证和权限相关 (登录 MySQL 的时候)."),(0,a._)("li",null,"查询缓存：执行查询语句的时候，会先查询缓存 (MySQL 8.0 版本后移除)."),(0,a._)("li",null,"分析器：没有命中缓存的话，SQL 语句就会经过分析器，分析器看 SQL 语句要干，再检查 SQL 语句语法是否正确。"),(0,a._)("li",null,"优化器：按照 MySQL 认为最优的方案去执行")],-1),vl=(0,a._)("h3",{id:"_1-7-2-mysql-主要分为-server-层和存储引擎层",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-mysql-主要分为-server-层和存储引擎层","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2. MySQL 主要分为 Server 层和存储引擎层")],-1),Rl=(0,a._)("ol",null,[(0,a._)("li",null,"Server 层：主要包括连接器，查询缓存，分析器，优化器，执行器等，所有跨存储引擎的功能都在这一层实现，比如存储过程，触发器，视图，函数等，还有一个通用的日志模块 binglog 日志模块。"),(0,a._)("li",null,"存储引擎：主要负责数据的存储和读取，采用可以替换的插件式架构，支持 InnoDB, MyISAM, Memory 等多个存储引擎，其中 InnoDB 引擎有自有的日志模块 redolog 模块。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始就被当做默认存储引擎了")],-1),Dl=(0,a._)("h3",{id:"_1-7-3-语句分析-查询语句",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-3-语句分析-查询语句","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.3. 语句分析 - 查询语句")],-1),ql=(0,a._)("p",null,[(0,a._)("code",null,"select * from tb_student A where A.age='18' and A.name=' 张三 ';")],-1),Ql=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限，执行下一步。~"),(0,a._)("s",null,"在 MySQL8.0 版本以前，会先查询缓存，以这条 sql 语句为 key 在内存中查询是否有结果，如果有直接缓存，如果没有，执行下一步。"),(0,a.Uk)("~")])]),(0,a._)("li",null,[(0,a._)("p",null,"通过分析器进行词法分析，提取 sql 语句的关键元素，判断这个 sql 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。"),(0,a._)("p",null,"比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id='1'.然后判断这个 sql 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。")]),(0,a._)("li",null,[(0,a._)("p",null,"优化器进行确定执行方案"),(0,a._)("p",null,"上面的 sql 语句，可以有两种执行方案： a.先查询学生表中姓名为 张三 的学生，然后判断是否年龄是 18. b.先找出学生中年龄 18 岁的学生，然后再查询姓名为 张三 的学生。 优化器根据自己的优化算法进行选择执行效率最好的一个方案 (优化器认为，有时候不一定最好).那么确认了执行计划后就准备开始执行了。")]),(0,a._)("li",null,[(0,a._)("p",null,"进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果。")])],-1),Tl=(0,a._)("h3",{id:"_1-7-4-语句分析-更新语句-增加-更新-删除",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-4-语句分析-更新语句-增加-更新-删除","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.4. 语句分析 - 更新语句 (增加，更新，删除)")],-1),Cl=(0,a._)("p",null,[(0,a._)("code",null,"update tb_student A set A.age='19' where A.name=' 张三 ';")],-1),Bl=(0,a._)("ol",null,[(0,a._)("li",null,"先根据条件查询到张三这一条数据，如果有缓存，也是会用到缓存。"),(0,a._)("li",null,"然后拿到查询的语句，更新数据，把 age 改为 19，然后调用引擎 API 接口，写入这一行数据，InnoDB 引擎把数据保存在内存中，同时记录 redo log(重做日志), 此时 redo log 进入 prepare 状态，然后告诉执行器，执行完成了，随时可以提交。"),(0,a._)("li",null,"执行器收到通知后记录 binlog (归档日志), 然后调用引擎接口，提交 redo log 为提交状态。"),(0,a._)("li",null,"更新完成。")],-1),wl=(0,a._)("h3",{id:"_1-7-5-总结",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-5-总结","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.5. 总结")],-1),Ol=(0,a._)("ol",null,[(0,a._)("li",null,"MySQL 主要分为 Server 层和引擎层，Server 层主要包括连接器，查询缓存，分析器，优化器，执行器，同时还有一个日志模块 (binlog), 这个日志模块所有执行引擎都可以共用，redolog 只有 InnoDB 有。"),(0,a._)("li",null,"引擎层是插件式的，目前主要包括，MyISAM, InnoDB, Memory 等。"),(0,a._)("li",null,"查询语句的执行流程如下：权限校验 (如果命中缓存)---\x3e查询缓存---\x3e分析器---\x3e优化器---\x3e权限校验---\x3e执行器---\x3e引擎"),(0,a._)("li",null,"更新语句执行流程如下：分析器----\x3e权限校验----\x3e执行器---\x3e引擎---redo log(prepare 状态)---\x3ebinlog---\x3eredo log(commit 状态)")],-1),Nl=(0,a._)("h2",{id:"_1-8-索引是什么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-8-索引是什么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.8. 索引是什么？")],-1),Pl=(0,a._)("p",null,"索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。",-1),Yl=(0,a._)("h2",{id:"_1-9-索引有哪些优缺点",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-9-索引有哪些优缺点","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.9. 索引有哪些优缺点？")],-1),Vl=(0,a._)("h3",{id:"_1-9-1-索引的优点",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-9-1-索引的优点","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.9.1. 索引的优点")],-1),Hl=(0,a._)("ol",null,[(0,a._)("li",null,"创建唯一性索引，保证数据库表中每一行数据的唯一性"),(0,a._)("li",null,"大大加快数据的检索速度，这也是创建索引的最主要的原因"),(0,a._)("li",null,"加速表和表之间的连接，特别是在实现数据的参照完整性方面特别有意义。"),(0,a._)("li",null,"在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。"),(0,a._)("li",null,"通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能。")],-1),Xl=(0,a._)("h3",{id:"_1-9-2-索引的缺点",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-9-2-索引的缺点","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.9.2. 索引的缺点")],-1),Fl=(0,a._)("ol",null,[(0,a._)("li",null,"创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加"),(0,a._)("li",null,"索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大"),(0,a._)("li",null,"当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度")],-1),Kl=(0,a._)("h2",{id:"_1-10-mysql-有哪几种索引类型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-10-mysql-有哪几种索引类型","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.10. MySQL 有哪几种索引类型？")],-1),Wl=(0,a._)("ol",null,[(0,a._)("li",null,"普通索引：即一个索引只包含单个列，一个表可以有多个单列索引"),(0,a._)("li",null,"唯一索引：索引列的值必须唯一，但允许有空值"),(0,a._)("li",null,"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并")],-1),Zl=(0,a._)("h2",{id:"_1-11-联合索引是什么-为什么需要注意联合索引中的顺序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-11-联合索引是什么-为什么需要注意联合索引中的顺序","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.11. 联合索引是什么？为什么需要注意联合索引中的顺序？")],-1),jl=(0,a._)("p",null,"MySQL 可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序使用，否则无法命中索引。一般情况下，将查询需求频繁或者字段选择性高的列放在前面",-1),Gl=(0,a._)("h2",{id:"_1-12-讲一讲-mysql-的最左前缀原则",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-12-讲一讲-mysql-的最左前缀原则","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.12. 讲一讲 MySQL 的最左前缀原则？")],-1),zl=(0,a._)("p",null,"最左前缀原则就是最左优先，在创建联合索引时，要根据业务需求，where 子句中使用最频繁的一列放在最左边。 mysql 会一直向右匹配直到遇到范围查询 (>, <, between, like) 就停止匹配",-1),Jl=(0,a._)("blockquote",null,[(0,a._)("p",null,"比如 a = 1 and b = 2 and c > 3 and d = 4 如果建立 (a, b, c, d) 顺序的索引，d 是用不到索引的，如果建立 (a, b, d, c) 的索引则都可以用到，a, b, d 的顺序可以任意调整。")],-1),$l=(0,a._)("p",null,"= 和 in 可以乱序，比如 a = 1 and b = 2 and c = 3 建立 (a, b, c) 索引可以任意顺序，mysql 的查询优化器会帮你优化成索引可以识别的形式。",-1),le=(0,a._)("h2",{id:"_1-13-怎么查看-mysql-语句有没有用到索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-13-怎么查看-mysql-语句有没有用到索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.13. 怎么查看 MySQL 语句有没有用到索引？")],-1),ee=(0,a._)("p",null,"使用 explain",-1),ne=(0,a._)("p",null,[(0,a._)("code",null,"EXPLAIN SELECT * FROM employees.titles WHERE emp_no='10001' AND title='Senior Engineer' AND from_date='1986-06-26';")],-1),ae=(0,a._)("table",null,[(0,a._)("thead",null,[(0,a._)("tr",null,[(0,a._)("th",null,"id"),(0,a._)("th",null,"select_type"),(0,a._)("th",null,"table"),(0,a._)("th",null,"partitions"),(0,a._)("th",null,"type"),(0,a._)("th",null,"possible_keys"),(0,a._)("th",null,"key"),(0,a._)("th",null,"key_len"),(0,a._)("th",null,"ref"),(0,a._)("th",null,"filtered"),(0,a._)("th",null,"rows"),(0,a._)("th",null,"Extra")])]),(0,a._)("tbody",null,[(0,a._)("tr",null,[(0,a._)("td",null,"1"),(0,a._)("td",null,"SIMPLE"),(0,a._)("td",null,"titles"),(0,a._)("td",null,"null"),(0,a._)("td",null,"const"),(0,a._)("td",null,"PRIMARY"),(0,a._)("td",null,"PRIMARY"),(0,a._)("td",null,"59"),(0,a._)("td",null,"const, const, const"),(0,a._)("td",null,"10"),(0,a._)("td",null,"1"),(0,a._)("td")])])],-1),_e=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"id:在⼀个⼤的查询语句中每个 SELECT 关键字都对应⼀个唯⼀的 id , 如 explain select * from s1 where id = (select id from s1 where name = 'egon1');第一个 select 的 id 是 1，第二个 select 的 id 是 2.有时候会出现两个 select，但是 id 却都是 1，这是因为优化器把子查询变成了连接查询 .")]),(0,a._)("li",null,[(0,a._)("p",null,"select_type:select 关键字对应的那个查询的类型，如 SIMPLE, PRIMARY, SUBQUERY, DEPENDENT, SNION .")]),(0,a._)("li",null,[(0,a._)("p",null,"table:每个查询对应的表名 .")]),(0,a._)("li",null,[(0,a._)("p",null,"type:type 字段比较重要，它提供了判断查询是否高效的重要依据依据。通过 type 字段，判断此次查询是 全表扫描 还是 索引扫描 等。如 const(主键索引或者唯一二级索引进行等值匹配的情况下), ref(普通的⼆级索引列与常量进⾏等值匹配), index(扫描全表索引的覆盖索引) . 通常来说，不同的 type 类型的性能关系如下： ALL < index < range ~ index_merge < ref < eq_ref < const < system ALL 类型因为是全表扫描，因此在相同的查询条件下，它是速度最慢的。 而 index 类型的查询虽然不是全表扫描，但是它扫描了所有的索引，因此比 ALL 类型的稍快。")]),(0,a._)("li",null,[(0,a._)("p",null,"possible_key:查询中可能用到的索引 (可以把用不到的删掉，降低优化器的优化时间) .")]),(0,a._)("li",null,[(0,a._)("p",null,"key:此字段是 MySQL 在当前查询时所真正使用到的索引。")]),(0,a._)("li",null,[(0,a._)("p",null,"filtered:查询器预测满足下一次查询条件的百分比 .")]),(0,a._)("li",null,[(0,a._)("p",null,"rows 也是一个重要的字段. MySQL 查询优化器根据统计信息，估算 SQL 要查找到结果集需要扫描读取的数据行数。这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好。")]),(0,a._)("li",null,[(0,a._)("p",null,"extra:表示额外信息，如 Using where, Start temporary, End temporary, Using temporary 等。")])],-1),te=(0,a._)("h2",{id:"_1-14-为什么官方建议使用自增长主键作为索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-14-为什么官方建议使用自增长主键作为索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.14. 为什么官方建议使用自增长主键作为索引？")],-1),se=(0,a._)("p",null,"自增主键是连续的，在插入过程中尽量减少页分裂，即使要进行页分裂，也只会分裂很少一部分。并且能减少数据的移动，每次插入都是插入到最后。总之就是减少分裂和移动的频率。",-1),ie=(0,a._)("h2",{id:"_1-15-如何创建索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-如何创建索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15. 如何创建索引？")],-1),re=(0,a._)("h3",{id:"_1-15-1-在执行-create-table-时创建索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-1-在执行-create-table-时创建索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15.1. 在执行 CREATE TABLE 时创建索引")],-1),de=(0,a._)("div",{class:"language-sql ext-sql line-numbers-mode"},[(0,a._)("pre",{class:"language-sql"},[(0,a._)("code",null,[(0,a._)("span",{class:"token keyword"},"CREATE"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"TABLE"),(0,a.Uk)(" user_index2 "),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("\n   id "),(0,a._)("span",{class:"token keyword"},"INT"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"auto_increment"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"PRIMARY"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"KEY"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   first_name "),(0,a._)("span",{class:"token keyword"},"VARCHAR"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token number"},"16"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   last_name "),(0,a._)("span",{class:"token keyword"},"VARCHAR"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token number"},"16"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   id_card "),(0,a._)("span",{class:"token keyword"},"VARCHAR"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token number"},"18"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   information "),(0,a._)("span",{class:"token keyword"},"text"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   "),(0,a._)("span",{class:"token keyword"},"KEY"),(0,a.Uk)(" name "),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("first_name"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)("  last_name"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   FULLTEXT "),(0,a._)("span",{class:"token keyword"},"KEY"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("information"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(" \n   "),(0,a._)("span",{class:"token keyword"},"UNIQUE"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"KEY"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("id_card"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br")])],-1),ue=(0,a._)("h3",{id:"_1-15-2-使用-alter-table-命令去增加索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-2-使用-alter-table-命令去增加索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15.2. 使用 ALTER TABLE 命令去增加索引")],-1),ce=(0,a._)("p",null,"可以创建普通索引，UNIQUE 索引或 PRIMARY KEY 索引。",-1),oe=(0,a._)("div",{class:"language-sql ext-sql line-numbers-mode"},[(0,a._)("pre",{class:"language-sql"},[(0,a._)("code",null,[(0,a._)("span",{class:"token keyword"},"ALTER"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"TABLE"),(0,a.Uk)(" table_name "),(0,a._)("span",{class:"token keyword"},"ADD"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"INDEX"),(0,a.Uk)(" index_name "),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("column_list"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),he=(0,a._)("h3",{id:"_1-15-3-使用-create-index-命令创建",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-3-使用-create-index-命令创建","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15.3. 使用 CREATE INDEX 命令创建")],-1),pe=(0,a._)("div",{class:"language-sql ext-sql line-numbers-mode"},[(0,a._)("pre",{class:"language-sql"},[(0,a._)("code",null,[(0,a._)("span",{class:"token keyword"},"CREATE"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"INDEX"),(0,a.Uk)(" index_name "),(0,a._)("span",{class:"token keyword"},"ON"),(0,a.Uk)(" table_name "),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("column_list"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),ke=(0,a._)("h2",{id:"_1-16-创建索引时需要注意什么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-16-创建索引时需要注意什么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.16. 创建索引时需要注意什么？")],-1),ye=(0,a._)("p",null,"字段非空：应该指定列为 NOT NUL.在 mysql 中，含有空值的列很难进行查询优化，因为它们使得索引，索引的统计信息以及比较运算更加复杂。你应该用 0，一个特殊的值或者一个空串代替空值;",-1),be=(0,a._)("p",null,"索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次 IO 操作获取的数据越大效率越高。",-1),me=(0,a._)("h2",{id:"_1-17-索引设计规范",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-索引设计规范","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17. 索引设计规范")],-1),ge=(0,a._)("h3",{id:"_1-17-1-限制每张表上的索引数量-建议单张表索引不超过-5-个",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-1-限制每张表上的索引数量-建议单张表索引不超过-5-个","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.1. 限制每张表上的索引数量，建议单张表索引不超过 5 个")],-1),Ue=(0,a._)("p",null,"索引并不是越多越好！索引可以提高效率同样可以降低效率。索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。",-1),Ee=(0,a._)("p",null,"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。",-1),xe=(0,a._)("h3",{id:"_1-17-2-禁止给表中的每一列都建立单独的索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-2-禁止给表中的每一列都建立单独的索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.2. 禁止给表中的每一列都建立单独的索引")],-1),Me=(0,a._)("p",null,"推荐使用联合索引",-1),Le=(0,a._)("h3",{id:"_1-17-3-每个-innodb-表必须有个主键",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-3-每个-innodb-表必须有个主键","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.3. 每个 Innodb 表必须有个主键")],-1),Se=(0,a._)("p",null,"Innodb 是一种索引组织表，Innodb 是按照主键索引的顺序来组织表的，数据的存储的逻辑顺序和索引的顺序是相同的。",-1),Ie=(0,a._)("h3",{id:"_1-17-4-常见索引列建议",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-4-常见索引列建议","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.4. 常见索引列建议")],-1),Ae=(0,a._)("ol",null,[(0,a._)("li",null,"出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列"),(0,a._)("li",null,"包含在 ORDER BY、GROUP BY、DISTINCT 中的字段"),(0,a._)("li",null,"并不要将符合以上情况的字段的列都建立一个索引， 通常将字段建立联合索引效果更好"),(0,a._)("li",null,"多表 join 的关联列")],-1),fe=(0,a._)("h3",{id:"_1-17-5-如何选择索引列的顺序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-5-如何选择索引列的顺序","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.5. 如何选择索引列的顺序")],-1),ve=(0,a._)("p",null,"建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。",-1),Re=(0,a._)("ol",null,[(0,a._)("li",null,"区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）"),(0,a._)("li",null,"尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）"),(0,a._)("li",null,"使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）")],-1),De=(0,a._)("h3",{id:"_1-17-6-避免建立冗余索引和重复索引-增加了查询优化器生成执行计划的时间",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-6-避免建立冗余索引和重复索引-增加了查询优化器生成执行计划的时间","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.6. 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）")],-1),qe=(0,a._)("ol",null,[(0,a._)("li",null,"重复索引示例：primary key(id)、index(id)、unique index(id)"),(0,a._)("li",null,"冗余索引示例：index(a,b,c)、index(a,b)、index(a)")],-1),Qe=(0,a._)("h3",{id:"_1-17-7-对于频繁的查询优先考虑使用覆盖索引",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-7-对于频繁的查询优先考虑使用覆盖索引","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.7. 对于频繁的查询优先考虑使用覆盖索引")],-1),Te=(0,a._)("p",null,"覆盖索引就是包含了所有查询字段 (where,select,order by,group by 包含的字段) 的索引",-1),Ce=(0,a._)("h4",{id:"_1-17-7-1-覆盖索引的好处",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-7-1-覆盖索引的好处","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.7.1. 覆盖索引的好处")],-1),Be=(0,a._)("ol",null,[(0,a._)("li",null,"避免 Innodb 表进行索引的二次查询: Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。"),(0,a._)("li",null,"可以把随机 IO 变成顺序 IO 加快查询效率：由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。")],-1),we=(0,a._)("h3",{id:"_1-17-8-尽量避免使用外键约束",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-8-尽量避免使用外键约束","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.8. 尽量避免使用外键约束")],-1),Oe=(0,a._)("ol",null,[(0,a._)("li",null,"不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引"),(0,a._)("li",null,"外键可用于保证数据的参照完整性，但建议在业务端实现"),(0,a._)("li",null,"外键会影响父表和子表的写操作从而降低性能")],-1),Ne=(0,a._)("h2",{id:"_1-18-使用索引查询一定能提高查询的性能吗",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-使用索引查询一定能提高查询的性能吗","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18. 使用索引查询一定能提高查询的性能吗？")],-1),Pe=(0,a._)("p",null,"通常通过索引查询数据比全表扫描要快。但是也必须注意到它的代价。",-1),Ye=(0,a._)("p",null,"索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时，索引本身也会被修改。这意味着每条记录的 INSERT, DELETE, UPDATE 将为此多付出 4, 5 次的磁盘 I/O. 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。",-1),Ve=(0,a._)("h2",{id:"_1-19-什么情况下不走索引-索引失效",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-19-什么情况下不走索引-索引失效","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.19. 什么情况下不走索引 (索引失效)?")],-1),He=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"使用 != 或者 <> 导致索引失效")]),(0,a._)("li",null,[(0,a._)("p",null,"类型不一致导致的索引失效")]),(0,a._)("li",null,[(0,a._)("p",null,"函数导致的索引失效"),(0,a._)("p",null,[(0,a._)("code",null,"SELECT * FROM user WHERE DATE(create_time) = '2020-09-03';"),(0,a.Uk)(" 如果使用函数在索引列，这是不走索引的。")])]),(0,a._)("li",null,[(0,a._)("p",null,"运算符导致的索引失效"),(0,a._)("p",null,[(0,a._)("code",null,"SELECT * FROM user WHERE age - 1 = 20;"),(0,a.Uk)(" 如果你对列进行了 (+, -, _, /, !), 那么都将不会走索引。")])]),(0,a._)("li",null,[(0,a._)("p",null,"OR 引起的索引失效"),(0,a._)("p",null,[(0,a._)("code",null,"SELECT * FROM user WHERE name = '张三' OR height = '175';")]),(0,a._)("p",null,"OR 导致索引是在特定情况下的，并不是所有的 OR 都是使索引失效，如果 OR 连接的是同一个字段，那么索引不会失效，反之索引失效。")]),(0,a._)("li",null,[(0,a._)("p",null,"模糊搜索导致的索引失效"),(0,a._)("p",null,[(0,a._)("code",null,"SELECT * FROM user WHERE name LIKE '%冰';"),(0,a.Uk)(" 当%放在匹配字段前是不走索引的，放在后面才会走索引。")])]),(0,a._)("li",null,[(0,a._)("p",null,"NOT IN, NOT EXISTS 导致索引失效")])],-1),Xe={},Fe=(0,n(3744).Z)(Xe,[["render",function(l,e){return(0,a.wg)(),(0,a.iD)(a.HY,null,[d,u,c,o,h,p,k,y,b,m,g,U,E,x,M,L,S,I,A,f,v,R,D,q,Q,T,C,B,w,O,N,P,Y,V,H,X,F,K,W,Z,j,G,z,J,$,ll,el,nl,al,_l,tl,sl,il,rl,dl,ul,cl,ol,hl,pl,kl,yl,bl,ml,gl,Ul,El,xl,Ml,Ll,Sl,Il,Al,fl,vl,Rl,Dl,ql,Ql,Tl,Cl,Bl,wl,Ol,Nl,Pl,Yl,Vl,Hl,Xl,Fl,Kl,Wl,Zl,jl,Gl,zl,Jl,$l,le,ee,ne,ae,_e,te,se,ie,re,de,ue,ce,oe,he,pe,ke,ye,be,me,ge,Ue,Ee,xe,Me,Le,Se,Ie,Ae,fe,ve,Re,De,qe,Qe,Te,Ce,Be,we,Oe,Ne,Pe,Ye,Ve,He],64)}]])},3744:(l,e)=>{e.Z=(l,e)=>{const n=l.__vccOpts||l;for(const[l,a]of e)n[l]=a;return n}},7141:(l,e,n)=>{l.exports=n.p+"assets/img/1640432480128.79fe0e35.png"},8998:(l,e,n)=>{l.exports=n.p+"assets/img/1640433377891.2a467b03.png"},3288:(l,e,n)=>{l.exports=n.p+"assets/img/1640433977644.8db254dc.png"},7359:(l,e,n)=>{l.exports=n.p+"assets/img/1640743366990.2a467b03.png"},2421:(l,e,n)=>{l.exports=n.p+"assets/img/1640743854827.70513d33.png"}}]);