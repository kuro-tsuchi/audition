"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[450],{793:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-7285148e",path:"/database/redis.html",title:"1. redis",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 简单介绍一下 Redis",slug:"_1-1-简单介绍一下-redis",children:[]},{level:2,title:"1.2. 分布式缓存作用",slug:"_1-2-分布式缓存作用",children:[]},{level:2,title:"1.3. 说一下 Redis 和 Memcached 的区别和共同点",slug:"_1-3-说一下-redis-和-memcached-的区别和共同点",children:[{level:3,title:"1.3.1. 共同点",slug:"_1-3-1-共同点",children:[]},{level:3,title:"1.3.2. 区别",slug:"_1-3-2-区别",children:[]}]},{level:2,title:"1.4. 缓存数据的处理流程是怎样的？",slug:"_1-4-缓存数据的处理流程是怎样的",children:[]},{level:2,title:"1.5. 为什么要用 Redis/为什么要用缓存？",slug:"_1-5-为什么要用-redis-为什么要用缓存",children:[{level:3,title:"1.5.1. 高性能",slug:"_1-5-1-高性能",children:[]},{level:3,title:"1.5.2. 高并发",slug:"_1-5-2-高并发",children:[]}]},{level:2,title:"1.6. Redis 除了做缓存，还能做什么？",slug:"_1-6-redis-除了做缓存-还能做什么",children:[]},{level:2,title:"1.7. Redis 常见数据结构以及使用场景分析",slug:"_1-7-redis-常见数据结构以及使用场景分析",children:[{level:3,title:"1.7.1. string",slug:"_1-7-1-string",children:[]},{level:3,title:"1.7.2. list",slug:"_1-7-2-list",children:[]},{level:3,title:"1.7.3. hash",slug:"_1-7-3-hash",children:[]},{level:3,title:"1.7.4. set",slug:"_1-7-4-set",children:[]},{level:3,title:"1.7.5. sorted set",slug:"_1-7-5-sorted-set",children:[]}]},{level:2,title:"1.8. Redis 单线程模型详解",slug:"_1-8-redis-单线程模型详解",children:[{level:3,title:"1.8.1. 文件事件处理器 (file event handler) 主要是包含 4 个部分",slug:"_1-8-1-文件事件处理器-file-event-handler-主要是包含-4-个部分",children:[]},{level:3,title:"1.8.2. 单线程怎么监听大量的客户端连接呢？",slug:"_1-8-2-单线程怎么监听大量的客户端连接呢",children:[]}]},{level:2,title:"1.9. Redis 没有使用多线程？为什么不使用多线程？",slug:"_1-9-redis-没有使用多线程-为什么不使用多线程",children:[]},{level:2,title:"1.10. Redis6.0 之后为何引入了多线程？",slug:"_1-10-redis6-0-之后为何引入了多线程",children:[]},{level:2,title:"1.11. Redis 给缓存数据设置过期时间有啥用？",slug:"_1-11-redis-给缓存数据设置过期时间有啥用",children:[{level:3,title:"1.11.1. 过期时间除了有助于缓解内存的消耗，还有什么其他用么？",slug:"_1-11-1-过期时间除了有助于缓解内存的消耗-还有什么其他用么",children:[]}]},{level:2,title:"1.12. Redis 是如何判断数据是否过期的呢？",slug:"_1-12-redis-是如何判断数据是否过期的呢",children:[]},{level:2,title:"1.13. 过期的数据的删除策略了解么？",slug:"_1-13-过期的数据的删除策略了解么",children:[{level:3,title:"1.13.1. 常用的过期数据的删除策略",slug:"_1-13-1-常用的过期数据的删除策略",children:[]}]},{level:2,title:"1.14. Redis 内存淘汰机制了解么？",slug:"_1-14-redis-内存淘汰机制了解么",children:[]},{level:2,title:"1.15. Redis 持久化机制",slug:"_1-15-redis-持久化机制",children:[{level:3,title:"1.15.1. 快照 (snapshotting) 持久化 (RDB)",slug:"_1-15-1-快照-snapshotting-持久化-rdb",children:[]},{level:3,title:"1.15.2. AOF(append-only file) 持久化 (主流方案)",slug:"_1-15-2-aof-append-only-file-持久化-主流方案",children:[]}]},{level:2,title:"1.16. Redis 事务",slug:"_1-16-redis-事务",children:[]},{level:2,title:"1.17. 缓存穿透",slug:"_1-17-缓存穿透",children:[{level:3,title:"1.17.1. 什么是缓存穿透？",slug:"_1-17-1-什么是缓存穿透",children:[]},{level:3,title:"1.17.2. 缓存穿透情况的处理流程是怎样的？",slug:"_1-17-2-缓存穿透情况的处理流程是怎样的",children:[]},{level:3,title:"1.17.3. 有哪些解决办法？",slug:"_1-17-3-有哪些解决办法",children:[]}]},{level:2,title:"1.18. 缓存雪崩",slug:"_1-18-缓存雪崩",children:[{level:3,title:"1.18.1. 什么是缓存雪崩？",slug:"_1-18-1-什么是缓存雪崩",children:[]},{level:3,title:"1.18.2. 有哪些解决办法？",slug:"_1-18-2-有哪些解决办法",children:[]}]},{level:2,title:"1.19. 如何保证缓存和数据库数据的一致性？",slug:"_1-19-如何保证缓存和数据库数据的一致性",children:[{level:3,title:"1.19.1. 读",slug:"_1-19-1-读",children:[]},{level:3,title:"1.19.2. 写",slug:"_1-19-2-写",children:[]}]}],filePathRelative:"database/redis.md",git:{updatedTime:1640781869e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:10}]}}},7510:(n,s,e)=>{e.r(s),e.d(s,{default:()=>_e});var a=e(6252),l=e(8401),r=e(8260),t=e(1684),_=e(7496),i=e(5226),c=e(8904);const p=(0,a._)("h1",{id:"_1-redis",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-redis","aria-hidden":"true"},"#"),(0,a.Uk)(" 1. redis")],-1),o=(0,a._)("h2",{id:"_1-1-简单介绍一下-redis",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-简单介绍一下-redis","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1. 简单介绍一下 Redis")],-1),u=(0,a._)("p",null,"Redis 是一个使用 C 语言开发的内存数据库数据库，Redis 的数据是存在内存中的，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。",-1),k=(0,a._)("p",null,"另外，Redis 除了做缓存之外，也经常用来做分布式锁，甚至是消息队列。",-1),d=(0,a._)("p",null,"Redis 提供了多种数据类型来支持不同的业务场景. Redis 还支持事务，持久化，Lua 脚本，多种集群方案。",-1),b=(0,a._)("h2",{id:"_1-2-分布式缓存作用",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-分布式缓存作用","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2. 分布式缓存作用")],-1),m=(0,a._)("p",null,"分布式缓存主要解决的是单机缓存的容量受服务器限制并且无法保存通用信息的问题。",-1),U=(0,a._)("p",null,"因为，本地缓存只在当前服务里有效，比如部署了两个相同的服务，他们两者之间的缓存数据是无法互通的。",-1),h=(0,a._)("h2",{id:"_1-3-说一下-redis-和-memcached-的区别和共同点",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-说一下-redis-和-memcached-的区别和共同点","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3. 说一下 Redis 和 Memcached 的区别和共同点")],-1),g=(0,a._)("h3",{id:"_1-3-1-共同点",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-1-共同点","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3.1. 共同点")],-1),v=(0,a._)("ol",null,[(0,a._)("li",null,"都是基于内存的数据库，一般都用来当做缓存使用。"),(0,a._)("li",null,"都有过期策略。"),(0,a._)("li",null,"两者的性能都非常高。")],-1),f=(0,a._)("h3",{id:"_1-3-2-区别",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-2-区别","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3.2. 区别")],-1),y=(0,a._)("ol",null,[(0,a._)("li",null,"Redis 支持更丰富的数据类型 (支持更复杂的应用场景). Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list, hash, set, zset 等数据结构的存储.Memcached 只支持最简单的 k/v 数据类型。"),(0,a._)("li",null,"Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用，而 Memecache 把数据全部存在内存之中。"),(0,a._)("li",null,"Redis 目前是原生支持 cluster 模式的，Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据"),(0,a._)("li",null,"Redis 使用单线程的多路 IO 复用模型，Memcached 是多线程，非阻塞 IO 复用的网络模型"),(0,a._)("li",null,"Redis 支持发布订阅模型，Lua 脚本，事务等功能，而 Memcached 不支持。并且，Redis 支持更多的编程语言。"),(0,a._)("li",null,"Redis 同时使用了惰性删除与定期删除，Memcached 过期数据的删除策略只用了惰性删除")],-1),R=(0,a._)("h2",{id:"_1-4-缓存数据的处理流程是怎样的",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-缓存数据的处理流程是怎样的","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4. 缓存数据的处理流程是怎样的？")],-1),x=(0,a._)("p",null,[(0,a._)("img",{src:l,alt:"picture 1"})],-1),E=(0,a._)("ol",null,[(0,a._)("li",null,"如果用户请求的数据在缓存中就直接返回。"),(0,a._)("li",null,"缓存中不存在的话就看数据库中是否存在。"),(0,a._)("li",null,"数据库中存在的话就更新缓存中的数据。"),(0,a._)("li",null,"数据库中不存在的话就返回空数据。")],-1),S=(0,a._)("h2",{id:"_1-5-为什么要用-redis-为什么要用缓存",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-为什么要用-redis-为什么要用缓存","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5. 为什么要用 Redis/为什么要用缓存？")],-1),O=(0,a._)("p",null,"使用缓存主要是为了提升用户体验以及应对更多的用户。",-1),I=(0,a._)("h3",{id:"_1-5-1-高性能",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-1-高性能","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5.1. 高性能")],-1),C=(0,a._)("p",null,"用户首次访问数据库中的某些数据是从硬盘中读取的，速度较慢，如果用户访问的数据属于高频数据并且不会经常改变的话，那么可以将用户访问的数据存在缓存中。保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。",-1),D=(0,a._)("p",null,"不过，要保持数据库和缓存中的数据的一致性。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据",-1),A=(0,a._)("h3",{id:"_1-5-2-高并发",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-2-高并发","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5.2. 高并发")],-1),K=(0,a._)("p",null,"MySQL 数据库的 QPS 大概都在 1w 左右 (4 核 8g) , 但是使用 Redis 缓存之后很容易达到 10w+, 甚至最高能达到 30w+( 此为 redis 单机的情况，redis 集群的话会更高).",-1),L=(0,a._)("p",null,"直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，也就提高了系统整体的并发。",-1),T=(0,a._)("blockquote",null,[(0,a._)("p",null,"QPS(Query Per Second): 服务器每秒可以执行的查询次数;")],-1),G=(0,a._)("h2",{id:"_1-6-redis-除了做缓存-还能做什么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-6-redis-除了做缓存-还能做什么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.6. Redis 除了做缓存，还能做什么？")],-1),M=(0,a._)("ol",null,[(0,a._)("li",null,"分布式锁：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，都是基于 Redisson 来实现分布式锁"),(0,a._)("li",null,"限流：一般是通过 Redis + Lua 脚本的方式来实现限流"),(0,a._)("li",null,"消息队列: Redis 自带的 list 数据结构可以作为一个简单的队列使用.Redis5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。"),(0,a._)("li",null,"复杂业务场景：通过 Redis 以及 Redis 扩展 (比如 Redisson) 提供的数据结构，可以很方便地完成很多复杂的业务场景，比如通过 bitmap 统计活跃用户，通过 sorted set 维护排行榜。")],-1),z=(0,a._)("h2",{id:"_1-7-redis-常见数据结构以及使用场景分析",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-redis-常见数据结构以及使用场景分析","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7. Redis 常见数据结构以及使用场景分析")],-1),w=(0,a._)("h3",{id:"_1-7-1-string",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-string","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1. string")],-1),B=(0,a._)("ol",null,[(0,a._)("li",null,"介绍 : string 数据结构是简单的 key-value 类型"),(0,a._)("li",null,"常用命令：set, get, strlen, exists, decr, incr, setex 等等。"),(0,a._)("li",null,"应用场景：存储信息，计数器")],-1),F=(0,a._)("h4",{id:"_1-7-1-1-普通字符串的基本操作",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-1-普通字符串的基本操作","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1.1. 普通字符串的基本操作")],-1),q=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(),(0,a._)("span",{class:"token builtin class-name"},"set"),(0,a.Uk)(" key value "),(0,a._)("span",{class:"token comment"},"#设置 key-value 类型的值"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" get key "),(0,a._)("span",{class:"token comment"},"# 根据 key 获得对应的 value"),(0,a.Uk)("\nvalue\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" exists key  "),(0,a._)("span",{class:"token comment"},"# 判断某个 key 是否存在"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" strlen key "),(0,a._)("span",{class:"token comment"},"# 返回 key 所储存的字符串值的长度。"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"5"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" del key "),(0,a._)("span",{class:"token comment"},"# 删除某个 key 对应的值"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" get key\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("nil"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br")])],-1),P=(0,a._)("h4",{id:"_1-7-1-2-批量设置",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-2-批量设置","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1.2. 批量设置")],-1),Q=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" mset key1 value1 key2 value2 "),(0,a._)("span",{class:"token comment"},"# 批量设置 key-value 类型的值"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" mget key1 key2 "),(0,a._)("span",{class:"token comment"},"# 批量获取多个 key 对应的 value"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br")])],-1),Z=(0,a._)("h4",{id:"_1-7-1-3-计数器-字符串的内容为整数的时候可以使用",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-3-计数器-字符串的内容为整数的时候可以使用","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1.3. 计数器 (字符串的内容为整数的时候可以使用)")],-1),X=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(),(0,a._)("span",{class:"token builtin class-name"},"set"),(0,a.Uk)(" number "),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" incr number "),(0,a._)("span",{class:"token comment"},"# 将 key 中储存的数字值增一"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" get number\n"),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" decr number "),(0,a._)("span",{class:"token comment"},"# 将 key 中储存的数字值减一"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" get number\n"),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br")])],-1),H=(0,a._)("h4",{id:"_1-7-1-4-过期-默认为永不过期",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-1-4-过期-默认为永不过期","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.1.4. 过期 (默认为永不过期)")],-1),W=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" expire key  "),(0,a._)("span",{class:"token number"},"60"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 数据在 60s 后过期"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" setex key "),(0,a._)("span",{class:"token number"},"60"),(0,a.Uk)(" value "),(0,a._)("span",{class:"token comment"},"# 数据在 60s 后过期 (setex: [set] + [ex]pire)"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" ttl key "),(0,a._)("span",{class:"token comment"},"# 查看数据还有多久过期"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"56"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),V=(0,a._)("h3",{id:"_1-7-2-list",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-list","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2. list")],-1),N=(0,a._)("ol",null,[(0,a._)("li",null,"介绍 : list 即是 链表。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且可以灵活调整链表长度，但是链表的随机访问困难。"),(0,a._)("li",null,"常用命令：rpush, lpop, lpush, rpop, lrange, llen 等。"),(0,a._)("li",null,"应用场景：发布与订阅或者说消息队列，慢查询。")],-1),Y=(0,a._)("h4",{id:"_1-7-2-1-通过-rpush-lpop-实现队列",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-1-通过-rpush-lpop-实现队列","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2.1. 通过 rpush/lpop 实现队列")],-1),j=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" rpush myList value1 "),(0,a._)("span",{class:"token comment"},"# 向 list 的头部 (右边) 添加元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" rpush myList value2 value3 "),(0,a._)("span",{class:"token comment"},"# 向 list 的头部 (最右边) 添加多个元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" lpop myList "),(0,a._)("span",{class:"token comment"},"# 将 list 的尾部 (最左边) 元素取出"),(0,a.Uk)("\nvalue1\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" lrange myList "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 查看对应下标的 list 列表，0 为 start, 1 为 end"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value3\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" lrange myList "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(" -1 "),(0,a._)("span",{class:"token comment"},"# 查看列表中的所有元素，-1 表示倒数第一"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value3\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br")])],-1),J=(0,a._)("h4",{id:"_1-7-2-2-通过-rpush-rpop-实现栈",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-2-通过-rpush-rpop-实现栈","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2.2. 通过 rpush/rpop 实现栈")],-1),$=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" rpush myList2 value1 value2 value3\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" rpop myList2 "),(0,a._)("span",{class:"token comment"},"# 将 list 的头部 (最右边) 元素取出"),(0,a.Uk)("\nvalue3\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br")])],-1),nn=(0,a._)("p",null,[(0,a._)("img",{src:r,alt:"picture 3"})],-1),sn=(0,a._)("h4",{id:"_1-7-2-3-通过-lrange-查看对应下标范围的列表元素",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-3-通过-lrange-查看对应下标范围的列表元素","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2.3. 通过 lrange 查看对应下标范围的列表元素")],-1),en=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" rpush myList value1 value2 value3\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" lrange myList "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 查看对应下标的 list 列表，0 为 start, 1 为 end"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" lrange myList "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(" -1 "),(0,a._)("span",{class:"token comment"},"# 查看列表中的所有元素，-1 表示倒数第一"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"3"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value3\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br")])],-1),an=(0,a._)("p",null,"通过 lrange 命令，你可以基于 list 实现分页查询，性能非常高！",-1),ln=(0,a._)("h4",{id:"_1-7-2-4-通过-llen-查看链表长度",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-2-4-通过-llen-查看链表长度","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.2.4. 通过 llen 查看链表长度")],-1),rn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" llen myList\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br")])],-1),tn=(0,a._)("h3",{id:"_1-7-3-hash",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-3-hash","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.3. hash")],-1),_n=(0,a._)("ol",null,[(0,a._)("li",null,"hash 是一个 string 类型的 field 和 value 的映射表，特别适合用于存储对象"),(0,a._)("li",null,"常用命令：hset, hmset, hexists, hget, hgetall, hkeys, hvals 等。")],-1),cn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hmset userInfoKey name guide description dev age "),(0,a._)("span",{class:"token number"},"24"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hexists userInfoKey name "),(0,a._)("span",{class:"token comment"},"# 查看 key 对应的 value 中指定的字段是否存在。"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hget userInfoKey name "),(0,a._)("span",{class:"token comment"},"# 获取存储在哈希表中指定字段的值。"),(0,a.Uk)("\nguide\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hget userInfoKey age\n"),(0,a._)("span",{class:"token number"},"24"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hgetall userInfoKey "),(0,a._)("span",{class:"token comment"},"# 获取在哈希表中指定 key 的所有字段和值"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" name\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" guide\n"),(0,a._)("span",{class:"token number"},"3"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" description\n"),(0,a._)("span",{class:"token number"},"4"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" dev\n"),(0,a._)("span",{class:"token number"},"5"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" age\n"),(0,a._)("span",{class:"token number"},"6"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"24"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hkeys userInfoKey "),(0,a._)("span",{class:"token comment"},"# 获取 key 列表"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" name\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" description\n"),(0,a._)("span",{class:"token number"},"3"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" age\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hvals userInfoKey "),(0,a._)("span",{class:"token comment"},"# 获取 value 列表"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" guide\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" dev\n"),(0,a._)("span",{class:"token number"},"3"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"24"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hset userInfoKey name GuideGeGe "),(0,a._)("span",{class:"token comment"},"# 修改某个字段对应的值"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" hget userInfoKey name\nGuideGeGe\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"22"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"23"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"24"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"25"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"26"),(0,a._)("br")])],-1),pn=(0,a._)("h3",{id:"_1-7-4-set",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-4-set","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.4. set")],-1),on=(0,a._)("ol",null,[(0,a._)("li",null,"介绍 : Redis 中的 set 类型是一种无序集合"),(0,a._)("li",null,"常用命令：sadd, spop, smembers, sismember, scard, sinterstore, sunion 等。")],-1),un=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" sadd mySet value1 value2 "),(0,a._)("span",{class:"token comment"},"# 添加元素进去"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" sadd mySet value1 "),(0,a._)("span",{class:"token comment"},"# 不允许有重复元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" smembers mySet "),(0,a._)("span",{class:"token comment"},"# 查看 set 中所有的元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" scard mySet "),(0,a._)("span",{class:"token comment"},"# 查看 set 的长度"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" sismember mySet value1 "),(0,a._)("span",{class:"token comment"},"# 检查某个元素是否存在 set 中，只能接收单个元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" sadd mySet2 value2 value3\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" sinterstore mySet3 mySet mySet2 "),(0,a._)("span",{class:"token comment"},"# 获取 mySet 和 mySet2 的交集并存放在 mySet3 中"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" smembers mySet3\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br")])],-1),kn=(0,a._)("h3",{id:"_1-7-5-sorted-set",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-7-5-sorted-set","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.7.5. sorted set")],-1),dn=(0,a._)("ol",null,[(0,a._)("li",null,"介绍：和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。"),(0,a._)("li",null,"常用命令：zadd, zcard, zscore, zrange, zrevrange, zrem 等。")],-1),bn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zadd myZset "),(0,a._)("span",{class:"token number"},"3.0"),(0,a.Uk)(" value1 "),(0,a._)("span",{class:"token comment"},"# 添加元素到 sorted set 中 3.0 为权重"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zadd myZset "),(0,a._)("span",{class:"token number"},"2.0"),(0,a.Uk)(" value2 "),(0,a._)("span",{class:"token number"},"1.0"),(0,a.Uk)(" value3 "),(0,a._)("span",{class:"token comment"},"# 一次添加多个元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"2"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zcard myZset "),(0,a._)("span",{class:"token comment"},"# 查看 sorted set 中的元素数量"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zscore myZset value1 "),(0,a._)("span",{class:"token comment"},"# 查看某个 value 的权重"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"3"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zrange  myZset "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(" -1 "),(0,a._)("span",{class:"token comment"},"# 顺序输出某个范围区间的元素，0 -1 表示输出所有元素"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value3\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"3"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zrange  myZset "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 顺序输出某个范围区间的元素，0 为 start  1 为 stop"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value3\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" zrevrange  myZset "),(0,a._)("span",{class:"token number"},"0"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 逆序输出某个范围区间的元素，0 为 start  1 为 stop"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value1\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" value2\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br")])],-1),mn=(0,a._)("h2",{id:"_1-8-redis-单线程模型详解",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-8-redis-单线程模型详解","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.8. Redis 单线程模型详解")],-1),Un=(0,a._)("p",null,[(0,a._)("img",{src:t,alt:"picture 10"})],-1),hn=(0,a._)("p",null,"Redis 基于 Reactor 模式来设计开发了自己的一套高效的事件处理模型 , 这套事件处理模型对应的是 Redis 中的文件事件处理器 (file event handler).由于文件事件处理器是单线程方式运行的，所以一般都说 Redis 是单线程模型。",-1),gn=(0,a._)("h3",{id:"_1-8-1-文件事件处理器-file-event-handler-主要是包含-4-个部分",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-8-1-文件事件处理器-file-event-handler-主要是包含-4-个部分","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.8.1. 文件事件处理器 (file event handler) 主要是包含 4 个部分")],-1),vn=(0,a._)("ol",null,[(0,a._)("li",null,"多个 socket(客户端连接)"),(0,a._)("li",null,"IO 多路复用程序 (支持多个客户端连接的关键)"),(0,a._)("li",null,"文件事件分派器 (将 socket 关联到相应的事件处理器)"),(0,a._)("li",null,"事件处理器 (连接应答处理器，命令请求处理器，命令回复处理器)")],-1),fn=(0,a._)("h3",{id:"_1-8-2-单线程怎么监听大量的客户端连接呢",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-8-2-单线程怎么监听大量的客户端连接呢","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.8.2. 单线程怎么监听大量的客户端连接呢？")],-1),yn=(0,a._)("p",null,"Redis 通过 IO 多路复用程序来监听来自客户端的大量连接或者说是监听多个 socket，它会将关注的事件及类型 (读，写) 注册到内核中并监听每个事件是否发生。I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗",-1),Rn=(0,a._)("h2",{id:"_1-9-redis-没有使用多线程-为什么不使用多线程",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-9-redis-没有使用多线程-为什么不使用多线程","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.9. Redis 没有使用多线程？为什么不使用多线程？")],-1),xn=(0,a._)("ol",null,[(0,a._)("li",null,"单线程编程容易并且更容易维护;"),(0,a._)("li",null,"Redis 的性能瓶颈不在 CPU , 主要在内存和网络;"),(0,a._)("li",null,"多线程就会存在死锁，线程上下文切换等问题，甚至会影响性能。")],-1),En=(0,a._)("h2",{id:"_1-10-redis6-0-之后为何引入了多线程",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-10-redis6-0-之后为何引入了多线程","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.10. Redis6.0 之后为何引入了多线程？")],-1),Sn=(0,a._)("p",null,"Redis6.0 引入多线程主要是为了提高网络 IO 读写性能，因为这个算是 Redis 中的一个性能瓶颈 (Redis 的瓶颈主要受限于内存和网络).",-1),On=(0,a._)("p",null,"虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行。因此，不需要担心线程安全问题。",-1),In=(0,a._)("p",null,"Redis6.0 的多线程默认是禁用的",-1),Cn=(0,a._)("h2",{id:"_1-11-redis-给缓存数据设置过期时间有啥用",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-11-redis-给缓存数据设置过期时间有啥用","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.11. Redis 给缓存数据设置过期时间有啥用？")],-1),Dn=(0,a._)("p",null,"因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接内存不足。",-1),An=(0,a._)("p",null,"Redis 自带了给缓存数据设置过期时间的功能，比如：",-1),Kn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" exp key "),(0,a._)("span",{class:"token number"},"60"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"# 数据在 60s 后过期"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"1"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" setex key "),(0,a._)("span",{class:"token number"},"60"),(0,a.Uk)(" value "),(0,a._)("span",{class:"token comment"},"# 数据在 60s 后过期 (setex: [set] + [ex]pire)"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token number"},"127.0"),(0,a.Uk)(".0.1: "),(0,a._)("span",{class:"token number"},"637"),(0,a._)("span",{class:"token operator"},[(0,a._)("span",{class:"token file-descriptor important"},"9"),(0,a.Uk)(">")]),(0,a.Uk)(" ttl key "),(0,a._)("span",{class:"token comment"},"# 查看数据还有多久过期"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"("),(0,a.Uk)("integer"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token number"},"56"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),Ln=(0,a._)("p",null,"注意: Redis 中除了字符串类型有自己独有设置过期时间的命令 setex 外，其他方法都需要依靠 expire 命令来设置过期时间 .另外，persist 命令可以移除一个键的过期时间。",-1),Tn=(0,a._)("h3",{id:"_1-11-1-过期时间除了有助于缓解内存的消耗-还有什么其他用么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-11-1-过期时间除了有助于缓解内存的消耗-还有什么其他用么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.11.1. 过期时间除了有助于缓解内存的消耗，还有什么其他用么？")],-1),Gn=(0,a._)("p",null,"很多时候业务场景需要某个数据只在某一时间段内存在，比如的短信验证码可能只在 1 分钟内有效，用户登录的 token 可能只在 1 天内有效。",-1),Mn=(0,a._)("p",null,"如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。",-1),zn=(0,a._)("h2",{id:"_1-12-redis-是如何判断数据是否过期的呢",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-12-redis-是如何判断数据是否过期的呢","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.12. Redis 是如何判断数据是否过期的呢？")],-1),wn=(0,a._)("p",null,[(0,a._)("img",{src:_,alt:"picture 11"})],-1),Bn=(0,a._)("p",null,"Redis 通过一个叫做过期字典 (可以看作是 hash 表) 来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键), 过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间 (毫秒精度的 UNIX 时间戳).",-1),Fn=(0,a._)("p",null,"过期字典是存储在 redisDb 这个结构里的：",-1),qn=(0,a._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,a._)("pre",{class:"language-c"},[(0,a._)("code",null,[(0,a._)("span",{class:"token keyword"},"typedef"),(0,a.Uk)(),(0,a._)("span",{class:"token keyword"},"struct"),(0,a.Uk)(),(0,a._)("span",{class:"token class-name"},"redisDb"),(0,a.Uk)(),(0,a._)("span",{class:"token punctuation"},"{"),(0,a.Uk)("\n    "),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a.Uk)("\n\n    dict "),(0,a._)("span",{class:"token operator"},"*"),(0,a.Uk)("dict"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("     "),(0,a._)("span",{class:"token comment"},"//数据库键空间，保存着数据库中所有键值对"),(0,a.Uk)("\n    dict "),(0,a._)("span",{class:"token operator"},"*"),(0,a.Uk)("expires   "),(0,a._)("span",{class:"token comment"},"// 过期字典，保存着键的过期时间"),(0,a.Uk)("\n    "),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token punctuation"},"."),(0,a.Uk)("\n"),(0,a._)("span",{class:"token punctuation"},"}"),(0,a.Uk)(" redisDb"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br")])],-1),Pn=(0,a._)("h2",{id:"_1-13-过期的数据的删除策略了解么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-13-过期的数据的删除策略了解么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.13. 过期的数据的删除策略了解么？")],-1),Qn=(0,a._)("blockquote",null,[(0,a._)("p",null,"如果设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？")],-1),Zn=(0,a._)("h3",{id:"_1-13-1-常用的过期数据的删除策略",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-13-1-常用的过期数据的删除策略","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.13.1. 常用的过期数据的删除策略")],-1),Xn=(0,a._)("ol",null,[(0,a._)("li",null,"惰性删除：在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。"),(0,a._)("li",null,"定期删除：每隔一段时间抽取一批 key 执行删除过期 key 操作。并且 Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。")],-1),Hn=(0,a._)("p",null,"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除 + 惰性/懒汉式删除 .",-1),Wn=(0,a._)("blockquote",null,[(0,a._)("p",null,"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就内存不足了。"),(0,a._)("p",null,"怎么解决这个问题呢？答案就是: Redis 内存淘汰机制。")],-1),Vn=(0,a._)("h2",{id:"_1-14-redis-内存淘汰机制了解么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-14-redis-内存淘汰机制了解么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.14. Redis 内存淘汰机制了解么？")],-1),Nn=(0,a._)("blockquote",null,[(0,a._)("p",null,"相关问题: MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据？")],-1),Yn=(0,a._)("p",null,"Redis 提供 6 种数据淘汰策略：",-1),jn=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"allkeys-lru(least recently used): 当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key(这个是最常用的)")]),(0,a._)("li",null,[(0,a._)("p",null,"volatile-lru(least recently used): 从已设置过期时间的数据集 (server.db[i].expires) 中挑选最近最少使用的数据淘汰")]),(0,a._)("li",null,[(0,a._)("p",null,"volatile-ttl: 从已设置过期时间的数据集 (server.db[i].expires) 中挑选将要过期的数据淘汰")]),(0,a._)("li",null,[(0,a._)("p",null,"volatile-random: 从已设置过期时间的数据集 (server.db[i].expires) 中任意选择数据淘汰")]),(0,a._)("li",null,[(0,a._)("p",null,"allkeys-random: 从数据集 (server.db[i].dict) 中任意选择数据淘汰")]),(0,a._)("li",null,[(0,a._)("p",null,"no-eviction: 禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！"),(0,a._)("p",null,"1 4.0 版本后增加以下两种：")]),(0,a._)("li",null,[(0,a._)("p",null,"volatile-lfu(least frequently used): 从已设置过期时间的数据集 (server.db[i].expires) 中挑选最不经常使用的数据淘汰")]),(0,a._)("li",null,[(0,a._)("p",null,"allkeys-lfu(least frequently used): 当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key")])],-1),Jn=(0,a._)("h2",{id:"_1-15-redis-持久化机制",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-redis-持久化机制","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15. Redis 持久化机制")],-1),$n=(0,a._)("blockquote",null,[(0,a._)("p",null,"怎么保证 Redis 挂掉之后再重启数据可以进行恢复")],-1),ns=(0,a._)("p",null,"持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据 (比如重启机器，机器故障之后恢复数据), 或者是为了防止系统故障而将数据备份到一个远程位置。",-1),ss=(0,a._)("p",null,"Redis 支持持久化，而且支持两种不同的持久化操作. Redis 的一种持久化方式叫快照 (snapshotting, RDB), 另一种方式是只追加文件 (append-only file, AOF).",-1),es=(0,a._)("h3",{id:"_1-15-1-快照-snapshotting-持久化-rdb",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-1-快照-snapshotting-持久化-rdb","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15.1. 快照 (snapshotting) 持久化 (RDB)")],-1),as=(0,a._)("p",null,"Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本.Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本 (Redis 主从结构，主要用来提高 Redis 性能), 还可以将快照留在原地以便重启服务器的时候使用。",-1),ls=(0,a._)("p",null,"快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：",-1),rs=(0,a._)("div",{class:"language-conf ext-conf line-numbers-mode"},[(0,a._)("pre",{class:"language-conf"},[(0,a._)("code",null,"\nsave 900 1           #在 900 秒 (15 分钟) 之后，如果至少有 1 个 key 发生变化，Redis 就会自动触发 BGSAVE 命令创建快照。\n\nsave 300 10          #在 300 秒 (5 分钟) 之后，如果至少有 10 个 key 发生变化，Redis 就会自动触发 BGSAVE 命令创建快照。\n\nsave 60 10000        #在 60 秒 (1 分钟) 之后，如果至少有 10000 个 key 发生变化，Redis 就会自动触发 BGSAVE 命令创建快照。\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),ts=(0,a._)("h3",{id:"_1-15-2-aof-append-only-file-持久化-主流方案",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-15-2-aof-append-only-file-持久化-主流方案","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.15.2. AOF(append-only file) 持久化 (主流方案)")],-1),_s=(0,a._)("p",null,[(0,a.Uk)("AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF(append only file) 方式的持久化，可以通过 appendonly 参数开启："),(0,a._)("code",null,"appendonly yes")],-1),is=(0,a._)("p",null,"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 server.aof_buf 中，然后再根据 appendfsync 配置来决定何时将其同步到硬盘中的 AOF 文件。",-1),cs=(0,a._)("p",null,"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof.",-1),ps=(0,a._)("p",null,"在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：",-1),os=(0,a._)("div",{class:"language-conf ext-conf line-numbers-mode"},[(0,a._)("pre",{class:"language-conf"},[(0,a._)("code",null,"appendfsync always    #每次有数据修改发生时都会写入 AOF 文件，这样会严重降低 Redis 的速度\nappendfsync everysec  #每秒钟同步一次，显示地将多个写命令同步到硬盘\nappendfsync no        #让操作系统决定何时进行同步\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br")])],-1),us=(0,a._)("p",null,"为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 , 让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。",-1),ks=(0,a._)("h2",{id:"_1-16-redis-事务",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-16-redis-事务","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.16. Redis 事务")],-1),ds=(0,a._)("p",null,"Redis 可以通过 MULTI, EXEC, DISCARD 和 WATCH 等命令来实现事务 (transaction) 功能。",-1),bs=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" MULTI\nOK\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" SET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)(" Guide 哥\nQUEUED\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" GET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)("\nQUEUED\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" EXEC\n"),(0,a._)("span",{class:"token number"},"1"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" OK\n"),(0,a._)("span",{class:"token number"},"2"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(" Guide 哥\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br")])],-1),ms=(0,a._)("p",null,"使用 MULTI 命令后可以输入多个命令. Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 EXEC 命令将执行所有命令。",-1),Us=(0,a._)("p",null,"这个过程是这样的：",-1),hs=(0,a._)("ol",null,[(0,a._)("li",null,"开始事务 (MULTI)."),(0,a._)("li",null,"命令入队 (批量操作 Redis 的命令，先进先出 (FIFO) 的顺序执行)."),(0,a._)("li",null,"执行事务 (EXEC).")],-1),gs=(0,a._)("p",null,"你也可以通过 [DISCARD](https: //redis.io/commands/discard) 命令取消一个事务，它会清空事务队列中保存的所有命令。",-1),vs=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" MULTI\nOK\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" SET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)(" Guide 哥\nQUEUED\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" GET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)("\nQUEUED\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" DISCARD\nOK\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br")])],-1),fs=(0,a._)("p",null,"[WATCH](https: //redis.io/commands/watch) 命令用于监听指定的键，当调用 EXEC 命令执行事务时，如果一个被 WATCH 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。",-1),ys=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" WATCH "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)("\nOK\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" MULTI\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" SET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)(" Guide 哥\nOK\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" GET "),(0,a._)("span",{class:"token environment constant"},"USER"),(0,a.Uk)("\nGuide 哥\n"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)(" EXEC\nERR EXEC without MULTI\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br")])],-1),Rs=(0,a._)("p",null,"但是，Redis 的事务和关系型数据库的事务不同，Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断",-1),xs=(0,a._)("p",null,"Redis 是不支持 roll back 的，因而不满足原子性的 (而且不满足持久性)",-1),Es=(0,a._)("h2",{id:"_1-17-缓存穿透",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-缓存穿透","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17. 缓存穿透")],-1),Ss=(0,a._)("h3",{id:"_1-17-1-什么是缓存穿透",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-1-什么是缓存穿透","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.1. 什么是缓存穿透？")],-1),Os=(0,a._)("p",null,"大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。",-1),Is=(0,a._)("blockquote",null,[(0,a._)("p",null,"举个例子：某个黑客故意制造缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。")],-1),Cs=(0,a._)("h3",{id:"_1-17-2-缓存穿透情况的处理流程是怎样的",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-2-缓存穿透情况的处理流程是怎样的","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.2. 缓存穿透情况的处理流程是怎样的？")],-1),Ds=(0,a._)("p",null,"用户的请求最终都要跑到数据库中查询一遍。",-1),As=(0,a._)("p",null,[(0,a._)("img",{src:i,alt:"picture 12"})],-1),Ks=(0,a._)("h3",{id:"_1-17-3-有哪些解决办法",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-3-有哪些解决办法","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.3. 有哪些解决办法？")],-1),Ls=(0,a._)("p",null,"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。",-1),Ts=(0,a._)("blockquote",null,[(0,a._)("p",null,"比如查询的数据库 id 不能小于 0，传入的邮箱格式不对的时候直接返回错误消息给客户端等等。")],-1),Gs=(0,a._)("h4",{id:"_1-17-3-1-缓存无效-key",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-3-1-缓存无效-key","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.3.1. 缓存无效 key")],-1),Ms=(0,a._)("p",null,"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间",-1),zs=(0,a._)("p",null,"可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key. 很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。",-1),ws=(0,a._)("h4",{id:"_1-17-3-2-布隆过滤器",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-17-3-2-布隆过滤器","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.17.3.2. 布隆过滤器")],-1),Bs=(0,a._)("p",null,[(0,a._)("img",{src:c,alt:"picture 13"})],-1),Fs=(0,a._)("p",null,"通过布隆过滤器可以非常方便地判断一个给定数据是否存在于海量数据中。布隆过滤器可能会存在误判的情况，布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。",-1),qs=(0,a._)("p",null,"把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会继续走流程。",-1),Ps=(0,a._)("h2",{id:"_1-18-缓存雪崩",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-缓存雪崩","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18. 缓存雪崩")],-1),Qs=(0,a._)("h3",{id:"_1-18-1-什么是缓存雪崩",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-1-什么是缓存雪崩","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18.1. 什么是缓存雪崩？")],-1),Zs=(0,a._)("p",null,"缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。",-1),Xs=(0,a._)("blockquote",null,[(0,a._)("p",null,"举个例子：系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。"),(0,a._)("p",null,"还有一种缓存雪崩的场景是：有一些被大量访问数据 (热点缓存) 在某一时刻大面积失效，导致对应的请求直接落到了数据库上。"),(0,a._)("p",null,"举个例子 : 秒杀开始 12 个小时之前，统一存放了一批商品到 Redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。")],-1),Hs=(0,a._)("h3",{id:"_1-18-2-有哪些解决办法",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-2-有哪些解决办法","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18.2. 有哪些解决办法？")],-1),Ws=(0,a._)("h4",{id:"_1-18-2-1-针对-redis-服务不可用的情况",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-2-1-针对-redis-服务不可用的情况","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18.2.1. 针对 Redis 服务不可用的情况")],-1),Vs=(0,a._)("ol",null,[(0,a._)("li",null,"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。"),(0,a._)("li",null,"限流，避免同时处理大量的请求。")],-1),Ns=(0,a._)("h4",{id:"_1-18-2-2-针对热点缓存失效的情况",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-18-2-2-针对热点缓存失效的情况","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.18.2.2. 针对热点缓存失效的情况")],-1),Ys=(0,a._)("ol",null,[(0,a._)("li",null,"设置不同的失效时间比如随机设置缓存的失效时间。"),(0,a._)("li",null,"缓存永不失效。")],-1),js=(0,a._)("h2",{id:"_1-19-如何保证缓存和数据库数据的一致性",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-19-如何保证缓存和数据库数据的一致性","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.19. 如何保证缓存和数据库数据的一致性？")],-1),Js=(0,a._)("p",null,"Cache Aside Pattern 是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。",-1),$s=(0,a._)("h3",{id:"_1-19-1-读",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-19-1-读","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.19.1. 读")],-1),ne=(0,a._)("ol",null,[(0,a._)("li",null,"从 cache 中读取数据，读取到就直接返回"),(0,a._)("li",null,"cache 中读取不到的话，就从 DB 中读取数据返回"),(0,a._)("li",null,"再把数据放到 cache 中。")],-1),se=(0,a._)("h3",{id:"_1-19-2-写",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-19-2-写","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.19.2. 写")],-1),ee=(0,a._)("ol",null,[(0,a._)("li",null,"先更新 DB"),(0,a._)("li",null,"然后直接删除 cache。")],-1),ae=(0,a._)("h4",{id:"_1-19-2-1-在写数据的过程中-可以先删除-cache-后更新-db-么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-19-2-1-在写数据的过程中-可以先删除-cache-后更新-db-么","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.19.2.1. 在写数据的过程中，可以先删除 cache ，后更新 DB 么")],-1),le=(0,a._)("p",null,"不行，因为这样可能会造成数据库（DB）和缓存（Cache）数据不一致的问题",-1),re=(0,a._)("p",null,"容易产生脏数据，有两个并发操作分别是更新和查询，第一步更新操作先将 redis 中的缓存进行删除，接着第二步查询操作并发进来首先寻找 redis 中有没有缓存，此时因为 redis 中的数据已经被删除了，第三步只能走 DB 进行查询，第四步将查询的数据保存到 redis 当中，此时第五步更新操作属于写操作比较慢才将数据在 DB 中更新成功。这个时候缓存中的数据就成了旧数据，如果后续不再更新的话，那么这个数据将一直在缓存中存在，除非设置过期时间",-1),te={},_e=(0,e(3744).Z)(te,[["render",function(n,s){return(0,a.wg)(),(0,a.iD)(a.HY,null,[p,o,u,k,d,b,m,U,h,g,v,f,y,R,x,E,S,O,I,C,D,A,K,L,T,G,M,z,w,B,F,q,P,Q,Z,X,H,W,V,N,Y,j,J,$,nn,sn,en,an,ln,rn,tn,_n,cn,pn,on,un,kn,dn,bn,mn,Un,hn,gn,vn,fn,yn,Rn,xn,En,Sn,On,In,Cn,Dn,An,Kn,Ln,Tn,Gn,Mn,zn,wn,Bn,Fn,qn,Pn,Qn,Zn,Xn,Hn,Wn,Vn,Nn,Yn,jn,Jn,$n,ns,ss,es,as,ls,rs,ts,_s,is,cs,ps,os,us,ks,ds,bs,ms,Us,hs,gs,vs,fs,ys,Rs,xs,Es,Ss,Os,Is,Cs,Ds,As,Ks,Ls,Ts,Gs,Ms,zs,ws,Bs,Fs,qs,Ps,Qs,Zs,Xs,Hs,Ws,Vs,Ns,Ys,js,Js,$s,ne,se,ee,ae,le,re],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},8401:(n,s,e)=>{n.exports=e.p+"assets/img/1639830237323.a1bdce7b.png"},8260:(n,s,e)=>{n.exports=e.p+"assets/img/1639832056184.6da80237.png"},1684:(n,s,e)=>{n.exports=e.p+"assets/img/1640437195543.8f826295.png"},7496:(n,s,e)=>{n.exports=e.p+"assets/img/1640437458273.a01e0929.png"},5226:(n,s,e)=>{n.exports=e.p+"assets/img/1640438348692.e9473ee1.png"},8904:(n,s,e)=>{n.exports=e.p+"assets/img/1640438603085.4a5015b6.png"}}]);