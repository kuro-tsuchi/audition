"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[958],{2781:(e,l,o)=>{o.r(l),o.d(l,{data:()=>r});const r={key:"v-c7093e5c",path:"/microservice/zookeeper.html",title:"1. zookeeper",lang:"en-EN",frontmatter:{sidebar:!1},excerpt:"",headers:[{level:2,title:"1.1. ZooKeeper 概览",slug:"_1-1-zookeeper-概览",children:[]},{level:2,title:"1.2. ZooKeeper 特点",slug:"_1-2-zookeeper-特点",children:[]},{level:2,title:"1.3. ZooKeeper 典型应用场景",slug:"_1-3-zookeeper-典型应用场景",children:[]},{level:2,title:"1.4. 有哪些著名的开源项目用到了 ZooKeeper?",slug:"_1-4-有哪些著名的开源项目用到了-zookeeper",children:[]},{level:2,title:"1.5. ZooKeeper 重要概念解读",slug:"_1-5-zookeeper-重要概念解读",children:[{level:3,title:"1.5.1. Data model(数据模型)",slug:"_1-5-1-data-model-数据模型",children:[]},{level:3,title:"1.5.2. znode(数据节点)",slug:"_1-5-2-znode-数据节点",children:[]}]},{level:2,title:"1.6. ZooKeeper 集群",slug:"_1-6-zookeeper-集群",children:[]},{level:2,title:"1.7. ZooKeeper 集群角色",slug:"_1-7-zookeeper-集群角色",children:[]},{level:2,title:"1.8. ZooKeeper 集群为啥最好奇数台？",slug:"_1-8-zookeeper-集群为啥最好奇数台",children:[]},{level:2,title:"1.9. ZooKeeper 选举的过半机制防止脑裂",slug:"_1-9-zookeeper-选举的过半机制防止脑裂",children:[{level:3,title:"1.9.1. 过半机制是如何防止脑裂现象产生的？",slug:"_1-9-1-过半机制是如何防止脑裂现象产生的",children:[]}]},{level:2,title:"1.13. 总结",slug:"_1-13-总结",children:[]}],filePathRelative:"microservice/zookeeper.md",git:{updatedTime:164078636e4,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:4}]}}},8683:(e,l,o)=>{o.r(l),o.d(l,{default:()=>ne});var r=o(6252),n=o(7330),a=o(2754),d=o(3365);const _=(0,r._)("h1",{id:"_1-zookeeper",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-zookeeper","aria-hidden":"true"},"#"),(0,r.Uk)(" 1. zookeeper")],-1),p=(0,r._)("h2",{id:"_1-1-zookeeper-概览",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-1-zookeeper-概览","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.1. ZooKeeper 概览")],-1),i=(0,r._)("p",null,"ZooKeeper 是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的系统，并以一系列简单易用的接口提供给用户使用。",-1),t=(0,r._)("p",null,"ZooKeeper 为提供了高可用，高性能，稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master 选举，分布式锁和分布式队列等功能。",-1),u=(0,r._)("p",null,"另外，ZooKeeper 将数据保存在内存中，在读多于写的应用程序中尤其地高性能，因为写会导致所有的服务器间同步状态。",-1),h=(0,r._)("h2",{id:"_1-2-zookeeper-特点",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-2-zookeeper-特点","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.2. ZooKeeper 特点")],-1),s=(0,r._)("ol",null,[(0,r._)("li",null,[(0,r._)("p",null,"顺序一致性"),(0,r._)("p",null,"从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到 ZooKeeper 中去。")]),(0,r._)("li",null,[(0,r._)("p",null,"原子性"),(0,r._)("p",null,"所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功应用了某一个事务，要么都没有应用。")]),(0,r._)("li",null,[(0,r._)("p",null,"单一系统映像"),(0,r._)("p",null,"无论客户端连到哪一个 ZooKeeper 服务器上，其看到的服务端数据模型都是一致的。")]),(0,r._)("li",null,[(0,r._)("p",null,"可靠性"),(0,r._)("p",null,"一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖。")])],-1),c=(0,r._)("h2",{id:"_1-3-zookeeper-典型应用场景",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-3-zookeeper-典型应用场景","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.3. ZooKeeper 典型应用场景")],-1),Z=(0,r._)("p",null,"ZooKeeper 概览中，介绍到使用其通常被用于实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master 选举，分布式锁和分布式队列等功能。",-1),K=(0,r._)("ol",null,[(0,r._)("li",null,"分布式锁 : 通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放锁。"),(0,r._)("li",null,"命名服务 :可以通过 ZooKeeper 的顺序节点生成全局唯一 ID"),(0,r._)("li",null,"数据发布/订阅 :通过 Watcher 机制 可以很方便地实现数据发布/订阅。当你将数据发布到 ZooKeeper 被监听的节点上，其他机器可通过监听 ZooKeeper 上节点的变化来实现配置的动态更新。")],-1),k=(0,r._)("p",null,"实际上，这些功能的实现基本都得益于 ZooKeeper 可以保存数据的功能，但是 ZooKeeper 不适合保存大量数据",-1),z=(0,r._)("h2",{id:"_1-4-有哪些著名的开源项目用到了-zookeeper",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-4-有哪些著名的开源项目用到了-zookeeper","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.4. 有哪些著名的开源项目用到了 ZooKeeper?")],-1),b=(0,r._)("ol",null,[(0,r._)("li",null,"Kafka : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。"),(0,r._)("li",null,"Hbase : ZooKeeper 为 Hbase 提供确保整个集群只有一个 Master 以及保存和提供 regionserver 状态信息 (是否在线) 等功能。"),(0,r._)("li",null,"Hadoop : ZooKeeper 为 Namenode 提供高可用支持。")],-1),v=(0,r._)("h2",{id:"_1-5-zookeeper-重要概念解读",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-5-zookeeper-重要概念解读","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.5. ZooKeeper 重要概念解读")],-1),f=(0,r._)("h3",{id:"_1-5-1-data-model-数据模型",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-5-1-data-model-数据模型","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.5.1. Data model(数据模型)")],-1),g=(0,r._)("p",null,[(0,r._)("img",{src:n,alt:"picture 1"})],-1),m=(0,r._)("p",null,"ZooKeeper 数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数据可以是数字，字符串或者是二进制序列。并且。每个节点还可以拥有 N 个子节点，最上层是根节点以 / 来代表。每个数据节点在 ZooKeeper 中被称为 znode，它是 ZooKeeper 中数据的最小单元。并且，每个 znode 都有一个唯一的路径标识。",-1),E=(0,r._)("p",null,"强调一句:ZooKeeper 主要是用来协调服务的，而不是用来存储业务数据的，所以不要放比较大的数据在 znode 上，ZooKeeper 给出的上限是每个结点的数据大小最大是 1M.",-1),x=(0,r._)("h3",{id:"_1-5-2-znode-数据节点",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-5-2-znode-数据节点","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.5.2. znode(数据节点)")],-1),L=(0,r._)("p",null,"每个数据节点在 ZooKeeper 中被称为 znode，它是 ZooKeeper 中数据的最小单元。",-1),U=(0,r._)("h4",{id:"_1-5-2-1-znode-4-种类型",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-5-2-1-znode-4-种类型","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.5.2.1. znode 4 种类型")],-1),S=(0,r._)("ol",null,[(0,r._)("li",null,[(0,r._)("p",null,"持久 (PERSISTENT) 节点"),(0,r._)("p",null,"一旦创建就一直存在，即使 ZooKeeper 集群宕机，直到将其删除。")]),(0,r._)("li",null,[(0,r._)("p",null,"临时 (EPHEMERAL) 节点"),(0,r._)("p",null,"临时节点的生命周期是与客户端会话 (session) 绑定的，会话消失则节点消失。并且，临时节点只能做叶子节点，不能创建子节点。")]),(0,r._)("li",null,[(0,r._)("p",null,"持久顺序 (PERSISTENT_SEQUENTIAL) 节点"),(0,r._)("p",null,"除了具有持久 (PERSISTENT) 节点的特性之外，子节点的名称还具有顺序性。比如 /node1/app0000000001 ,/node1/app0000000002 .")]),(0,r._)("li",null,[(0,r._)("p",null,"临时顺序 (EPHEMERAL_SEQUENTIAL) 节点"),(0,r._)("p",null,"除了具备临时 (EPHEMERAL) 节点的特性之外，子节点的名称还具有顺序性。")])],-1),M=(0,r._)("h4",{id:"_1-5-2-2-znode-数据结构",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-5-2-2-znode-数据结构","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.5.2.2. znode 数据结构")],-1),T=(0,r._)("p",null,"每个 znode 由 2 部分组成：",-1),N=(0,r._)("ul",null,[(0,r._)("li",null,"stat :状态信息"),(0,r._)("li",null,"data : 节点存放的数据的具体内容")],-1),w=(0,r._)("p",null,"可以通过 get 命令来获取根目录下的 dubbo 节点的内容。",-1),O=(0,r._)("p",null,[(0,r._)("code",null,"[zk: 127.0.0.1:2181(CONNECTED) 6] get /dubbo")],-1),P=(0,r._)("h2",{id:"_1-6-zookeeper-集群",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-6-zookeeper-集群","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.6. ZooKeeper 集群")],-1),A=(0,r._)("p",null,[(0,r._)("img",{src:a,alt:"picture 3"})],-1),H=(0,r._)("p",null,"为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的，那么 ZooKeeper 本身仍然是可用的。",-1),R=(0,r._)("p",null,"通常 3 台服务器就可以构成一个 ZooKeeper 集群了",-1),y=(0,r._)("p",null,"每一个 Server 代表一个安装 ZooKeeper 服务的服务器。组成 ZooKeeper 服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都互相保持着通信。集群间通过 ZAB 协议 (ZooKeeper Atomic Broadcast) 来保持数据的一致性。",-1),D=(0,r._)("p",null,"最典型集群模式是 Master/Slave 模式 (主备模式).在这种模式中，通常 Master 服务器作为主服务器提供写服务，其他的 Slave 服务器从服务器通过异步复制的方式获取 Master 服务器最新的数据提供读服务。",-1),I=(0,r._)("h2",{id:"_1-7-zookeeper-集群角色",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-7-zookeeper-集群角色","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.7. ZooKeeper 集群角色")],-1),B=(0,r._)("p",null,[(0,r._)("img",{src:d,alt:"picture 4"})],-1),C=(0,r._)("p",null,"ZooKeeper 中没有选择传统的 Master/Slave 概念，而是引入了 Leader,Follower 和 Observer 三种角色。",-1),F=(0,r._)("p",null,"ZooKeeper 集群中的所有机器通过一个 Leader 选举过程来选定一台称为 Leader 的机器，Leader 可以为客户端提供读写服务。除了 Leader 外，Follower 和 Observer 都只能提供读服务. Follower 和 Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程，也不参与写操作的过半写成功策略，因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能。",-1),q=(0,r._)("table",null,[(0,r._)("thead",null,[(0,r._)("tr",null,[(0,r._)("th",null,"角色"),(0,r._)("th",null,"说明")])]),(0,r._)("tbody",null,[(0,r._)("tr",null,[(0,r._)("td",null,"Leader"),(0,r._)("td",null,"为客户端提供读和写的服务，负责投票的发起和决议，更新系统状态。")]),(0,r._)("tr",null,[(0,r._)("td",null,"Follower"),(0,r._)("td",null,"为客户端提供读服务，如果是写服务则转发给 Leader.参与选举过程中的投票。")]),(0,r._)("tr",null,[(0,r._)("td",null,"Observer"),(0,r._)("td",null,"为客户端提供读服务，如果是写服务则转发给 Leader.不参与选举过程中的投票，也不参与 过半写成功 策略。在不影响写性能的情况下提升集群的读性能。此角色于 ZooKeeper3.3 系列新增的角色。")])])],-1),Q=(0,r._)("p",null,"当 Leader 服务器出现网络中断，崩溃退出与重启等异常情况时，就会进入 Leader 选举过程，这个过程会选举产生新的 Leader 服务器。",-1),W=(0,r._)("ol",null,[(0,r._)("li",null,"Leader election(选举阶段):节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader."),(0,r._)("li",null,"Discovery(发现阶段):在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。"),(0,r._)("li",null,"Synchronization(同步阶段):同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后 准 leader 才会成为真正的 leader."),(0,r._)("li",null,"Broadcast(广播阶段):到了这个阶段，ZooKeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。")],-1),Y=(0,r._)("h2",{id:"_1-8-zookeeper-集群为啥最好奇数台",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-8-zookeeper-集群为啥最好奇数台","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.8. ZooKeeper 集群为啥最好奇数台？")],-1),j=(0,r._)("p",null,"ZooKeeper 集群在宕掉几个 ZooKeeper 服务器之后，如果剩下的 ZooKeeper 服务器个数大于宕掉的个数的话整个 ZooKeeper 依然可用。假如的集群中有 n 台 ZooKeeper 服务器，那么也就是剩下的服务数必须大于 n/2. 先说一下结论，2n 和 2n-1 的容忍度是一样的，都是 n-1",-1),G=(0,r._)("blockquote",null,[(0,r._)("p",null,"比如假如有 3 台，那么最大允许宕掉 1 台 ZooKeeper 服务器，如果有 4 台的的时候也同样只允许宕掉 1 台。 假如有 5 台，那么最大允许宕掉 2 台 ZooKeeper 服务器，如果有 6 台的的时候也同样只允许宕掉 2 台。")],-1),J=(0,r._)("h2",{id:"_1-9-zookeeper-选举的过半机制防止脑裂",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-9-zookeeper-选举的过半机制防止脑裂","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.9. ZooKeeper 选举的过半机制防止脑裂")],-1),V=(0,r._)("p",null,"对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致脑裂的情况，这将会带来数据一致性等问题。",-1),X=(0,r._)("blockquote",null,[(0,r._)("p",null,"举例说明：比如现在有一个由 6 台服务器所组成的一个集群，部署在了 2 个机房，每个机房 3 台。正常情况下只有 1 个 leader，但是当两个机房中间网络断开的时候，每个机房的 3 台服务器都会认为另一个机房的 3 台服务器下线，而选出自己的 leader 并对外提供服务。若没有过半机制，当网络恢复的时候会发现有 2 个 leader.仿佛是 1 个大脑 (leader) 分散成了 2 个大脑，这就发生了脑裂现象。脑裂期间 2 个大脑都可能对外提供了服务，这将会带来数据一致性等问题。")],-1),$=(0,r._)("h3",{id:"_1-9-1-过半机制是如何防止脑裂现象产生的",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-9-1-过半机制是如何防止脑裂现象产生的","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.9.1. 过半机制是如何防止脑裂现象产生的？")],-1),ee=(0,r._)("p",null,"ZooKeeper 的过半机制导致不可能产生 2 个 leader，因为少于等于一半是不可能产生 leader 的，这就使得不论机房的机器如何分配都不可能发生脑裂。",-1),le=(0,r._)("h2",{id:"_1-13-总结",tabindex:"-1"},[(0,r._)("a",{class:"header-anchor",href:"#_1-13-总结","aria-hidden":"true"},"#"),(0,r.Uk)(" 1.13. 总结")],-1),oe=(0,r._)("ol",null,[(0,r._)("li",null,"ZooKeeper 本身就是一个分布式程序，只要半数以上节点存活，ZooKeeper 就能正常服务。"),(0,r._)("li",null,"为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的，那么 ZooKeeper 本身仍然是可用的。"),(0,r._)("li",null,"ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟 (但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因)."),(0,r._)("li",null,"ZooKeeper 是高性能的。在读多于写的应用程序中尤其地明显，因为写会导致所有的服务器间同步状态.(读多于写是协调服务的典型场景.)"),(0,r._)("li",null,"ZooKeeper 有临时节点的概念。当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。"),(0,r._)("li",null,"ZooKeeper 底层其实只提供了两个功能:1. 管理 (存储，读取) 用户程序提交的数据; 2. 为用户程序提供数据节点监听服务。")],-1),re={},ne=(0,o(3744).Z)(re,[["render",function(e,l){return(0,r.wg)(),(0,r.iD)(r.HY,null,[_,p,i,t,u,h,s,c,Z,K,k,z,b,v,f,g,m,E,x,L,U,S,M,T,N,w,O,P,A,H,R,y,D,I,B,C,F,q,Q,W,Y,j,G,J,V,X,$,ee,le,oe],64)}]])},3744:(e,l)=>{l.Z=(e,l)=>{const o=e.__vccOpts||e;for(const[e,r]of l)o[e]=r;return o}},7330:(e,l,o)=>{e.exports=o.p+"assets/img/1640317470733.ba98f403.png"},2754:(e,l,o)=>{e.exports=o.p+"assets/img/1640318161952.c0f3c777.png"},3365:(e,l,o)=>{e.exports=o.p+"assets/img/1640318336770.4daed200.png"}}]);