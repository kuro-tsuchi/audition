"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[463],{9710:(l,a,e)=>{e.r(a),e.d(a,{data:()=>n});const n={key:"v-e5db5942",path:"/java/basic.html",title:"1. Java 基础",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 面向对象和面向过程的区别",slug:"_1-1-面向对象和面向过程的区别",children:[]},{level:2,title:"1.2. Java 语言有哪些特点？",slug:"_1-2-java-语言有哪些特点",children:[]},{level:2,title:"1.3. JVM",slug:"_1-3-jvm",children:[{level:3,title:"1.3.1. 什么是字节码？采用字节码的好处是什么？",slug:"_1-3-1-什么是字节码-采用字节码的好处是什么",children:[]}]},{level:2,title:"1.4. JDK 和 JRE",slug:"_1-4-jdk-和-jre",children:[]},{level:2,title:"1.5. Java 和 C++ 的区别？",slug:"_1-5-java-和-c-的区别",children:[]},{level:2,title:"1.6. 字符型常量 (char) 和字符串常量 (string) 的区别？",slug:"_1-6-字符型常量-char-和字符串常量-string-的区别",children:[]},{level:2,title:"1.7. 构造器 Constructor 是否可被 override?",slug:"_1-7-构造器-constructor-是否可被-override",children:[]},{level:2,title:"1.8. 重载和重写的区别",slug:"_1-8-重载和重写的区别",children:[{level:3,title:"1.8.1. 重载",slug:"_1-8-1-重载",children:[]},{level:3,title:"1.8.2. 重写",slug:"_1-8-2-重写",children:[]}]},{level:2,title:"1.9. Java 面向对象编程三大特性：封装 继承 多态",slug:"_1-9-java-面向对象编程三大特性-封装-继承-多态",children:[{level:3,title:"1.9.1. 封装",slug:"_1-9-1-封装",children:[]},{level:3,title:"1.9.2. 继承",slug:"_1-9-2-继承",children:[]},{level:3,title:"1.9.3. 多态",slug:"_1-9-3-多态",children:[]}]},{level:2,title:"1.10. String StringBuffer 和 StringBuilder 的区别是什么？String 为什么是不可变的？",slug:"_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的",children:[{level:3,title:"1.10.1. 可变性",slug:"_1-10-1-可变性",children:[]},{level:3,title:"1.10.2. 线程安全性",slug:"_1-10-2-线程安全性",children:[]},{level:3,title:"1.10.3. 性能",slug:"_1-10-3-性能",children:[]},{level:3,title:"1.10.4. 对于三者使用的总结",slug:"_1-10-4-对于三者使用的总结",children:[]}]},{level:2,title:"1.11. 自动装箱与拆箱",slug:"_1-11-自动装箱与拆箱",children:[]},{level:2,title:"1.12. 在一个静态方法内调用一个非静态成员为什么是非法的？",slug:"_1-12-在一个静态方法内调用一个非静态成员为什么是非法的",children:[]},{level:2,title:"1.13. 在 Java 中定义一个不做事且没有参数的构造方法的作用",slug:"_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用",children:[]},{level:2,title:"1.14. 接口和抽象类的区别是什么？",slug:"_1-14-接口和抽象类的区别是什么",children:[]},{level:2,title:"1.15. 成员变量与局部变量的区别有哪些？",slug:"_1-15-成员变量与局部变量的区别有哪些",children:[]},{level:2,title:"1.16. 创建一个对象用什么运算符？对象实体与对象引用有何不同？",slug:"_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同",children:[]},{level:2,title:"1.17. 什么是方法的返回值？返回值在类的方法里的作用是什么？",slug:"_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么",children:[]},{level:2,title:"1.18. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？",slug:"_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么",children:[]},{level:2,title:"1.19. 构造方法有哪些特性？",slug:"_1-19-构造方法有哪些特性",children:[]},{level:2,title:"1.20. 静态方法和实例方法有何不同",slug:"_1-20-静态方法和实例方法有何不同",children:[]},{level:2,title:"1.21. 对象的相等与指向他们的引用相等，两者有什么不同？",slug:"_1-21-对象的相等与指向他们的引用相等-两者有什么不同",children:[]},{level:2,title:"1.22. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？",slug:"_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是",children:[]},{level:2,title:"1.23. == 与 equals",slug:"_1-23-与-equals",children:[]},{level:2,title:"1.24. hashCode 与 equals (重要)",slug:"_1-24-hashcode-与-equals-重要",children:[{level:3,title:"1.24.1. hashCode() 介绍",slug:"_1-24-1-hashcode-介绍",children:[]},{level:3,title:"1.24.2. 为什么要有 hashCode?",slug:"_1-24-2-为什么要有-hashcode",children:[]},{level:3,title:"1.24.3. 为什么重写 equals 时必须重写 hashCode 方法？",slug:"_1-24-3-为什么重写-equals-时必须重写-hashcode-方法",children:[]},{level:3,title:"1.24.4. 为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？",slug:"_1-24-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的",children:[]}]},{level:2,title:"1.25. 为什么 Java 中只有值传递？",slug:"_1-25-为什么-java-中只有值传递",children:[]},{level:2,title:"1.26. 关于 final 关键字的一些总结",slug:"_1-26-关于-final-关键字的一些总结",children:[]},{level:2,title:"1.27. java 访问修饰符",slug:"_1-27-java-访问修饰符",children:[]},{level:2,title:"1.28. Java 中的异常处理",slug:"_1-28-java-中的异常处理",children:[{level:3,title:"1.28.1. Java 异常类层次结构图",slug:"_1-28-1-java-异常类层次结构图",children:[]},{level:3,title:"1.28.2. Throwable 类常用方法",slug:"_1-28-2-throwable-类常用方法",children:[]},{level:3,title:"1.28.3. 异常处理总结",slug:"_1-28-3-异常处理总结",children:[]}]},{level:2,title:"1.29. Java 序列化中如果有些字段不想进行序列化，怎么办？",slug:"_1-29-java-序列化中如果有些字段不想进行序列化-怎么办",children:[]},{level:2,title:"1.30. 获取用键盘输入常用的两种方法",slug:"_1-30-获取用键盘输入常用的两种方法",children:[{level:3,title:"1.30.1. 方法 1:通过 Scanner",slug:"_1-30-1-方法-1-通过-scanner",children:[]},{level:3,title:"1.30.2. 方法 2:通过 BufferedReader",slug:"_1-30-2-方法-2-通过-bufferedreader",children:[]}]},{level:2,title:"1.31. Java 中 IO 流",slug:"_1-31-java-中-io-流",children:[{level:3,title:"1.31.1. Java 中 IO 流分为几种？",slug:"_1-31-1-java-中-io-流分为几种",children:[]},{level:3,title:"1.31.2. 既然有了字节流，为什么还要有字符流？",slug:"_1-31-2-既然有了字节流-为什么还要有字符流",children:[]},{level:3,title:"1.31.3. BIO,NIO,AIO 有什么区别？",slug:"_1-31-3-bio-nio-aio-有什么区别",children:[]}]},{level:2,title:"1.32. 深拷贝 vs 浅拷贝",slug:"_1-32-深拷贝-vs-浅拷贝",children:[]}],filePathRelative:"java/basic.md",git:{updatedTime:1640951538e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:7},{name:"kuro-tsuchi",email:"kurotsuchi33@gmail.com",commits:3}]}}},1216:(l,a,e)=>{e.r(a),e.d(a,{default:()=>La});var n=e(6252),t=e(631),i=e(9786),r=e(3717),_=e(2838),s=e(910);const u=(0,n._)("h1",{id:"_1-java-基础",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-java-基础","aria-hidden":"true"},"#"),(0,n.Uk)(" 1. Java 基础")],-1),d=(0,n._)("h2",{id:"_1-1-面向对象和面向过程的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-1-面向对象和面向过程的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.1. 面向对象和面向过程的区别")],-1),h=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,"面向过程"),(0,n._)("p",null,"面向过程性能比面向对象高。类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机，嵌入式开发，Linux/Unix 等一般采用面向过程开发。")]),(0,n._)("li",null,[(0,n._)("p",null,"面向对象"),(0,n._)("p",null,"面向对象易维护，易复用，易扩展。因为面向对象有封装，继承，多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活，更加易于维护。")])],-1),c=(0,n._)("h2",{id:"_1-2-java-语言有哪些特点",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-2-java-语言有哪些特点","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.2. Java 语言有哪些特点？")],-1),o=(0,n._)("ol",null,[(0,n._)("li",null,"简单易学;"),(0,n._)("li",null,"面向对象 (封装，继承，多态);"),(0,n._)("li",null,"平台无关性 ( Java 虚拟机实现平台无关性);"),(0,n._)("li",null,"可靠性;"),(0,n._)("li",null,"安全性;"),(0,n._)("li",null,"支持多线程"),(0,n._)("li",null,"支持网络编程并且很方便"),(0,n._)("li",null,"编译与解释并存;")],-1),p=(0,n._)("h2",{id:"_1-3-jvm",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-3-jvm","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.3. JVM")],-1),v=(0,n._)("p",null,"Java 虚拟机 (JVM) 是运行 Java 字节码的虚拟机 .JVM 有针对不同操作系统的特定实现 (Windows,Linux,macOS),目的是使用相同的字节码，它们都会给出相同的结果。",-1),g=(0,n._)("h3",{id:"_1-3-1-什么是字节码-采用字节码的好处是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-3-1-什么是字节码-采用字节码的好处是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.3.1. 什么是字节码？采用字节码的好处是什么？")],-1),f=(0,n._)("p",null,"在 Java 中，JVM 可以理解的代码就叫做字节码 (即扩展名为 .class 的文件),它不面向任何特定的处理器，只面向虚拟机。 Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。",-1),k=(0,n._)("h2",{id:"_1-4-jdk-和-jre",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-4-jdk-和-jre","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.4. JDK 和 JRE")],-1),b=(0,n._)("p",null,"JDK 是 Java Development Kit，它是功能齐全的 Java SDK.它拥有 JRE 所拥有的一切，还有编译器 (javac) 和工具 (如 javadoc 和 jdb).它能够创建和编译程序。",-1),x=(0,n._)("p",null,"JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机 (JVM),Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。",-1),U=(0,n._)("h2",{id:"_1-5-java-和-c-的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-5-java-和-c-的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.5. Java 和 C++ 的区别？")],-1),J=(0,n._)("ol",null,[(0,n._)("li",null,"都是面向对象的语言，都支持封装，继承和多态"),(0,n._)("li",null,"Java 不提供指针来直接访问内存，程序内存更加安全"),(0,n._)("li",null,"Java 的类是单继承的，C++ 支持多重继承;虽然 Java 的类不可以多继承，但是接口可以多实现。"),(0,n._)("li",null,"Java 有自动内存管理机制，不需要程序员手动释放无用内存")],-1),m=(0,n._)("h2",{id:"_1-6-字符型常量-char-和字符串常量-string-的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-6-字符型常量-char-和字符串常量-string-的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.6. 字符型常量 (char) 和字符串常量 (string) 的区别？")],-1),j=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,"形式上："),(0,n._)("p",null,"字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符")]),(0,n._)("li",null,[(0,n._)("p",null,"含义上："),(0,n._)("p",null,"字符常量相当于一个整型值 ( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值 (该字符串在内存中存放位置)")]),(0,n._)("li",null,[(0,n._)("p",null,"占内存大小"),(0,n._)("p",null,"字符常量只占 2 个字节; 字符串常量占若干个字节")])],-1),S=(0,n._)("h2",{id:"_1-7-构造器-constructor-是否可被-override",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-7-构造器-constructor-是否可被-override","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.7. 构造器 Constructor 是否可被 override?")],-1),y=(0,n._)("p",null,"Constructor 不能被 override(重写),但是可以 overload(重载),所以你可以看到一个类中有多个构造函数的情况。",-1),O=(0,n._)("h2",{id:"_1-8-重载和重写的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-重载和重写的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8. 重载和重写的区别")],-1),I=(0,n._)("h3",{id:"_1-8-1-重载",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-1-重载","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8.1. 重载")],-1),C=(0,n._)("p",null,"发生在同一个类中，方法名必须相同，参数类型不同，个数不同，顺序不同，方法返回值和访问修饰符可以不同。",-1),B=(0,n._)("h3",{id:"_1-8-2-重写",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-2-重写","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8.2. 重写")],-1),N=(0,n._)("p",null,"重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。",-1),q=(0,n._)("ol",null,[(0,n._)("li",null,"返回值类型，方法名，参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。"),(0,n._)("li",null,"如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。"),(0,n._)("li",null,"构造方法无法被重写")],-1),w=(0,n._)("p",null,"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变",-1),E=(0,n._)("table",null,[(0,n._)("thead",null,[(0,n._)("tr",null,[(0,n._)("th",{style:{"text-align":"left"}},"区别点"),(0,n._)("th",{style:{"text-align":"left"}},"重载方法"),(0,n._)("th",{style:{"text-align":"left"}},"重写方法")])]),(0,n._)("tbody",null,[(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"发生范围"),(0,n._)("td",{style:{"text-align":"left"}},"同一个类"),(0,n._)("td",{style:{"text-align":"left"}},"子类")]),(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"参数列表"),(0,n._)("td",{style:{"text-align":"left"}},"必须修改"),(0,n._)("td",{style:{"text-align":"left"}},"一定不能修改")]),(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"返回类型"),(0,n._)("td",{style:{"text-align":"left"}},"可修改"),(0,n._)("td",{style:{"text-align":"left"}},"子类方法返回值类型应比父类方法返回值类型更小或相等")]),(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"异常"),(0,n._)("td",{style:{"text-align":"left"}},"可修改"),(0,n._)("td",{style:{"text-align":"left"}},"子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等;")]),(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"访问修饰符"),(0,n._)("td",{style:{"text-align":"left"}},"可修改"),(0,n._)("td",{style:{"text-align":"left"}},"一定不能做更严格的限制 (可以降低限制)")]),(0,n._)("tr",null,[(0,n._)("td",{style:{"text-align":"left"}},"发生阶段"),(0,n._)("td",{style:{"text-align":"left"}},"编译期"),(0,n._)("td",{style:{"text-align":"left"}},"运行期")])])],-1),R=(0,n._)("h4",{id:"_1-8-2-1-方法的重写要遵循两同两小一大",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-2-1-方法的重写要遵循两同两小一大","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8.2.1. 方法的重写要遵循两同两小一大")],-1),A=(0,n._)("ul",null,[(0,n._)("li",null,"两同即方法名相同，形参列表相同;"),(0,n._)("li",null,"两小指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等;"),(0,n._)("li",null,"一大指的是子类方法的访问权限应比父类方法的访问权限更大或相等。")],-1),M=(0,n._)("p",null,"关于重写的返回值类型：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。",-1),Y=(0,n._)("h2",{id:"_1-9-java-面向对象编程三大特性-封装-继承-多态",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-java-面向对象编程三大特性-封装-继承-多态","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9. Java 面向对象编程三大特性：封装 继承 多态")],-1),D=(0,n._)("h3",{id:"_1-9-1-封装",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-1-封装","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.1. 封装")],-1),H=(0,n._)("p",null,"封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。",-1),T=(0,n._)("h3",{id:"_1-9-2-继承",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-2-继承","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.2. 继承")],-1),V=(0,n._)("p",null,"继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。",-1),K=(0,n._)("ol",null,[(0,n._)("li",null,"子类拥有父类对象所有的属性和方法 (包括私有属性和私有方法),但是父类中的私有属性和方法子类是无法访问，只是拥有。"),(0,n._)("li",null,"子类可以拥有自己属性和方法，即子类可以对父类进行扩展。"),(0,n._)("li",null,"子类可以用自己的方式实现父类的方法。")],-1),L=(0,n._)("h3",{id:"_1-9-3-多态",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-3-多态","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.3. 多态")],-1),F=(0,n._)("p",null,"多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。",-1),P=(0,n._)("p",null,"在 Java 中有两种形式可以实现多态：继承 (多个子类对同一方法的重写) 和接口 (实现接口并覆盖接口中同一方法).",-1),W=(0,n._)("h2",{id:"_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10. String StringBuffer 和 StringBuilder 的区别是什么？String 为什么是不可变的？")],-1),Z=(0,n._)("h3",{id:"_1-10-1-可变性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-1-可变性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.1. 可变性")],-1),z=(0,n._)("p",null,"String 类中使用 final 关键字修饰字符数组来保存字符串，private final char value[],所以 String 对象是不可变的。",-1),Q=(0,n._)("p",null,"StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串 char[]value，但是没有用 final 关键字修饰，所以这两种对象都是可变的。",-1),G=(0,n._)("h3",{id:"_1-10-2-线程安全性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-2-线程安全性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.2. 线程安全性")],-1),X=(0,n._)("p",null,"String 中的对象是不可变的，也就可以理解为常量，线程安全.AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity,append,insert,indexOf 等公共方法.StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的.StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。",-1),$=(0,n._)("h3",{id:"_1-10-3-性能",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-3-性能","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.3. 性能")],-1),ll=(0,n._)("p",null,"每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象.StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。",-1),al=(0,n._)("h3",{id:"_1-10-4-对于三者使用的总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-4-对于三者使用的总结","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.4. 对于三者使用的总结")],-1),el=(0,n._)("ol",null,[(0,n._)("li",null,"操作少量的数据：适用 String"),(0,n._)("li",null,"单线程操作字符串缓冲区下操作大量数据：适用 StringBuilder"),(0,n._)("li",null,"多线程操作字符串缓冲区下操作大量数据：适用 StringBuffer")],-1),nl=(0,n._)("h2",{id:"_1-11-自动装箱与拆箱",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-11-自动装箱与拆箱","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.11. 自动装箱与拆箱")],-1),tl=(0,n._)("p",null,[(0,n._)("img",{src:t,alt:"picture 5"})],-1),il=(0,n._)("ol",null,[(0,n._)("li",null,"装箱：将基本类型用它们对应的引用类型包装起来;"),(0,n._)("li",null,"拆箱：将包装类型转换为基本数据类型;")],-1),rl=(0,n._)("h2",{id:"_1-12-在一个静态方法内调用一个非静态成员为什么是非法的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-12-在一个静态方法内调用一个非静态成员为什么是非法的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.12. 在一个静态方法内调用一个非静态成员为什么是非法的？")],-1),_l=(0,n._)("p",null,"由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。",-1),sl=(0,n._)("p",null,"类的静态成员 (变量或方法) 属于类本身，在类加载的时候就会分配内存，可以通过类名直接访问",-1),ul=(0,n._)("p",null,"非静态成员 (变量或方法) 属于类的对象，只有在类的对象产生 (实例化) 时才会分配内存，然后通过类的对象 (实例) 去访问",-1),dl=(0,n._)("p",null,"所以，如果一个类的静态方法去调用非静态方法或变量的时候，因为类的静态方法存在的时候，类的非静态成员可能不存在，访问一个内存中不存在的东西当然会出错",-1),hl=(0,n._)("h2",{id:"_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.13. 在 Java 中定义一个不做事且没有参数的构造方法的作用")],-1),cl=(0,n._)("p",null,"Java 程序在执行子类的构造方法之前，如果没有用 super() 来调用父类特定的构造方法，则会调用父类中没有参数的构造方法。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。",-1),ol=(0,n._)("h2",{id:"_1-14-接口和抽象类的区别是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-14-接口和抽象类的区别是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.14. 接口和抽象类的区别是什么？")],-1),pl=(0,n._)("ol",null,[(0,n._)("li",null,"接口的方法默认是 public，所有方法在接口中不能有实现 (Java 8 开始接口方法可以有默认实现),而抽象类可以有非抽象的方法。"),(0,n._)("li",null,"接口中除了 static,final 变量，不能有其他变量，而抽象类中则不一定。"),(0,n._)("li",null,"一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。"),(0,n._)("li",null,"接口方法默认修饰符是 public，抽象方法可以有 public,protected 和 default 这些修饰符 (抽象方法就是为了被重写所以不能使用 private 关键字修饰！)."),(0,n._)("li",null,"从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。")],-1),vl=(0,n._)("h2",{id:"_1-15-成员变量与局部变量的区别有哪些",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-成员变量与局部变量的区别有哪些","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15. 成员变量与局部变量的区别有哪些？")],-1),gl=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,"从语法形式上看："),(0,n._)("p",null,"成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数;成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰;但是，成员变量和局部变量都能被 final 所修饰。")]),(0,n._)("li",null,[(0,n._)("p",null,"从变量在内存中的存储方式来看："),(0,n._)("p",null,"如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引用数据类型，那存放的是指向堆内存对象的引用或者是指向常量池中的地址。")]),(0,n._)("li",null,[(0,n._)("p",null,"从变量在内存中的生存时间上看："),(0,n._)("p",null,"成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。")]),(0,n._)("li",null,[(0,n._)("p",null,"成员变量如果没有被赋初值："),(0,n._)("p",null,"自动以类型的默认值而赋值，而局部变量则不会自动赋值。例外：被 final 修饰的成员变量也必须显式地赋值")])],-1),fl=(0,n._)("h2",{id:"_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.16. 创建一个对象用什么运算符？对象实体与对象引用有何不同？")],-1),kl=(0,n._)("p",null,"new 运算符创建对象实例，对象实例在堆内存中，对象引用存放在栈内存中，对象引用指向对象实例。一个对象引用可以指向 0 个或 1 个对象; 一个对象可以有 n 个引用指向它",-1),bl=(0,n._)("h2",{id:"_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.17. 什么是方法的返回值？返回值在类的方法里的作用是什么？")],-1),xl=(0,n._)("p",null,"方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！(前提是该方法可能产生结果).返回值的作用：接收出结果，使得它可以用于其他的操作！",-1),Ul=(0,n._)("h2",{id:"_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.18. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？")],-1),Jl=(0,n._)("p",null,"主要作用是完成对类对象的初始化工作，可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。",-1),ml=(0,n._)("h2",{id:"_1-19-构造方法有哪些特性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-19-构造方法有哪些特性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.19. 构造方法有哪些特性？")],-1),jl=(0,n._)("ol",null,[(0,n._)("li",null,"名字与类名相同。"),(0,n._)("li",null,"没有返回值，但不能用 void 声明构造函数。"),(0,n._)("li",null,"生成类的对象时自动执行，无需调用。")],-1),Sl=(0,n._)("h2",{id:"_1-20-静态方法和实例方法有何不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-20-静态方法和实例方法有何不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.20. 静态方法和实例方法有何不同")],-1),yl=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,'在外部调用静态方法时，可以使用"类名。方法名"的方式，也可以使用"对象名。方法名"的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。')]),(0,n._)("li",null,[(0,n._)("p",null,"静态方法在访问本类的成员时，只允许访问静态成员 (即静态成员变量和静态方法),而不允许访问实例成员变量和实例方法;实例方法则无此限制。")])],-1),Ol=(0,n._)("h2",{id:"_1-21-对象的相等与指向他们的引用相等-两者有什么不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-21-对象的相等与指向他们的引用相等-两者有什么不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.21. 对象的相等与指向他们的引用相等，两者有什么不同？")],-1),Il=(0,n._)("ol",null,[(0,n._)("li",null,"对象的相等，比较的是内存中存放的内容是否相等。"),(0,n._)("li",null,"引用相等，比较的是他们指向的内存地址是否相等。")],-1),Cl=(0,n._)("h2",{id:"_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.22. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？")],-1),Bl=(0,n._)("p",null,"帮助子类做初始化工作。",-1),Nl=(0,n._)("h2",{id:"_1-23-与-equals",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-与-equals","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23. == 与 equals")],-1),ql=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象 基本数据类型"),(0,n._)("code",null,"=="),(0,n.Uk)("比较的是值，引用数据类型==比较的是内存地址。")])]),(0,n._)("li",null,[(0,n._)("p",null,"equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：")])],-1),wl=(0,n._)("ul",null,[(0,n._)("li",null,"情况 1:类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过==比较这两个对象。"),(0,n._)("li",null,"情况 2:类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等;若它们的内容相等，则返回 true (即，认为这两个对象相等)."),(0,n._)("li",null,"String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。"),(0,n._)("li",null,"当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。")],-1),El=(0,n._)("h2",{id:"_1-24-hashcode-与-equals-重要",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-hashcode-与-equals-重要","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24. hashCode 与 equals (重要)")],-1),Rl=(0,n._)("h3",{id:"_1-24-1-hashcode-介绍",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-1-hashcode-介绍","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24.1. hashCode() 介绍")],-1),Al=(0,n._)("p",null,"hashCode() 的作用是获取哈希码，也称为散列码;它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置.hashCode() 定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。另外需要注意的是: Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。",-1),Ml=(0,n._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,n._)("pre",{class:"language-java"},[(0,n._)("code",null,[(0,n._)("span",{class:"token keyword"},"public"),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"native"),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"int"),(0,n.Uk)(),(0,n._)("span",{class:"token function"},"hashCode"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br")])],-1),Yl=(0,n._)("p",null,"散列表存储的是键值对 (key-value), 它的特点是：能根据键快速的检索出对应的值。",-1),Dl=(0,n._)("h3",{id:"_1-24-2-为什么要有-hashcode",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-2-为什么要有-hashcode","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24.2. 为什么要有 hashCode?")],-1),Hl=(0,n._)("p",null,"我们以 HashSet 如何检查重复为例子来说明为什么要有 hashCode?",-1),Tl=(0,n._)("p",null,"当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode,HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样就大大减少了 equals 的次数，相应就大大提高了执行速度。",-1),Vl=(0,n._)("h3",{id:"_1-24-3-为什么重写-equals-时必须重写-hashcode-方法",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-3-为什么重写-equals-时必须重写-hashcode-方法","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24.3. 为什么重写 equals 时必须重写 hashCode 方法？")],-1),Kl=(0,n._)("p",null,"如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等，对两个对象分别调用 equals 方法都返回 true.但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 .因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖。",-1),Ll=(0,n._)("h3",{id:"_1-24-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24.4. 为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？")],-1),Fl=(0,n._)("p",null,"因为 hashCode() 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关，所谓碰撞也就是指的是不同的对象得到相同的 hashCode. 比如 HashSet，如果 HashSet 在对比的时候，同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。也就是说 hashcode 只是用来缩小查找成本。",-1),Pl=(0,n._)("h2",{id:"_1-25-为什么-java-中只有值传递",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-25-为什么-java-中只有值传递","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.25. 为什么 Java 中只有值传递？")],-1),Wl=(0,n._)("p",null,"按值调用 (call by value) 表示方法接收的是调用者提供的值，而按引用调用 (call by reference) 表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。它用来描述各种程序设计语言 (不只是 Java) 中方法参数传递方式。",-1),Zl=(0,n._)("p",null,"Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。",-1),zl=(0,n._)("h2",{id:"_1-26-关于-final-关键字的一些总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-26-关于-final-关键字的一些总结","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.26. 关于 final 关键字的一些总结")],-1),Ql=(0,n._)("p",null,"final 关键字主要用在三个地方：变量，方法，类。",-1),Gl=(0,n._)("ol",null,[(0,n._)("li",null,"对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改;如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。"),(0,n._)("li",null,"当用 final 修饰一个类时，表明这个类不能被继承.final 类中的所有成员方法都会被隐式地指定为 final 方法。"),(0,n._)("li",null,"使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义;第二个原因是效率，final 方法比非 final 方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。类的 private 方法会隐式地被指定为 final 方法")],-1),Xl=(0,n._)("h2",{id:"_1-27-java-访问修饰符",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-java-访问修饰符","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27. java 访问修饰符")],-1),$l=(0,n._)("ol",null,[(0,n._)("li",null,"public: 可以被所有其他类所访问。"),(0,n._)("li",null,"protected: 自身，子类及同一个包中类可以访问。"),(0,n._)("li",null,"default( 默认) : 同一包中的类可以访问，声明时没有加修饰符，认为是 friendly."),(0,n._)("li",null,"private: 只能被自身类访问和修改。")],-1),la=(0,n._)("table",null,[(0,n._)("thead",null,[(0,n._)("tr",null,[(0,n._)("th",null,"修饰符"),(0,n._)("th",null,"类"),(0,n._)("th",null,"包"),(0,n._)("th",null,"子类"),(0,n._)("th",null,"其他包")])]),(0,n._)("tbody",null,[(0,n._)("tr",null,[(0,n._)("td",null,"public"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y")]),(0,n._)("tr",null,[(0,n._)("td",null,"protected"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N")]),(0,n._)("tr",null,[(0,n._)("td",null,"default"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N")]),(0,n._)("tr",null,[(0,n._)("td",null,"private"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N")])])],-1),aa=(0,n._)("p",null,"Java 中，可以使用访问控制符来保护对类，变量，方法和构造方法的访问",-1),ea=(0,n._)("h2",{id:"_1-28-java-中的异常处理",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-java-中的异常处理","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28. Java 中的异常处理")],-1),na=(0,n._)("p",null,[(0,n._)("img",{src:i,alt:"picture 1"}),(0,n._)("br"),(0,n._)("img",{src:r,alt:"picture 2"})],-1),ta=(0,n._)("h3",{id:"_1-28-1-java-异常类层次结构图",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-1-java-异常类层次结构图","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.1. Java 异常类层次结构图")],-1),ia=(0,n._)("p",null,"在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类.Throwable 类有两个重要的子类 Exception(异常) 和 Error(错误).Exception 能被程序本身处理 (try-catch), Error 是无法处理的 (只能尽量避免).",-1),ra=(0,n._)("p",null,"Exception 和 Error 二者都是 Java 异常处理的重要子类，各自都包含大量子类。",-1),_a=(0,n._)("ul",null,[(0,n._)("li",null,"Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获.Exception 又可以分为 受检查异常 (必须处理) 和 不受检查异常 (可以不处理)."),(0,n._)("li",null,"Error :Error 属于程序无法处理的错误 ,我们没办法通过 catch 来进行捕获 .例如，Java 虚拟机运行错误 (Virtual MachineError),虚拟机内存不够错误 (OutOfMemoryError),类定义错误 (NoClassDefFoundError) 等 .这些异常发生时，Java 虚拟机 (JVM) 一般会选择线程终止。")],-1),sa=(0,n._)("h4",{id:"_1-28-1-1-受检查异常",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-1-1-受检查异常","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.1.1. 受检查异常")],-1),ua=(0,n._)("p",null,"Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 .比如下面这段 IO 操作的代码。",-1),da=(0,n._)("p",null,"除了 RuntimeException 及其子类以外，其他的 Exception 类及其子类都属于检查异常 .常见的受检查异常有: IO 相关的异常，ClassNotFoundException ,SQLException....",-1),ha=(0,n._)("h4",{id:"_1-28-1-2-不受检查异常",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-1-2-不受检查异常","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.1.2. 不受检查异常")],-1),ca=(0,n._)("p",null,"Java 代码在编译过程中 ,我们即使不处理不受检查异常也可以正常通过编译。",-1),oa=(0,n._)("p",null,"RuntimeException 及其子类都统称为非受检查异常，例如:NullPoin​terException,NumberFormatException(字符串转换为数字),ArrayIndexOutOfBoundsException(数组越界),ClassCastException(类型转换错误),ArithmeticException(算术错误) 等。",-1),pa=(0,n._)("h3",{id:"_1-28-2-throwable-类常用方法",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-2-throwable-类常用方法","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.2. Throwable 类常用方法")],-1),va=(0,n._)("ul",null,[(0,n._)("li",null,"public string getMessage():返回异常发生时的简要描述"),(0,n._)("li",null,"public string toString():返回异常发生时的详细信息"),(0,n._)("li",null,"public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage() 返回的结果相同"),(0,n._)("li",null,"public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息")],-1),ga=(0,n._)("h3",{id:"_1-28-3-异常处理总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-3-异常处理总结","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.3. 异常处理总结")],-1),fa=(0,n._)("ul",null,[(0,n._)("li",null,"try 块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。"),(0,n._)("li",null,"catch 块：用于处理 try 捕获到的异常。"),(0,n._)("li",null,"finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。")],-1),ka=(0,n._)("h4",{id:"_1-28-3-1-在以下-3-种特殊情况下-finally-块不会被执行",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-3-1-在以下-3-种特殊情况下-finally-块不会被执行","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28.3.1. 在以下 3 种特殊情况下，finally 块不会被执行")],-1),ba=(0,n._)("ol",null,[(0,n._)("li",null,"在 try 或 finally 块中用了 System.exit(int) 退出程序。但是，如果 System.exit(int) 在异常语句之后，finally 还是会被执行"),(0,n._)("li",null,"程序所在的线程死亡。"),(0,n._)("li",null,"关闭 CPU.")],-1),xa=(0,n._)("h2",{id:"_1-29-java-序列化中如果有些字段不想进行序列化-怎么办",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-29-java-序列化中如果有些字段不想进行序列化-怎么办","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.29. Java 序列化中如果有些字段不想进行序列化，怎么办？")],-1),Ua=(0,n._)("p",null,"对于不想进行序列化的变量，使用 transient 关键字修饰。",-1),Ja=(0,n._)("p",null,"transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化;当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复.transient 只能修饰变量，不能修饰类和方法。",-1),ma=(0,n._)("h2",{id:"_1-30-获取用键盘输入常用的两种方法",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-30-获取用键盘输入常用的两种方法","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.30. 获取用键盘输入常用的两种方法")],-1),ja=(0,n._)("h3",{id:"_1-30-1-方法-1-通过-scanner",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-30-1-方法-1-通过-scanner","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.30.1. 方法 1:通过 Scanner")],-1),Sa=(0,n._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,n._)("pre",{class:"language-java"},[(0,n._)("code",null,[(0,n._)("span",{class:"token class-name"},"Scanner"),(0,n.Uk)(" input "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"new"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"Scanner"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token class-name"},"System"),(0,n._)("span",{class:"token punctuation"},"."),(0,n.Uk)("in"),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n"),(0,n._)("span",{class:"token class-name"},"String"),(0,n.Uk)(" s "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(" input"),(0,n._)("span",{class:"token punctuation"},"."),(0,n._)("span",{class:"token function"},"nextLine"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\ninput"),(0,n._)("span",{class:"token punctuation"},"."),(0,n._)("span",{class:"token function"},"close"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"3"),(0,n._)("br")])],-1),ya=(0,n._)("h3",{id:"_1-30-2-方法-2-通过-bufferedreader",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-30-2-方法-2-通过-bufferedreader","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.30.2. 方法 2:通过 BufferedReader")],-1),Oa=(0,n._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,n._)("pre",{class:"language-java"},[(0,n._)("code",null,[(0,n._)("span",{class:"token class-name"},"BufferedReader"),(0,n.Uk)(" input "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"new"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"BufferedReader"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token keyword"},"new"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"InputStreamReader"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token class-name"},"System"),(0,n._)("span",{class:"token punctuation"},"."),(0,n.Uk)("in"),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n"),(0,n._)("span",{class:"token class-name"},"String"),(0,n.Uk)(" s "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(" input"),(0,n._)("span",{class:"token punctuation"},"."),(0,n._)("span",{class:"token function"},"readLine"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br")])],-1),Ia=(0,n._)("h2",{id:"_1-31-java-中-io-流",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-31-java-中-io-流","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.31. Java 中 IO 流")],-1),Ca=(0,n._)("h3",{id:"_1-31-1-java-中-io-流分为几种",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-31-1-java-中-io-流分为几种","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.31.1. Java 中 IO 流分为几种？")],-1),Ba=(0,n._)("ul",null,[(0,n._)("li",null,"按照流的流向分，可以分为输入流和输出流;"),(0,n._)("li",null,"按照操作单元划分，可以划分为字节流和字符流;"),(0,n._)("li",null,"按照流的角色划分为节点流和处理流。")],-1),Na=(0,n._)("p",null,"Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。",-1),qa=(0,n._)("ul",null,[(0,n._)("li",null,"InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。"),(0,n._)("li",null,"OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。")],-1),wa=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("按操作方式分类结构图： "),(0,n._)("img",{src:_,alt:"picture 3"})])]),(0,n._)("li",null,[(0,n._)("p",null,"按操作对象分类结构图：")])],-1),Ea=(0,n._)("p",null,[(0,n._)("img",{src:s,alt:"picture 4"})],-1),Ra=(0,n._)("h3",{id:"_1-31-2-既然有了字节流-为什么还要有字符流",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-31-2-既然有了字节流-为什么还要有字符流","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.31.2. 既然有了字节流，为什么还要有字符流？")],-1),Aa=(0,n._)("p",null,"不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？",-1),Ma=(0,n._)("p",null,"字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以，I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件，图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。",-1),Ya=(0,n._)("h3",{id:"_1-31-3-bio-nio-aio-有什么区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-31-3-bio-nio-aio-有什么区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.31.3. BIO,NIO,AIO 有什么区别？")],-1),Da=(0,n._)("ol",null,[(0,n._)("li",null,"BIO (Blocking I/O): 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高 (小于单机 1000) 的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载，限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。"),(0,n._)("li",null,"NIO (Non-blocking/New I/O): NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector,Buffer 等抽象.NIO 中的 N 可以理解为 Non-blocking，不单纯是 New.它支持面向缓冲的，基于通道的 I/O 操作方法. NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好;非阻塞模式正好与之相反。对于低负载，低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性;对于高负载，高并发的 (网络) 应用，应使用 NIO 的非阻塞模式来开发"),(0,n._)("li",null,"AIO (Asynchronous I/O): AIO 也就是 NIO 2.在 Java 7 中引入了 NIO 的改进版 NIO 2，它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作.AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。")],-1),Ha=(0,n._)("h2",{id:"_1-32-深拷贝-vs-浅拷贝",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-32-深拷贝-vs-浅拷贝","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.32. 深拷贝 vs 浅拷贝")],-1),Ta=(0,n._)("p",null,[(0,n._)("img",{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/java-deep-and-shallow-copy.jpg",alt:"deep and shallow copy"})],-1),Va=(0,n._)("ol",null,[(0,n._)("li",null,"浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。"),(0,n._)("li",null,"深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。")],-1),Ka={},La=(0,e(3744).Z)(Ka,[["render",function(l,a){return(0,n.wg)(),(0,n.iD)(n.HY,null,[u,d,h,c,o,p,v,g,f,k,b,x,U,J,m,j,S,y,O,I,C,B,N,q,w,E,R,A,M,Y,D,H,T,V,K,L,F,P,W,Z,z,Q,G,X,$,ll,al,el,nl,tl,il,rl,_l,sl,ul,dl,hl,cl,ol,pl,vl,gl,fl,kl,bl,xl,Ul,Jl,ml,jl,Sl,yl,Ol,Il,Cl,Bl,Nl,ql,wl,El,Rl,Al,Ml,Yl,Dl,Hl,Tl,Vl,Kl,Ll,Fl,Pl,Wl,Zl,zl,Ql,Gl,Xl,$l,la,aa,ea,na,ta,ia,ra,_a,sa,ua,da,ha,ca,oa,pa,va,ga,fa,ka,ba,xa,Ua,Ja,ma,ja,Sa,ya,Oa,Ia,Ca,Ba,Na,qa,wa,Ea,Ra,Aa,Ma,Ya,Da,Ha,Ta,Va],64)}]])},3744:(l,a)=>{a.Z=(l,a)=>{const e=l.__vccOpts||l;for(const[l,n]of a)e[l]=n;return e}},631:(l,a,e)=>{l.exports=e.p+"assets/img/1640320181758.f7fb8733.png"},9786:(l,a,e)=>{l.exports=e.p+"assets/img/1640343884805.075416b8.png"},3717:(l,a,e)=>{l.exports=e.p+"assets/img/1640343893506.7cfa7397.png"},2838:(l,a,e)=>{l.exports=e.p+"assets/img/1640344046679.e9a2e9a3.png"},910:(l,a,e)=>{l.exports=e.p+"assets/img/1640344068818.20e746d9.png"}}]);