"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[364],{4457:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-4b406612",path:"/golang/codingstandard.html",title:"1. Go 语言编码规范",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 命名规范",slug:"_1-1-命名规范",children:[{level:3,title:"1.1.1. 包命名:package",slug:"_1-1-1-包命名-package",children:[]},{level:3,title:"1.1.2. 文件命名",slug:"_1-1-2-文件命名",children:[]},{level:3,title:"1.1.3. 结构体命名",slug:"_1-1-3-结构体命名",children:[]},{level:3,title:"1.1.4. 接口命名",slug:"_1-1-4-接口命名",children:[]},{level:3,title:"1.1.5. 变量命名",slug:"_1-1-5-变量命名",children:[]},{level:3,title:"1.1.6. 常量命名",slug:"_1-1-6-常量命名",children:[]},{level:3,title:"1.1.7. 关键字",slug:"_1-1-7-关键字",children:[]}]},{level:2,title:"1.2. 注释",slug:"_1-2-注释",children:[]},{level:2,title:"1.3. 代码风格",slug:"_1-3-代码风格",children:[{level:3,title:"1.3.1. 缩进和折行",slug:"_1-3-1-缩进和折行",children:[]},{level:3,title:"1.3.2. 语句的结尾",slug:"_1-3-2-语句的结尾",children:[]},{level:3,title:"1.3.3. 括号和空格",slug:"_1-3-3-括号和空格",children:[]},{level:3,title:"1.3.4. import 规范",slug:"_1-3-4-import-规范",children:[]},{level:3,title:"1.3.5. 错误处理",slug:"_1-3-5-错误处理",children:[]},{level:3,title:"1.3.6. 测试",slug:"_1-3-6-测试",children:[]}]},{level:2,title:"1.4. 常用工具",slug:"_1-4-常用工具",children:[]}],filePathRelative:"golang/codingstandard.md",git:{updatedTime:165500109e4,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:1}]}}},1423:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="_1-go-语言编码规范" tabindex="-1"><a class="header-anchor" href="#_1-go-语言编码规范" aria-hidden="true">#</a> 1. Go 语言编码规范</h1><h2 id="_1-1-命名规范" tabindex="-1"><a class="header-anchor" href="#_1-1-命名规范" aria-hidden="true">#</a> 1.1. 命名规范</h2><ol><li>Go 在命名时以字母或下划线开头, 后面可以跟任意数量的字母,数字或下划线</li><li>命名以一个大写字母开头,可以被外部包的代码所使用, 命名以小写字母开头,则对外部包是不可见的</li><li>Go 是一种区分大小写的编程语言.因此,Manpower 和 manpower 是两个不同的命名.</li></ol><h3 id="_1-1-1-包命名-package" tabindex="-1"><a class="header-anchor" href="#_1-1-1-包命名-package" aria-hidden="true">#</a> 1.1.1. 包命名:package</h3><p>保持 package 的名字和目录保持一致,采取有意义的包名,尽量不要标准库和冲突.包名应该为小写单词,不要使用下划线或者混合大小写.</p><h3 id="_1-1-2-文件命名" tabindex="-1"><a class="header-anchor" href="#_1-1-2-文件命名" aria-hidden="true">#</a> 1.1.2. 文件命名</h3><p>尽量采取有意义的文件名,应该为小写单词,可以使用下划线分隔各个单词.</p><h3 id="_1-1-3-结构体命名" tabindex="-1"><a class="header-anchor" href="#_1-1-3-结构体命名" aria-hidden="true">#</a> 1.1.3. 结构体命名</h3><p>采用驼峰命名法,首字母根据访问控制大写或者小写, struct 申明和初始化格式采用多行</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 多行申明</span>\n<span class="token keyword">type</span> User <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    Username  <span class="token builtin">string</span>\n    Email     <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-1-4-接口命名" tabindex="-1"><a class="header-anchor" href="#_1-1-4-接口命名" aria-hidden="true">#</a> 1.1.4. 接口命名</h3><p>采用驼峰命名法,首字母根据访问控制大写或者小写, 单个函数的结构名以 &quot;er&quot; 作为后缀,例如 Reader , Writer .</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n        <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-1-5-变量命名" tabindex="-1"><a class="header-anchor" href="#_1-1-5-变量命名" aria-hidden="true">#</a> 1.1.5. 变量命名</h3><ol><li>变量名称一般遵循驼峰法,首字母根据访问控制原则大写或者小写,但遇到特有名词时,需要遵循以下规则:</li><li>如果变量为私有,且特有名词为首个单词,则使用小写,如 apiClient, 变量公有使用该名词原有的写法,如 APIClient,repoID,UserID</li><li>若变量类型为 bool 类型,则名称应以 Has, Is, Can 或 Allow 开头 isExist, hasConflict, canManage, allowGitHook</li></ol><h3 id="_1-1-6-常量命名" tabindex="-1"><a class="header-anchor" href="#_1-1-6-常量命名" aria-hidden="true">#</a> 1.1.6. 常量命名</h3><ol><li>常量均需使用全部大写字母组成,并使用下划线分词, <code>const APP_VER = &quot;1.0&quot;</code></li><li>如果是枚举类型的常量,需要先创建相应类型:</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Scheme <span class="token builtin">string</span>\n<span class="token keyword">const</span> <span class="token punctuation">(</span>\n    HTTP  Scheme <span class="token operator">=</span> <span class="token string">&quot;http&quot;</span>\n    HTTPS Scheme <span class="token operator">=</span> <span class="token string">&quot;https&quot;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-1-7-关键字" tabindex="-1"><a class="header-anchor" href="#_1-1-7-关键字" aria-hidden="true">#</a> 1.1.7. 关键字</h3><p><img src="https://raw.githubusercontent.com/kuro-tsuchi/my-picgo/master/md/img/20220612082119.png" alt="20220612082119"></p><h2 id="_1-2-注释" tabindex="-1"><a class="header-anchor" href="#_1-2-注释" aria-hidden="true">#</a> 1.2. 注释</h2><p>Go 提供了块注释和行注释.</p><h2 id="_1-3-代码风格" tabindex="-1"><a class="header-anchor" href="#_1-3-代码风格" aria-hidden="true">#</a> 1.3. 代码风格</h2><h3 id="_1-3-1-缩进和折行" tabindex="-1"><a class="header-anchor" href="#_1-3-1-缩进和折行" aria-hidden="true">#</a> 1.3.1. 缩进和折行</h3><p>缩进直接使用 gofmt 工具格式化即可);一行最长不超过 120 个字符,超过的请使用换行展示,尽量保持格式优雅.</p><h3 id="_1-3-2-语句的结尾" tabindex="-1"><a class="header-anchor" href="#_1-3-2-语句的结尾" aria-hidden="true">#</a> 1.3.2. 语句的结尾</h3><p>Go 不需要冒号结尾,默认一行就是一条语句, 如果多个语句写在同一行,每条语句必须使用 ;结尾</p><h3 id="_1-3-3-括号和空格" tabindex="-1"><a class="header-anchor" href="#_1-3-3-括号和空格" aria-hidden="true">#</a> 1.3.3. 括号和空格</h3><p>go 会强制左大括号不换行,所有的运算符和操作数之间要留空格.</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​</p><h3 id="_1-3-4-import-规范" tabindex="-1"><a class="header-anchor" href="#_1-3-4-import-规范" aria-hidden="true">#</a> 1.3.4. import 规范</h3><ol><li>import 在多行的情况下,goimports 会自动格式化</li><li>有顺序的引入包,不同的类型采用空格分离,第一种实标准库,第二是项目包,第三是第三方包.</li><li>在项目中不要使用相对路径引入包, 如果是引入本项目中的其他包,最好使用相对路径.</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;encoding/json&quot;</span>\n    <span class="token string">&quot;strings&quot;</span>\n​\n    <span class="token string">&quot;../models&quot;</span>\n    <span class="token string">&quot;../controller&quot;</span>\n    <span class="token string">&quot;../utils&quot;</span>\n​\n    <span class="token string">&quot;github.com/astaxie/beego&quot;</span>\n    <span class="token string">&quot;github.com/go-sql-driver/mysql&quot;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_1-3-5-错误处理" tabindex="-1"><a class="header-anchor" href="#_1-3-5-错误处理" aria-hidden="true">#</a> 1.3.5. 错误处理</h3><ol><li>不能丢弃任何有返回 err 的调用,不要使用 _ 丢弃,必须全部处理.接收到错误,要么返回 err,或者使用 log 记录下来, 尽早 return:一旦有错误发生,马上返回</li><li>尽量不要使用 panic</li><li>错误描述如果是英文必须为小写,不需要标点结尾</li><li>采用独立的错误流进行处理, 不要和业务代码混在一起</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 错误写法</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n    <span class="token comment">// error handling</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// normal code</span>\n<span class="token punctuation">}</span>\n​\n<span class="token comment">// 正确写法</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n    <span class="token comment">// error handling</span>\n    <span class="token keyword">return</span> <span class="token comment">// or continue, etc.</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// normal code</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>​</p><h3 id="_1-3-6-测试" tabindex="-1"><a class="header-anchor" href="#_1-3-6-测试" aria-hidden="true">#</a> 1.3.6. 测试</h3><p>单元测试文件名命名规范为 example_test.go 测试用例的函数名称必须以 Test 开头</p><h2 id="_1-4-常用工具" tabindex="-1"><a class="header-anchor" href="#_1-4-常用工具" aria-hidden="true">#</a> 1.4. 常用工具</h2><ol><li>gofmt 自动格式化代码,保证所有的 go 代码与官方推荐的格式保持一致</li><li>goimport 可以自动删除和引入包.</li><li>go get golang.org/x/tools/cmd/goimports</li></ol>',42),l={},t=(0,s(3744).Z)(l,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);