"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[93],{6286:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-336ca7b2",path:"/distributed/zookeeper.html",title:"1. zookeeper",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. ZooKeeper 概览",slug:"_1-1-zookeeper-概览",children:[]},{level:2,title:"1.2. ZooKeeper 典型应用场景",slug:"_1-2-zookeeper-典型应用场景",children:[{level:3,title:"1.2.1. 配置管理(数据发布/订阅)",slug:"_1-2-1-配置管理-数据发布-订阅",children:[]},{level:3,title:"1.2.2. 命名服务",slug:"_1-2-2-命名服务",children:[]},{level:3,title:"1.2.3. 分布式锁",slug:"_1-2-3-分布式锁",children:[]},{level:3,title:"1.2.4. 分布式协调/通知",slug:"_1-2-4-分布式协调-通知",children:[]}]},{level:2,title:"1.3. Zookeeper 的核心功能?",slug:"_1-3-zookeeper-的核心功能",children:[{level:3,title:"1.3.1. 文件系统",slug:"_1-3-1-文件系统",children:[]},{level:3,title:"1.3.2. 通知机制(watcher 机制)",slug:"_1-3-2-通知机制-watcher-机制",children:[]},{level:3,title:"1.3.3. 集群管理机制",slug:"_1-3-3-集群管理机制",children:[]}]},{level:2,title:"1.4. Zookeeper 的角色?",slug:"_1-4-zookeeper-的角色",children:[]},{level:2,title:"1.5. ZooKeeper 重要概念解读",slug:"_1-5-zookeeper-重要概念解读",children:[{level:3,title:"1.5.1. Data model(数据模型)",slug:"_1-5-1-data-model-数据模型",children:[]},{level:3,title:"1.5.2. znode(数据节点)",slug:"_1-5-2-znode-数据节点",children:[]}]},{level:2,title:"1.6. ZooKeeper 集群",slug:"_1-6-zookeeper-集群",children:[]},{level:2,title:"1.7. ZooKeeper 集群角色",slug:"_1-7-zookeeper-集群角色",children:[]},{level:2,title:"1.8. ZooKeeper 集群为啥最好奇数台?",slug:"_1-8-zookeeper-集群为啥最好奇数台",children:[]},{level:2,title:"1.9. ZooKeeper 选举的过半机制防止脑裂",slug:"_1-9-zookeeper-选举的过半机制防止脑裂",children:[{level:3,title:"1.9.1. 过半机制是如何防止脑裂现象产生的?",slug:"_1-9-1-过半机制是如何防止脑裂现象产生的",children:[]}]},{level:2,title:"1.10. SpringBoot 使用 zookeeper 整合 Dubbo",slug:"_1-10-springboot-使用-zookeeper-整合-dubbo",children:[{level:3,title:"1.10.1. api 模块",slug:"_1-10-1-api-模块",children:[]},{level:3,title:"1.10.2. 生产者模块",slug:"_1-10-2-生产者模块",children:[]},{level:3,title:"1.10.3. 消费者模块",slug:"_1-10-3-消费者模块",children:[]}]},{level:2,title:"1.11. Zookeeper 怎么保证主从节点的状态同步?",slug:"_1-11-zookeeper-怎么保证主从节点的状态同步",children:[{level:3,title:"1.11.1. 恢复模式",slug:"_1-11-1-恢复模式",children:[]},{level:3,title:"1.11.2. 广播模式",slug:"_1-11-2-广播模式",children:[]}]},{level:2,title:"1.12. 说几个 zookeeper 常用的命令",slug:"_1-12-说几个-zookeeper-常用的命令",children:[]},{level:2,title:"1.13. zookeeper 是如何保证事务的顺序一致性的?",slug:"_1-13-zookeeper-是如何保证事务的顺序一致性的",children:[]},{level:2,title:"1.14. 注册中心的作用了解么?",slug:"_1-14-注册中心的作用了解么",children:[]},{level:2,title:"1.15. 服务提供者宕机后,注册中心会做什么?",slug:"_1-15-服务提供者宕机后-注册中心会做什么",children:[]},{level:2,title:"1.16. 监控中心的作用呢?",slug:"_1-16-监控中心的作用呢",children:[]},{level:2,title:"1.17. 注册中心和监控中心都宕机的话,服务都会挂掉吗?",slug:"_1-17-注册中心和监控中心都宕机的话-服务都会挂掉吗",children:[]}],filePathRelative:"distributed/zookeeper.md",git:{updatedTime:1649400266e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:7}]}}},1251:(e,n,a)=>{a.r(n),a.d(n,{default:()=>Qe});var s=a(6252),l=a(8722),r=a(1831),o=a(7330),t=a(2754),p=a(3365),_=a(447),i=a(6935);const c=(0,s._)("h1",{id:"_1-zookeeper",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-zookeeper","aria-hidden":"true"},"#"),(0,s.Uk)(" 1. zookeeper")],-1),u=(0,s._)("h2",{id:"_1-1-zookeeper-概览",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-zookeeper-概览","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1. ZooKeeper 概览")],-1),d=(0,s._)("p",null,"ZooKeeper 是一个开源的分布式协调服务. 它可以为分布式应用提供一致性服务, 提供的功能包括配置管理,命名服务,分布式锁,集群管理等",-1),k=(0,s._)("h2",{id:"_1-2-zookeeper-典型应用场景",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-zookeeper-典型应用场景","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2. ZooKeeper 典型应用场景")],-1),b=(0,s._)("h3",{id:"_1-2-1-配置管理-数据发布-订阅",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-1-配置管理-数据发布-订阅","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2.1. 配置管理(数据发布/订阅)")],-1),h=(0,s._)("p",null,"发布者将数据发布到 Zookeeper 节点上, 通过 watcher 机制,客户端可以监听这些数据节点,当这些节点发生变化时,Zookeeper 及时地通知客户端,从而达到动态获取数据的目的, 来实现配置的动态更新.",-1),m=(0,s._)("h3",{id:"_1-2-2-命名服务",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-2-命名服务","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2.2. 命名服务")],-1),U=(0,s._)("p",null,"根据指定名称来获取资源或服务的地址",-1),g=(0,s._)("h3",{id:"_1-2-3-分布式锁",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-3-分布式锁","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2.3. 分布式锁")],-1),v=(0,s._)("p",null,"通过创建临时顺序节点获得分布式锁, 当获得锁的一方执行完相关代码或者是挂掉之后就释放锁",-1),z=(0,s._)("h3",{id:"_1-2-4-分布式协调-通知",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-4-分布式协调-通知","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2.4. 分布式协调/通知")],-1),f=(0,s._)("p",null,"Zookeeper 中特有的 Watcher 注册于异步通知机制,能够很好地实现分布式环境下不同机器,甚至不同系统之间的协调与通知,从而实现对数据变更的实时处理.通常的做法是不同的客户端都对 Zookeeper 上的同一个数据节点进行 Watcher 注册,监听数据节点的变化(包括节点本身和子节点),若数据节点发生变化,那么所有订阅的客户端都能够接收到相应的 Watcher 通知,并作出相应处理",-1),Z=(0,s._)("h2",{id:"_1-3-zookeeper-的核心功能",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-3-zookeeper-的核心功能","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.3. Zookeeper 的核心功能?")],-1),x=(0,s._)("h3",{id:"_1-3-1-文件系统",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-3-1-文件系统","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.3.1. 文件系统")],-1),K=(0,s._)("p",null,"zk 的存储的数据的结构,类似于一个文件系统.每个节点称为 znode,每个 znode 都是一个类似于 KV 的结构,每个节点名称相当于 key,每个节点中都保存了对应的数据,类似于 Key对应的 value.每个 znode 下面都可以有多个子节点,就这样一直延续下去,构成了类似于Linux 文件系统的架构.",-1),S=(0,s._)("p",null,[(0,s._)("img",{src:l,alt:"picture 1"})],-1),w=(0,s._)("h3",{id:"_1-3-2-通知机制-watcher-机制",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-3-2-通知机制-watcher-机制","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.3.2. 通知机制(watcher 机制)")],-1),y=(0,s._)("p",null,"Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听,当服务端的一些指 定事件触发了这个 Watcher,服务端会向指定客户端发送一个事件通知来实现分布式的通知 功能,然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变.",-1),L=(0,s._)("h3",{id:"_1-3-3-集群管理机制",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-3-3-集群管理机制","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.3.3. 集群管理机制")],-1),E=(0,s._)("p",null,"zk 本身是一个集群结构,有一个 leader 节点,负责写请求,多个 follower 负责响应读请求 .并且在 leader 节点故障时,会自动根据选举机制从剩下的 follower 中选出新的 leader.",-1),I=(0,s._)("h2",{id:"_1-4-zookeeper-的角色",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-4-zookeeper-的角色","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.4. Zookeeper 的角色?")],-1),O=(0,s._)("p",null,[(0,s._)("img",{src:r,alt:"picture 2"})],-1),N=(0,s._)("ol",null,[(0,s._)("li",null,"leader 角色: 处理所有的事务请求(写请求),可以处理读请求,集群中只能有一个 Leader"),(0,s._)("li",null,"Follower 角色: 只能处理读请求,同时作为 Leader 的候选节点,即如果 Leader 宕机 ,Follower 节点要参与到新的 Leader 选举中,有可能成为新的 Leader 节点."),(0,s._)("li",null,"Observer 角色: Observer:只能处理读请求,不能参与选举.")],-1),T=(0,s._)("h2",{id:"_1-5-zookeeper-重要概念解读",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-zookeeper-重要概念解读","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5. ZooKeeper 重要概念解读")],-1),P=(0,s._)("h3",{id:"_1-5-1-data-model-数据模型",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-1-data-model-数据模型","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.1. Data model(数据模型)")],-1),R=(0,s._)("p",null,[(0,s._)("img",{src:o,alt:"picture 1"})],-1),j=(0,s._)("p",null,"ZooKeeper 数据模型采用层次化的多叉树形结构,每个节点上都可以存储数据,这些数据可以是数字,字符串或者是二进制序列.并且.每个节点还可以拥有 N 个子节点,最上层是根节点以 / 来代表.每个数据节点在 ZooKeeper 中被称为 znode,它是 ZooKeeper 中数据的最小单元.并且,每个 znode 都有一个唯一的路径标识.",-1),A=(0,s._)("p",null,"ZooKeeper 主要是用来协调服务的,而不是用来存储业务数据的,所以不要放比较大的数据在znode 上,ZooKeeper 给出的上限是每个结点的数据大小最大是 1M.",-1),H=(0,s._)("p",null,"ZooKeeper 将数据保存在内存中,这也就保证了 高吞吐量和低延迟, 但是内存限制了能够存储的容量",-1),M=(0,s._)("h3",{id:"_1-5-2-znode-数据节点",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-2-znode-数据节点","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.2. znode(数据节点)")],-1),D=(0,s._)("p",null,"每个数据节点在 ZooKeeper 中被称为 znode,它是 ZooKeeper 中数据的最小单元.",-1),B=(0,s._)("h4",{id:"_1-5-2-1-znode-4-种类型",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-2-1-znode-4-种类型","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.2.1. znode 4 种类型")],-1),F=(0,s._)("ol",null,[(0,s._)("li",null,"持久 (PERSISTENT) 节点: 一旦创建就一直存在,即使 ZooKeeper 集群宕机,直到将其删除."),(0,s._)("li",null,"临时 (EPHEMERAL) 节点: 临时节点的生命周期是与客户端会话 (session) 绑定的,会话消失则节点消失.并且,临时节点只能做叶子节点,不能创建子节点."),(0,s._)("li",null,"持久顺序 (PERSISTENT_SEQUENTIAL) 节点: 除了具有持久 (PERSISTENT) 节点的特性之外,子节点的名称还具有顺序性.比如 /node1/app0000000001 ,/node1/app0000000002 ."),(0,s._)("li",null,"临时顺序 (EPHEMERAL_SEQUENTIAL) 节点: 除了具备临时 (EPHEMERAL) 节点的特性之外,子节点的名称还具有顺序性.")],-1),W=(0,s._)("h2",{id:"_1-6-zookeeper-集群",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-zookeeper-集群","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6. ZooKeeper 集群")],-1),C=(0,s._)("p",null,[(0,s._)("img",{src:t,alt:"picture 3"})],-1),Q=(0,s._)("p",null,"为了保证高可用,最好是以集群形态来部署 ZooKeeper,这样只要集群中大部分机器是可用的,那么 ZooKeeper 本身仍然是可用的.",-1),V=(0,s._)("p",null,"集群规则为 2N+1 台,N>0,即 3 台. 可以继续使用,单数服务器只要没超过一半的服务器宕机就可以继续使用. 通常 3 台服务器就可以构成一个 ZooKeeper 集群了",-1),G=(0,s._)("p",null,"每一个 Server 代表一个安装 ZooKeeper 服务的服务器.组成 ZooKeeper 服务的服务器都会在内存中维护当前的服务器状态,并且每台服务器之间都互相保持着通信.集群间通过 ZAB协议 (ZooKeeper Atomic Broadcast) 来保持数据的一致性.",-1),Y=(0,s._)("p",null,"最典型集群模式是 Master/Slave 模式 (主备模式).在这种模式中,通常 Master 服务器作为主服务器提供写服务,其他的 Slave 服务器从服务器通过异步复制的方式获取 Master 服务器最新的数据提供读服务.",-1),q=(0,s._)("h2",{id:"_1-7-zookeeper-集群角色",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-7-zookeeper-集群角色","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.7. ZooKeeper 集群角色")],-1),J=(0,s._)("p",null,[(0,s._)("img",{src:p,alt:"picture 4"})],-1),X=(0,s._)("p",null,"ZooKeeper 中没有选择传统的 Master/Slave 概念,而是引入了 Leader,Follower 和Observer 三种角色.",-1),$=(0,s._)("p",null,"ZooKeeper 集群中的所有机器通过一个 Leader 选举过程来选定一台称为 Leader 的机器,Leader 可以为客户端提供读写服务.除了 Leader 外,Follower 和 Observer 都只能提供读服务. Follower 和 Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程,也不参与写操作的过半写成功策略,因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能.",-1),ee=(0,s._)("table",null,[(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"角色"),(0,s._)("th",null,"说明")])]),(0,s._)("tbody",null,[(0,s._)("tr",null,[(0,s._)("td",null,"Leader"),(0,s._)("td",null,"为客户端提供读和写的服务,负责投票的发起和决议,更新系统状态.")]),(0,s._)("tr",null,[(0,s._)("td",null,"Follower"),(0,s._)("td",null,"为客户端提供读服务,如果是写服务则转发给 Leader.参与选举过程中的投票.")]),(0,s._)("tr",null,[(0,s._)("td",null,"Observer"),(0,s._)("td",null,"为客户端提供读服务,如果是写服务则转发给 Leader.不参与选举过程中的投票,也不参与 过半写成功 策略.在不影响写性能的情况下提升集群的读性能.此角色于 ZooKeeper3.3 系列新增的角色.")])])],-1),ne=(0,s._)("p",null,"当 Leader 服务器出现网络中断,崩溃退出与重启等异常情况时,就会进入 Leader 选举过程 ,这个过程会选举产生新的 Leader 服务器.",-1),ae=(0,s._)("ol",null,[(0,s._)("li",null,"Leader election(选举阶段):节点在一开始都处于选举阶段,只要有一个节点得到超半数节点的票数,它就可以当选准 leader."),(0,s._)("li",null,"Discovery(发现阶段):在这个阶段,followers 跟准 leader 进行通信,同步 followers 最近接收的事务提议."),(0,s._)("li",null,"Synchronization(同步阶段):同步阶段主要是利用 leader 前一阶段获得的最新提议历 史,同步集群中所有的副本.同步完成之后准 leader 才会成为真正的 leader."),(0,s._)("li",null,"Broadcast(广播阶段):到了这个阶段,ZooKeeper 集群才能正式对外提供事务服务,并且 leader 可以进行消息广播.同时如果有新的节点加入,还需要对新节点进行同步.")],-1),se=(0,s._)("h2",{id:"_1-8-zookeeper-集群为啥最好奇数台",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-8-zookeeper-集群为啥最好奇数台","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.8. ZooKeeper 集群为啥最好奇数台?")],-1),le=(0,s._)("p",null,"集群中只要有过半的机器是正常工作的,那么整个集群对外就是可用的",-1),re=(0,s._)("p",null,"ZooKeeper 集群在宕掉几个 ZooKeeper 服务器之后,如果剩下的 ZooKeeper 服务器个数大于宕掉的个数的话整个 ZooKeeper 依然可用.",-1),oe=(0,s._)("h2",{id:"_1-9-zookeeper-选举的过半机制防止脑裂",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-zookeeper-选举的过半机制防止脑裂","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9. ZooKeeper 选举的过半机制防止脑裂")],-1),te=(0,s._)("p",null,"对于一个集群,通常多台机器会部署在不同机房,来提高这个集群的可用性.保证可用性的同时,会发生一种机房间网络线路故障,导致机房间网络不通,而集群被割裂成几个小集群.这时候子集群各自选主导致脑裂的情况,这将会带来数据一致性等问题.",-1),pe=(0,s._)("h3",{id:"_1-9-1-过半机制是如何防止脑裂现象产生的",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-1-过半机制是如何防止脑裂现象产生的","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.1. 过半机制是如何防止脑裂现象产生的?")],-1),_e=(0,s._)("p",null,"ZooKeeper 的过半机制导致不可能产生 2 个 leader,因为少于等于一半是不可能产生 leader 的,这就使得不论机房的机器如何分配都不可能发生脑裂.",-1),ie=(0,s._)("h2",{id:"_1-10-springboot-使用-zookeeper-整合-dubbo",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-10-springboot-使用-zookeeper-整合-dubbo","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.10. SpringBoot 使用 zookeeper 整合 Dubbo")],-1),ce=(0,s._)("p",null,[(0,s._)("img",{src:_,alt:"picture 3"})],-1),ue=(0,s._)("p",null,"创建 3 个模块: 模块说明 dubbo-api 模块 存放消费者和生产者通用接口组+通用模块 dubbo-provider 服务提供者 ,生产者 提供业务方法的实现 dubbo-cosumer 服务消费者,请 求服务,获取实现",-1),de=(0,s._)("h3",{id:"_1-10-1-api-模块",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-10-1-api-模块","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.10.1. api 模块")],-1),ke=(0,s._)("p",null,[(0,s._)("img",{src:i,alt:"picture 4"})],-1),be=(0,s._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,s._)("pre",{class:"language-java"},[(0,s._)("code",null,[(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token keyword"},"interface"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"UserService"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)("  "),(0,s._)("span",{class:"token function"},"sayHello"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(" name"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br")])],-1),he=(0,s._)("h3",{id:"_1-10-2-生产者模块",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-10-2-生产者模块","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.10.2. 生产者模块")],-1),me=(0,s._)("p",null,"两个注解",-1),Ue=(0,s._)("p",null,"@Service 注解 来完成服务的发布 注意导包的时候,要导入 dubbo 官方提供的包. @EnabledDubbo 在启动类上添加,自动扫描所有的服务类(有@Service 注解的类) 注册到 zookeeper 上发布",-1),ge=(0,s._)("div",{class:"language-pom ext-pom line-numbers-mode"},[(0,s._)("pre",{class:"language-pom"},[(0,s._)("code",null,"<dependencies>\n    \x3c!-- 引入上述api模块坐标 --\x3e\n      <dependency>\n         <groupId>com.itheima.dubbo</groupId>\n         <artifactId>api</artifactId>\n         <version>1.0-SNAPSHOT</version>\n      </dependency>\n</dependencies>\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br")])],-1),ve=(0,s._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,s._)("pre",{class:"language-java"},[(0,s._)("code",null,[(0,s.Uk)("编写服务类"),(0,s._)("span",{class:"token operator"},":"),(0,s.Uk)(" 注意使用注解 不要导错包 "),(0,s._)("span",{class:"token annotation punctuation"},"@Service"),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)("导的是dubbo包下的"),(0,s._)("span",{class:"token class-name"},"Service"),(0,s.Uk)("\n\n"),(0,s._)("span",{class:"token comment"},"//注意 : @Service注解不要导错包!!!!!"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token comment"},"// 1. 生成UserService接口实例对象"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token comment"},"// 2. 提供服务类 后续会结合 @EnableDubbo注解 服务注册到zookeeper中心上"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token annotation punctuation"},"@Service"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token keyword"},"class"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"UserServiceImpl"),(0,s.Uk)(),(0,s._)("span",{class:"token keyword"},"implements"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"UserService"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token annotation punctuation"},"@Override"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(),(0,s._)("span",{class:"token function"},"sayHello"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(" name"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n        "),(0,s._)("span",{class:"token class-name"},"System"),(0,s._)("span",{class:"token punctuation"},"."),(0,s.Uk)("out"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"println"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'"----服务访问了一次------后续访问数据源"'),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n        "),(0,s._)("span",{class:"token keyword"},"return"),(0,s.Uk)(),(0,s._)("span",{class:"token string"},'"hello dubbo "'),(0,s._)("span",{class:"token operator"},"+"),(0,s.Uk)("name"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br")])],-1),ze=(0,s._)("div",{class:"language-properties ext-properties line-numbers-mode"},[(0,s._)("pre",{class:"language-properties"},[(0,s._)("code",null,[(0,s._)("span",{class:"token comment"},"# dubbo-provider.properties"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.application.name"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"annotation-springboot-provider"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.registry.address"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"zookeeper://127.0.0.1:2181"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.protocol.name"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"dubbo"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.protocol.port"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"20880"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.scan.base-packages"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"com.itheima.service"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"server.port"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"8081"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br")])],-1),fe=(0,s._)("h3",{id:"_1-10-3-消费者模块",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-10-3-消费者模块","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.10.3. 消费者模块")],-1),Ze=(0,s._)("p",null,"@Reference 获取,订阅服务",-1),xe=(0,s._)("div",{class:"language-pom ext-pom line-numbers-mode"},[(0,s._)("pre",{class:"language-pom"},[(0,s._)("code",null," <dependencies>\n      \x3c!-- 引入上述api模块坐标 --\x3e\n      <dependency>\n         <groupId>com.itheima.dubbo</groupId>\n         <artifactId>api</artifactId>\n         <version>1.0-SNAPSHOT</version>\n      </dependency>\n</dependencies>\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br")])],-1),Ke=(0,s._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,s._)("pre",{class:"language-java"},[(0,s._)("code",null,[(0,s._)("span",{class:"token annotation punctuation"},"@RestController"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token keyword"},"class"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"UserController"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token annotation punctuation"},"@Reference"),(0,s.Uk)("  "),(0,s._)("span",{class:"token comment"},"//  注解不要导错包  导入dubbo的才行  注册服务到zookeeper"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"private"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"UserService"),(0,s.Uk)(" userService"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n\n    "),(0,s._)("span",{class:"token annotation punctuation"},"@GetMapping"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'"/hello/{name}"'),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"public"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(),(0,s._)("span",{class:"token function"},"hello"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token annotation punctuation"},"@PathVariable"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'"name"'),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)(),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(" name"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n        "),(0,s._)("span",{class:"token class-name"},"String"),(0,s.Uk)(" s "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(" userService"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"sayHello"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("name"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n        "),(0,s._)("span",{class:"token keyword"},"return"),(0,s.Uk)(),(0,s._)("span",{class:"token string"},'"hello"'),(0,s._)("span",{class:"token operator"},"+"),(0,s.Uk)("s"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br")])],-1),Se=(0,s._)("div",{class:"language-properties ext-properties line-numbers-mode"},[(0,s._)("pre",{class:"language-properties"},[(0,s._)("code",null,[(0,s._)("span",{class:"token comment"},"# dubbo-consumer.properties"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.application.name"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"annotation-springboot-consumer"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.registry.address"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"zookeeper://127.0.0.1:2181"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"dubbo.consumer.check"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"false"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token attr-name"},"server.port"),(0,s._)("span",{class:"token punctuation"},"="),(0,s._)("span",{class:"token attr-value"},"8088"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br")])],-1),we=(0,s._)("h2",{id:"_1-11-zookeeper-怎么保证主从节点的状态同步",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-11-zookeeper-怎么保证主从节点的状态同步","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.11. Zookeeper 怎么保证主从节点的状态同步?")],-1),ye=(0,s._)("p",null,"Zookeeper 的核心是原子广播机制,这个机制保证了各个 server 之间的同步.实现这个机 制的协议叫做 Zab 协议.Zab 协议有两种模式,它们分别是恢复模式和广播模式.",-1),Le=(0,s._)("h3",{id:"_1-11-1-恢复模式",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-11-1-恢复模式","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.11.1. 恢复模式")],-1),Ee=(0,s._)("p",null,"当服务启动或者在领导者崩溃后,Zab 就进入了恢复模式,当领导者被选举出来,且大多数 server 完成了和 leader 的状态同步以后,恢复模式就结束了.状态同步保证了 leader 和 server 具有相同的系统状态.",-1),Ie=(0,s._)("h3",{id:"_1-11-2-广播模式",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-11-2-广播模式","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.11.2. 广播模式")],-1),Oe=(0,s._)("p",null,"一旦 leader 已经和多数的 follower 进行了状态同步后,它就可以开始广播消息了,即进 入广播状态.这时候当一个 server 加入 ZooKeeper 服务中,它会在恢复模式下启动,发 现 leader,并和 leader 进行状态同步.待到同步结束,它也参与消息广播.ZooKeeper 服务一直维持在 Broadcast 状态,直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持.",-1),Ne=(0,s._)("h2",{id:"_1-12-说几个-zookeeper-常用的命令",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-12-说几个-zookeeper-常用的命令","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.12. 说几个 zookeeper 常用的命令")],-1),Te=(0,s._)("p",null,"常用命令:ls get set create delete 等.",-1),Pe=(0,s._)("h2",{id:"_1-13-zookeeper-是如何保证事务的顺序一致性的",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-13-zookeeper-是如何保证事务的顺序一致性的","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.13. zookeeper 是如何保证事务的顺序一致性的?")],-1),Re=(0,s._)("p",null,"zookeeper 采用了全局递增的事务 Id 来标识,所有的 proposal(提议)都在被提出的时 候加上了 zxid,zxid 实际上是一个 64 位的数字,高 32 位是 epoch 用来标识 leader 周期,如果有新的 leader 产生出来,epoch 会自增,低 32 位用来递增计数.当新产生 proposal 的时候,会依据数据库的两阶段过程,首先会向其他 的 server 发出事务执行请求,如果超过半数的机器都能执行并且能够成功,那么就会开始 执行.",-1),je=(0,s._)("h2",{id:"_1-14-注册中心的作用了解么",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-14-注册中心的作用了解么","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.14. 注册中心的作用了解么?")],-1),Ae=(0,s._)("p",null,"注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者和消费者只在启动时与注册中心交互.",-1),He=(0,s._)("h2",{id:"_1-15-服务提供者宕机后-注册中心会做什么",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-15-服务提供者宕机后-注册中心会做什么","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.15. 服务提供者宕机后,注册中心会做什么?")],-1),Me=(0,s._)("p",null,"注册中心会立即推送事件通知消费者.",-1),De=(0,s._)("h2",{id:"_1-16-监控中心的作用呢",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-16-监控中心的作用呢","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.16. 监控中心的作用呢?")],-1),Be=(0,s._)("p",null,"监控中心负责统计各服务调用次数,调用时间等.",-1),Fe=(0,s._)("h2",{id:"_1-17-注册中心和监控中心都宕机的话-服务都会挂掉吗",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-17-注册中心和监控中心都宕机的话-服务都会挂掉吗","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.17. 注册中心和监控中心都宕机的话,服务都会挂掉吗?")],-1),We=(0,s._)("p",null,"不会.两者都宕机也不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表.注册中心和监控中心都是可选的,服务消费者可以直连服务提供者.",-1),Ce={},Qe=(0,a(3744).Z)(Ce,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[c,u,d,k,b,h,m,U,g,v,z,f,Z,x,K,S,w,y,L,E,I,O,N,T,P,R,j,A,H,M,D,B,F,W,C,Q,V,G,Y,q,J,X,$,ee,ne,ae,se,le,re,oe,te,pe,_e,ie,ce,ue,de,ke,be,he,me,Ue,ge,ve,ze,fe,Ze,xe,Ke,Se,we,ye,Le,Ee,Ie,Oe,Ne,Te,Pe,Re,je,Ae,He,Me,De,Be,Fe,We],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},7330:(e,n,a)=>{e.exports=a.p+"assets/img/1640317470733.ba98f403.png"},2754:(e,n,a)=>{e.exports=a.p+"assets/img/1640318161952.c0f3c777.png"},3365:(e,n,a)=>{e.exports=a.p+"assets/img/1640318336770.4daed200.png"},447:(e,n,a)=>{e.exports=a.p+"assets/img/1646269747842.9f6d5c36.png"},6935:(e,n,a)=>{e.exports=a.p+"assets/img/1646269785183.13730d03.png"},8722:(e,n,a)=>{e.exports=a.p+"assets/img/1646538625060.29b179db.png"},1831:(e,n,a)=>{e.exports=a.p+"assets/img/1646539057747.f0383a7d.png"}}]);