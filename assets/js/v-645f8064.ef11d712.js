"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[709],{3543:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-645f8064",path:"/java/multithreadingadvanced.html",title:"1. 多线程-进阶",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 说一说自己对于 synchronized 关键字的了解",slug:"_1-1-说一说自己对于-synchronized-关键字的了解",children:[]},{level:2,title:"1.2. 说说自己是怎么使用 synchronized 关键字",slug:"_1-2-说说自己是怎么使用-synchronized-关键字",children:[{level:3,title:"1.2.1. 修饰实例方法",slug:"_1-2-1-修饰实例方法",children:[]},{level:3,title:"1.2.2. 修饰静态方法",slug:"_1-2-2-修饰静态方法",children:[]},{level:3,title:"1.2.3. 修饰代码块",slug:"_1-2-3-修饰代码块",children:[]}]},{level:2,title:"1.3. synchronized 关键字的具体使用, 双重校验锁实现对象单例(线程安全)",slug:"_1-3-synchronized-关键字的具体使用-双重校验锁实现对象单例-线程安全",children:[]},{level:2,title:"1.4. 构造方法可以使用 synchronized 关键字修饰么?",slug:"_1-4-构造方法可以使用-synchronized-关键字修饰么",children:[]},{level:2,title:"1.5. 为什么要弄一个 CPU 高速缓存呢?",slug:"_1-5-为什么要弄一个-cpu-高速缓存呢",children:[]},{level:2,title:"1.6. 讲一下 JMM(Java 内存模型)",slug:"_1-6-讲一下-jmm-java-内存模型",children:[]},{level:2,title:"1.7. 说说对 volatile 关键字的理解",slug:"_1-7-说说对-volatile-关键字的理解",children:[{level:3,title:"1.7.1. volatile的特性",slug:"_1-7-1-volatile的特性",children:[]}]},{level:2,title:"1.8. 并发编程的三个重要特性",slug:"_1-8-并发编程的三个重要特性",children:[]},{level:2,title:"1.9. 说说 synchronized 关键字和 volatile 关键字的区别",slug:"_1-9-说说-synchronized-关键字和-volatile-关键字的区别",children:[]},{level:2,title:"1.10. ThreadLocal 了解么?",slug:"_1-10-threadlocal-了解么",children:[]},{level:2,title:"1.11. ThreadLocal 内存泄露问题?",slug:"_1-11-threadlocal-内存泄露问题",children:[]},{level:2,title:"1.12. 为什么要用线程池?",slug:"_1-12-为什么要用线程池",children:[{level:3,title:"1.12.1. 使用线程池的好处",slug:"_1-12-1-使用线程池的好处",children:[]}]},{level:2,title:"1.13. 实现 Runnable 接口和 Callable 接口的区别",slug:"_1-13-实现-runnable-接口和-callable-接口的区别",children:[]},{level:2,title:"1.14. 执行 execute() 方法和 submit() 方法的区别是什么呢?",slug:"_1-14-执行-execute-方法和-submit-方法的区别是什么呢",children:[]},{level:2,title:"1.15. 如何创建线程池",slug:"_1-15-如何创建线程池",children:[{level:3,title:"1.15.1. 通过 Executor 框架的工具类 Executors 来实现",slug:"_1-15-1-通过-executor-框架的工具类-executors-来实现",children:[]},{level:3,title:"1.15.2. ThreadPoolExecutor 类分析",slug:"_1-15-2-threadpoolexecutor-类分析",children:[]},{level:3,title:"1.15.3. threadPoolExecutor 构造函数重要参数分析",slug:"_1-15-3-threadpoolexecutor-构造函数重要参数分析",children:[]},{level:3,title:"1.15.4. hreadPoolExecutor 饱和策略",slug:"_1-15-4-hreadpoolexecutor-饱和策略",children:[]},{level:3,title:"1.15.5. 线程池原理分析",slug:"_1-15-5-线程池原理分析",children:[]}]},{level:2,title:"1.16. 介绍一下 Atomic 原子类",slug:"_1-16-介绍一下-atomic-原子类",children:[]},{level:2,title:"1.17. JUC 包中的原子类是哪 4 类?",slug:"_1-17-juc-包中的原子类是哪-4-类",children:[{level:3,title:"1.17.1. 基本类型",slug:"_1-17-1-基本类型",children:[]},{level:3,title:"1.17.2. 数组类型",slug:"_1-17-2-数组类型",children:[]},{level:3,title:"1.17.3. 引用类型",slug:"_1-17-3-引用类型",children:[]},{level:3,title:"1.17.4. 对象的属性修改类型",slug:"_1-17-4-对象的属性修改类型",children:[]}]}],filePathRelative:"java/multithreadingadvanced.md",git:{updatedTime:1642123624e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:6}]}}},7105:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Hn});var e=a(6252),t=a(4880),o=a(4684),c=a(3601),l=a(3251),p=a(9978);const k=(0,e._)("h1",{id:"_1-多线程-进阶",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-多线程-进阶","aria-hidden":"true"},"#"),(0,e.Uk)(" 1. 多线程-进阶")],-1),u=(0,e._)("h2",{id:"_1-1-说一说自己对于-synchronized-关键字的了解",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-1-说一说自己对于-synchronized-关键字的了解","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.1. 说一说自己对于 synchronized 关键字的了解")],-1),_=(0,e._)("p",null,"synchronized 关键字解决的是多线程之间访问资源的同步性, synchronized 关键字可以保证被它修饰的方法或者代码块在任意时刻只有一个线程执行.",-1),r=(0,e._)("h2",{id:"_1-2-说说自己是怎么使用-synchronized-关键字",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-2-说说自己是怎么使用-synchronized-关键字","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.2. 说说自己是怎么使用 synchronized 关键字")],-1),i=(0,e._)("h3",{id:"_1-2-1-修饰实例方法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-2-1-修饰实例方法","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.2.1. 修饰实例方法")],-1),d=(0,e._)("p",null,"作用于实例方法,当前实例加锁,进入同步代码前要获得当前实例的锁;",-1),U=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"implements"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token annotation punctuation"},"@Override"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"run"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"increaseCount"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token class-name"},"System"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("out"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"currentThread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getName"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token string"},'":"'),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("count"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(" args"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throws"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(" syncTest1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"thread1"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"thread2"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread2"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),m=(0,e._)("h3",{id:"_1-2-2-修饰静态方法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-2-2-修饰静态方法","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.2.2. 修饰静态方法")],-1),b=(0,e._)("p",null,"作用于静态方法,因为静态成员不属于任何一个实例对象, 是类成员, 所以是给当前类加锁,进去同步代码前要获得当前类对象的锁;",-1),h=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"implements"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" count "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token annotation punctuation"},"@Override"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"run"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"increaseCount"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"increaseCount"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token class-name"},"System"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("out"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"currentThread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getName"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'":"'),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" count"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"try"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"catch"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(" e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                e"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"printStackTrace"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(" args"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throws"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(" syncTest1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(" syncTest2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"thread1"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"thread2"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread2"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br")])],-1),y=(0,e._)("h3",{id:"_1-2-3-修饰代码块",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-2-3-修饰代码块","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.2.3. 修饰代码块")],-1),w=(0,e._)("p",null,"作用于代码块,对指定对象/类加锁,进入同步代码前要获得指定对象/类的锁.",-1),f=(0,e._)("ol",null,[(0,e._)("li",null,"synchronized(this|object)表示进入同步代码库前要获得给定对象的锁."),(0,e._)("li",null,"synchronized(类.class)表示进入同步代码前要获得当前 class 的锁")],-1),g=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"implements"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//共享资源变量"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" count "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"byte"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(" mBytes "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"byte"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token annotation punctuation"},"@Override"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"run"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"increaseCount"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"increaseCount"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//  this,指的就是调用这个方法的实例对象"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token class-name"},"System"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("out"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"currentThread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getName"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'":"'),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" count"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"try"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"catch"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(" e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    e"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"printStackTrace"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(" args"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throws"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(" syncTest1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e.Uk)(" syncTest2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SyncTest"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"thread1"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" thread2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("syncTest2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"thread2"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        thread2"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br")])],-1),v=(0,e._)("h2",{id:"_1-3-synchronized-关键字的具体使用-双重校验锁实现对象单例-线程安全",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-3-synchronized-关键字的具体使用-双重校验锁实现对象单例-线程安全","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.3. synchronized 关键字的具体使用, 双重校验锁实现对象单例(线程安全)")],-1),x=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"volatile"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)(" uniqueInstance"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"getUniqueInstance"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n     "),(0,e._)("span",{class:"token comment"},"//先判断对象是否已经实例过,没有实例化过才进入加锁代码"),(0,e.Uk)("\n       "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("uniqueInstance "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n           "),(0,e._)("span",{class:"token comment"},"//类对象加锁"),(0,e.Uk)("\n           "),(0,e._)("span",{class:"token keyword"},"synchronized"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token keyword"},"class"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n               "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("uniqueInstance "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                   uniqueInstance "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Singleton"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n               "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n           "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n       "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" uniqueInstance"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br")])],-1),T=(0,e._)("p",null,"uniqueInstance 采用 volatile 关键字修饰也是很有必要的,uniqueInstance = new Singleton (); 这段代码其实是分为三步执行:",-1),S=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("p",null,"为 uniqueInstance 分配内存空间")]),(0,e._)("li",null,[(0,e._)("p",null,"初始化 uniqueInstance")]),(0,e._)("li",null,[(0,e._)("p",null,"将 uniqueInstance 指向分配的内存地址"),(0,e._)("p",null,"由于 JVM 具有指令重排的特性,执行顺序有可能变成 1->3->2.在多线程环境下会导致一个线程获得还没有初始化的实例.例如,线程 T1 执行了 1 和 3,此时 T2 调用 getUniqueInstance () 发现 uniqueInstance 不为空,因此返回 uniqueInstance,但此时 uniqueInstance 还未被初始化.")])],-1),z=(0,e._)("h2",{id:"_1-4-构造方法可以使用-synchronized-关键字修饰么",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-4-构造方法可以使用-synchronized-关键字修饰么","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.4. 构造方法可以使用 synchronized 关键字修饰么?")],-1),P=(0,e._)("p",null,"构造方法不能使用 synchronized 关键字修饰. 构造方法本身就属于线程安全的",-1),j=(0,e._)("h2",{id:"_1-5-为什么要弄一个-cpu-高速缓存呢",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-为什么要弄一个-cpu-高速缓存呢","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5. 为什么要弄一个 CPU 高速缓存呢?")],-1),E=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"picture 6"})],-1),I=(0,e._)("p",null,"CPU 缓存则是为了解决 CPU 处理速度和内存处理速度不对等的问题.",-1),A=(0,e._)("p",null,"先复制一份数据到 CPUCache 中, 当 CPU 需要用到的时候就可以直接从 CPUCache 中读取数据, 当运算完成后, 再将运算得到的数据写回 MainMemory 中",-1),C=(0,e._)("h2",{id:"_1-6-讲一下-jmm-java-内存模型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-6-讲一下-jmm-java-内存模型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.6. 讲一下 JMM(Java 内存模型)")],-1),R=(0,e._)("p",null,[(0,e._)("img",{src:o,alt:"picture 7"})],-1),F=(0,e._)("p",null,"在当前的 Java 内存模型下, 线程可以把变量保存本地内存(比如寄存器)中, 而不是直接在主存中进行读写. 这就可能造成一个线程在主存中修改了一个变量的值, 而另外一个线程还继续使用它在寄存器中的变量值的拷贝, 造成数据的不一致. 要解决这个问题, 就需要把变量声明为 volatile, 这就指示 JVM, 这个变量是共享且不稳定的, 每次使用它都到主存中进行读取.",-1),N=(0,e._)("p",null,"所以, volatile 关键字除了防止 JVM 的指令重排, 还有一个重要的作用就是保证变量的可见性.",-1),L=(0,e._)("blockquote",null,[(0,e._)("p",null,"寄存器是 CPU 内部用来存放数据的一些小型存储区域,用来暂时存放参与运算的数据和运算结果")],-1),M=(0,e._)("h2",{id:"_1-7-说说对-volatile-关键字的理解",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-7-说说对-volatile-关键字的理解","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.7. 说说对 volatile 关键字的理解")],-1),q=(0,e._)("p",null,[(0,e._)("code",null,"public volatile int counter = 0;")],-1),O=(0,e._)("h3",{id:"_1-7-1-volatile的特性",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-7-1-volatile的特性","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.7.1. volatile的特性")],-1),J=(0,e._)("ol",null,[(0,e._)("li",null,"保证了不同线程对该变量操作的内存可见性;"),(0,e._)("li",null,"禁止指令重排序")],-1),Q=(0,e._)("h2",{id:"_1-8-并发编程的三个重要特性",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-8-并发编程的三个重要特性","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.8. 并发编程的三个重要特性")],-1),D=(0,e._)("ol",null,[(0,e._)("li",null,"原子性: 在一次或者多次操作时,要么所有操作都被执行,要么所有操作都不执行. synchronized 可以保证代码片段的原子性."),(0,e._)("li",null,"可见性: 当一个线程对共享变量进行了修改, 那么另外的线程都是立即可以看到修改后的最新值. volatile 关键字可以保证共享变量的可见性."),(0,e._)("li",null,"有序性: 代码在执行的过程中的先后顺序, 为了提高程序的运行效率,可能在编译期和运行期会对代码指令进行一定的优化,不会百分之百的保证代码的执行顺序严格按照编写代码中的顺序执行,但也不是随意进行重排序,它会保证程序的最终运算结果是编码时所期望的.这种情况被称之为指令重排. volatile 关键字可以禁止指令进行重排优化")],-1),V=(0,e._)("h2",{id:"_1-9-说说-synchronized-关键字和-volatile-关键字的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-9-说说-synchronized-关键字和-volatile-关键字的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.9. 说说 synchronized 关键字和 volatile 关键字的区别")],-1),W=(0,e._)("p",null,"synchronized 关键字和 volatile 关键字是两个互补的存在, 而不是对立的存在!",-1),B=(0,e._)("ol",null,[(0,e._)("li",null,"volatile 关键字是线程同步的轻量级实现, 所以 volatile 性能肯定比 synchronized 关键字要好. 但是 volatile 关键字只能用于变量而 synchronized 关键字可以修饰方法以及代码块."),(0,e._)("li",null,"volatile 关键字能保证数据的可见性, 但不能保证数据的原子性. synchronized 关键字两者都能保证."),(0,e._)("li",null,"volatile 关键字主要用于解决变量在多个线程之间的可见性, 而 synchronized 关键字解决的是多个线程之间访问资源的同步性.")],-1),H=(0,e._)("h2",{id:"_1-10-threadlocal-了解么",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-10-threadlocal-了解么","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.10. ThreadLocal 了解么?")],-1),G=(0,e._)("p",null,"通常情况下, 创建的变量是可以被任何一个线程访问并修改的. 如果想实现每一个线程都有自己的专属本地变量可以使用 ThreadLocal",-1),X=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token namespace"},[(0,e.Uk)("java"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("text"),(0,e._)("span",{class:"token punctuation"},".")]),(0,e._)("span",{class:"token class-name"},"SimpleDateFormat"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token namespace"},[(0,e.Uk)("java"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("util"),(0,e._)("span",{class:"token punctuation"},".")]),(0,e._)("span",{class:"token class-name"},"Random"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ThreadLocalExample"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"implements"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\n     "),(0,e._)("span",{class:"token comment"},"// SimpleDateFormat 不是线程安全的, 所以每个线程都要有自己独立的副本"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"final"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ThreadLocal"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token class-name"},"SimpleDateFormat"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)(" formatter "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ThreadLocal"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"withInitial"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SimpleDateFormat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"yyyyMMdd HHmm"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"String"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(" args"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throws"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"ThreadLocalExample"),(0,e.Uk)(" obj "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ThreadLocalExample"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"<"),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e.Uk)(" t "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("obj"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'""'),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Random"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"nextInt"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            t"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"start"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token annotation punctuation"},"@Override"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"run"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token class-name"},"System"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("out"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"Thread Name= "'),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"currentThread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getName"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token string"},'" default Formatter = "'),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("formatter"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"get"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"toPattern"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"try"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Random"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"nextInt"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"catch"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"InterruptedException"),(0,e.Uk)(" e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            e"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"printStackTrace"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"//formatter pattern is changed here by thread, but it won't reflect to other threads"),(0,e.Uk)("\n        formatter"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"set"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"SimpleDateFormat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token class-name"},"System"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("out"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"Thread Name= "'),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token class-name"},"Thread"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"currentThread"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getName"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token string"},'" formatter = "'),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("formatter"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"get"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"toPattern"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br")])],-1),Y=(0,e._)("h2",{id:"_1-11-threadlocal-内存泄露问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-11-threadlocal-内存泄露问题","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.11. ThreadLocal 内存泄露问题?")],-1),Z=(0,e._)("p",null,"ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用, 而 value 是强引用. 所以, 如果 ThreadLocal 没有被外部强引用的情况下, 在垃圾回收的时候, key 会被清理掉, 而 value 不会被清理掉. 这样一来, ThreadLocalMap 中就会出现 key 为 null 的 Entry. 假如我们不做任何措施的话, value 永远无法被 GC 回收, 这个时候就可能会产生内存泄露. ThreadLocalMap 实现中已经考虑了这种情况, 在调用 set(), get(), remove()方法的时候, 会清理掉 key 为 null 的记录.",-1),K=(0,e._)("h2",{id:"_1-12-为什么要用线程池",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-12-为什么要用线程池","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.12. 为什么要用线程池?")],-1),$=(0,e._)("p",null,"池化技术的思想主要是为了减少每次获取资源的消耗, 提高对资源的利用率. 线程池, 数据库连接池, Http 连接池等等都是对这个思想的应用.",-1),nn=(0,e._)("h3",{id:"_1-12-1-使用线程池的好处",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-12-1-使用线程池的好处","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.12.1. 使用线程池的好处")],-1),sn=(0,e._)("ol",null,[(0,e._)("li",null,"降低资源消耗. 通过重复利用已创建的线程降低线程创建和销毁造成的消耗."),(0,e._)("li",null,"提高响应速度. 当任务到达时, 任务可以不需要的等到线程创建就能立即执行."),(0,e._)("li",null,"提高线程的可管理性. 线程是稀缺资源, 如果无限制的创建, 不仅会消耗系统资源, 还会降低系统的稳定性, 使用线程池可以进行统一的分配, 调优和监控.")],-1),an=(0,e._)("h2",{id:"_1-13-实现-runnable-接口和-callable-接口的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-13-实现-runnable-接口和-callable-接口的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.13. 实现 Runnable 接口和 Callable 接口的区别")],-1),en=(0,e._)("p",null,"Runnable 接口不会返回结果或抛出检查异常, 但是 Callable 接口可以.",-1),tn=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// Runnable. java"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token annotation punctuation"},"@FunctionalInterface"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"interface"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// *被线程执行, 没有返回值也无法抛出异常"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"abstract"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"run"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// Callable. java"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token annotation punctuation"},"@FunctionalInterface"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"interface"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Callable"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token class-name"},"V"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 计算结果, 或在无法这样做时抛出异常."),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// @return计算得出的结果"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// @throws如果无法计算结果, 则抛出异常"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token class-name"},"V"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"call"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throws"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Exception"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br")])],-1),on=(0,e._)("p",null,"工具类 Executors 可以实现将 Runnable 对象转换成 Callable 对象.",-1),cn=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token class-name"},"Executors"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"callable"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(" task"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token class-name"},"Executors"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"callable"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(" task"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Object"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),ln=(0,e._)("h2",{id:"_1-14-执行-execute-方法和-submit-方法的区别是什么呢",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-14-执行-execute-方法和-submit-方法的区别是什么呢","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.14. 执行 execute() 方法和 submit() 方法的区别是什么呢?")],-1),pn=(0,e._)("ol",null,[(0,e._)("li",null,"execute()方法用于提交不需要返回值的任务, 所以无法判断任务是否被线程池执行成功与否;"),(0,e._)("li",null,"submit()方法用于提交需要返回值的任务. 线程池会返回一个 Future 类型的对象, 通过这个 Future 对象可以判断任务是否执行成功, 并且可以通过 Future 的 get()方法来获取返回值, get()方法会阻塞当前线程直到任务完成, 而使用 get(longtimeout, TimeUnitunit)方法则会阻塞当前线程一段时间后立即返回, 这时候有可能任务没有执行完.")],-1),kn=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// submit"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Future"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token operator"},"?"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"submit"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(" task"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("task "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NullPointerException"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token class-name"},"RunnableFuture"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token class-name"},"Void"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)(" ftask "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"newTaskFor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("task"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"execute"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("ftask"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" ftask"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// execute"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"execute"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(" command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br")])],-1),un=(0,e._)("h2",{id:"_1-15-如何创建线程池",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-如何创建线程池","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15. 如何创建线程池")],-1),_n=(0,e._)("p",null,[(0,e.Uk)("<<阿里巴巴 Java 开发手册>> 中强制线程池不允许使用 Executors 去创建, 而是通过 ThreadPoolExecutor 的方式, 这样的处理方式让写的同学更加明确线程池的运行规则, 规避资源耗尽的风险 "),(0,e._)("img",{src:c,alt:"picture 8"})],-1),rn=(0,e._)("h3",{id:"_1-15-1-通过-executor-框架的工具类-executors-来实现",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-1-通过-executor-框架的工具类-executors-来实现","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.1. 通过 Executor 框架的工具类 Executors 来实现")],-1),dn=(0,e._)("p",null,[(0,e._)("img",{src:l,alt:"picture 9"})],-1),Un=(0,e._)("ol",null,[(0,e._)("li",null,"FixedThreadPool: 该方法返回一个固定线程数量的线程池. 该线程池中的线程数量始终不变. 当有一个新的任务提交时, 线程池中若有空闲线程, 则立即执行. 若没有, 则新的任务会被暂存在一个任务队列中, 待有线程空闲时, 便处理在任务队列中的任务."),(0,e._)("li",null,"SingleThreadExecutor: 方法返回一个只有一个线程的线程池. 若多余一个任务被提交到该线程池, 任务会被保存在一个任务队列中, 待线程空闲, 按先入先出的顺序执行队列中的任务."),(0,e._)("li",null,"CachedThreadPool: 该方法返回一个可根据实际情况调整线程数量的线程池. 线程池的线程数量不确定, 但若有空闲线程可以复用, 则会优先使用可复用的线程. 若所有线程均在工作, 又有新的任务提交, 则会创建新的线程处理任务. 所有线程在当前任务执行完毕后, 将返回线程池进行复用.")],-1),mn=(0,e._)("h4",{id:"_1-15-1-1-executors-返回线程池对象的弊端",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-1-1-executors-返回线程池对象的弊端","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.1.1. Executors 返回线程池对象的弊端")],-1),bn=(0,e._)("ol",null,[(0,e._)("li",null,"FixedThreadPool 和 SingleThreadExecutor: 允许请求的队列长度为 Integer. MAX_VALUE, 可能堆积大量的请求, 从而导致 OOM."),(0,e._)("li",null,"CachedThreadPool 和 ScheduledThreadPool: 允许创建的线程数量为 Integer. MAX_VALUE, 可能会创建大量线程, 从而导致 OOM.")],-1),hn=(0,e._)("h3",{id:"_1-15-2-threadpoolexecutor-类分析",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-2-threadpoolexecutor-类分析","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.2. ThreadPoolExecutor 类分析")],-1),yn=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token doc-comment comment"},"/**\n * 用给定的初始参数创建一个新的ThreadPoolExecutor.\n */"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ThreadPoolExecutor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" corePoolSize"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" maximumPoolSize"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token keyword"},"long"),(0,e.Uk)(" keepAliveTime"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token class-name"},"TimeUnit"),(0,e.Uk)(" unit"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token class-name"},"BlockingQueue"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)(" workQueue"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token class-name"},"ThreadFactory"),(0,e.Uk)(" threadFactory"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      "),(0,e._)("span",{class:"token class-name"},"RejectedExecutionHandler"),(0,e.Uk)(" handler"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("corePoolSize "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)("\n        maximumPoolSize "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)("\n        maximumPoolSize "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" corePoolSize "),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)("\n        keepAliveTime "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"IllegalArgumentException"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("workQueue "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" threadFactory "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" handler "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NullPointerException"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("corePoolSize "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" corePoolSize"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("maximumPoolSize "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" maximumPoolSize"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("workQueue "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" workQueue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("keepAliveTime "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" unit"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"toNanos"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("keepAliveTime"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("threadFactory "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" threadFactory"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("handler "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" handler"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br")])],-1),wn=(0,e._)("h3",{id:"_1-15-3-threadpoolexecutor-构造函数重要参数分析",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-3-threadpoolexecutor-构造函数重要参数分析","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.3. threadPoolExecutor 构造函数重要参数分析")],-1),fn=(0,e._)("h4",{id:"_1-15-3-1-threadpoolexecutor-3-个最重要的参数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-3-1-threadpoolexecutor-3-个最重要的参数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.3.1. ThreadPoolExecutor 3 个最重要的参数")],-1),gn=(0,e._)("ol",null,[(0,e._)("li",null,"corePoolSize: 核心线程数线程数定义了最小可以同时运行的线程数量."),(0,e._)("li",null,"maximumPoolSize: 当队列中存放的任务达到队列容量的时候, 当前可以同时运行的线程数量变为最大线程数."),(0,e._)("li",null,"workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数, 如果达到的话, 新任务就会被存放在队列中.")],-1),vn=(0,e._)("h4",{id:"_1-15-3-2-threadpoolexecutor-其他常见参数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-3-2-threadpoolexecutor-其他常见参数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.3.2. ThreadPoolExecutor 其他常见参数")],-1),xn=(0,e._)("ol",null,[(0,e._)("li",null,"keepAliveTime: 当线程池中的线程数量大于 corePoolSize 的时候, 如果这时没有新的任务提交, 核心线程外的线程不会立即销毁, 而是会等待, 直到等待的时间超过了 keepAliveTime 才会被回收销毁;"),(0,e._)("li",null,"unit: keepAliveTime 参数的时间单位."),(0,e._)("li",null,"threadFactory: executor 创建新线程的时候会用到."),(0,e._)("li",null,"handler: 饱和策略. 关于饱和策略下面单独介绍一下.")],-1),Tn=(0,e._)("h3",{id:"_1-15-4-hreadpoolexecutor-饱和策略",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-4-hreadpoolexecutor-饱和策略","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.4. hreadPoolExecutor 饱和策略")],-1),Sn=(0,e._)("p",null,"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时, ThreadPoolTaskExecutor 可以定义的一些策略:",-1),zn=(0,e._)("ol",null,[(0,e._)("li",null,"ThreadPoolExecutor.AbortPolicy: 抛出 RejectedExecutionException 来拒绝新任务的处理."),(0,e._)("li",null,"ThreadPoolExecutor.CallerRunsPolicy: 调用执行自己的线程运行任务, 也就是直接在调用 execute 方法的线程中运行(run)被拒绝的任务, 如果执行程序已关闭, 则会丢弃该任务. 因此这种策略会降低对于新任务提交速度, 影响程序的整体性能. 如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话, 你可以选择这个策略."),(0,e._)("li",null,"ThreadPoolExecutor.DiscardPolicy: 不处理新任务, 直接丢弃掉."),(0,e._)("li",null,"ThreadPoolExecutor.DiscardOldestPolicy: 此策略将丢弃最早的未处理的任务请求.")],-1),Pn=(0,e._)("h3",{id:"_1-15-5-线程池原理分析",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-5-线程池原理分析","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.5. 线程池原理分析")],-1),jn=(0,e._)("p",null,[(0,e._)("img",{src:p,alt:"picture 10"})],-1),En=(0,e._)("blockquote",null,[(0,e._)("p",null,"比如: 我们在代码中模拟了 10 个任务, 我们配置的核心线程数为 5 , 等待队列容量为 100 , 所以每次只可能存在 5 个任务同时执行, 剩下的 5 个任务会被放到等待队列中去. 当前的 5 个任务中如果有任务被执行完了, 线程池就会去拿新的任务执行")],-1),In=(0,e._)("p",null,"重点分析一下 execute 方法, 一般使用 executor.execute(worker)来提交一个任务到线程池中",-1),An=(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"final"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"AtomicInteger"),(0,e.Uk)(" ctl "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"AtomicInteger"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"ctlOf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("RUNNING"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"workerCountOf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" c"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" c "),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)(" CAPACITY"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"final"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"BlockingQueue"),(0,e._)("span",{class:"token generics"},[(0,e._)("span",{class:"token punctuation"},"<"),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e._)("span",{class:"token punctuation"},">")]),(0,e.Uk)(" workQueue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"execute"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token class-name"},"Runnable"),(0,e.Uk)(" command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 如果任务为null, 则抛出异常."),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NullPointerException"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// ctl 中保存的线程池当前的一些状态信息"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" c "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" ctl"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"get"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token comment"},"//  下面会涉及到 3 步 操作"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 1.首先判断当前线程池中执行的任务数量是否小于 corePoolSize"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 如果小于的话, 通过addWorker(command, true)新建一个线程, 并将任务(command)添加到该线程中; 然后, 启动该线程从而执行任务."),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"workerCountOf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("c"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" corePoolSize"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"addWorker"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        c "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" ctl"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"get"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 2.如果当前执行的任务数量大于等于 corePoolSize 的时候就会走到这里"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 通过 isRunning 方法判断线程池状态, 线程池处于 RUNNING 状态才会被并且队列可以加入任务, 该任务才会被加入进去"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"isRunning"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("c"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" workQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"offer"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" recheck "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" ctl"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"get"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 再次获取线程池状态, 如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务, 并尝试判断线程是否全部执行完毕. 同时执行拒绝策略."),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token function"},"isRunning"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("recheck"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"remove"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 如果当前线程池为空就新创建一个线程并执行."),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"workerCountOf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("recheck"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"addWorker"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//3. 通过addWorker(command, false)新建一个线程, 并将任务(command)添加到该线程中; 然后, 启动该线程从而执行任务."),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//如果addWorker(command, false)执行失败, 则通过reject()执行相应的拒绝策略的内容."),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token function"},"addWorker"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("command"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br")])],-1),Cn=(0,e._)("h2",{id:"_1-16-介绍一下-atomic-原子类",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-16-介绍一下-atomic-原子类","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.16. 介绍一下 Atomic 原子类")],-1),Rn=(0,e._)("p",null,"原子类是具有原子操作特征的类. Atomic 是指一个操作是不可中断的. 即使是在多个线程一起执行的时候, 一个操作一旦开始, 就不会被其他线程干扰.",-1),Fn=(0,e._)("h2",{id:"_1-17-juc-包中的原子类是哪-4-类",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-juc-包中的原子类是哪-4-类","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17. JUC 包中的原子类是哪 4 类?")],-1),Nn=(0,e._)("h3",{id:"_1-17-1-基本类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-1-基本类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.1. 基本类型")],-1),Ln=(0,e._)("p",null,"使用原子的方式更新基本类型",-1),Mn=(0,e._)("ol",null,[(0,e._)("li",null,"AtomicInteger: 整形原子类"),(0,e._)("li",null,"AtomicLong: 长整型原子类"),(0,e._)("li",null,"AtomicBoolean: 布尔型原子类")],-1),qn=(0,e._)("h3",{id:"_1-17-2-数组类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-2-数组类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.2. 数组类型")],-1),On=(0,e._)("p",null,"使用原子的方式更新数组里的某个元素",-1),Jn=(0,e._)("ol",null,[(0,e._)("li",null,"AtomicIntegerArray: 整形数组原子类"),(0,e._)("li",null,"AtomicLongArray: 长整形数组原子类"),(0,e._)("li",null,"AtomicReferenceArray: 引用类型数组原子类")],-1),Qn=(0,e._)("h3",{id:"_1-17-3-引用类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-3-引用类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.3. 引用类型")],-1),Dn=(0,e._)("ol",null,[(0,e._)("li",null,"AtomicReference: 引用类型原子类"),(0,e._)("li",null,"AtomicStampedReference: 原子更新带有版本号的引用类型. 该类将整数值与引用关联起来, 可用于解决原子的更新数据和数据的版本号, 可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题."),(0,e._)("li",null,"AtomicMarkableReference: 原子更新带有标记位的引用类型")],-1),Vn=(0,e._)("h3",{id:"_1-17-4-对象的属性修改类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-4-对象的属性修改类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.4. 对象的属性修改类型")],-1),Wn=(0,e._)("ol",null,[(0,e._)("li",null,"AtomicIntegerFieldUpdater: 原子更新整形字段的更新器"),(0,e._)("li",null,"AtomicLongFieldUpdater: 原子更新长整形字段的更新器"),(0,e._)("li",null,"AtomicReferenceFieldUpdater: 原子更新引用类型字段的更新器")],-1),Bn={},Hn=(0,a(3744).Z)(Bn,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[k,u,_,r,i,d,U,m,b,h,y,w,f,g,v,x,T,S,z,P,j,E,I,A,C,R,F,N,L,M,q,O,J,Q,D,V,W,B,H,G,X,Y,Z,K,$,nn,sn,an,en,tn,on,cn,ln,pn,kn,un,_n,rn,dn,Un,mn,bn,hn,yn,wn,fn,gn,vn,xn,Tn,Sn,zn,Pn,jn,En,In,An,Cn,Rn,Fn,Nn,Ln,Mn,qn,On,Jn,Qn,Dn,Vn,Wn],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},4880:(n,s,a)=>{n.exports=a.p+"assets/img/1641168803025.6c136539.png"},4684:(n,s,a)=>{n.exports=a.p+"assets/img/1641168839088.f0282cf5.png"},3601:(n,s,a)=>{n.exports=a.p+"assets/img/1641168855075.ac8b8f9e.png"},3251:(n,s,a)=>{n.exports=a.p+"assets/img/1641168869626.ab7d48fa.png"},9978:(n,s,a)=>{n.exports=a.p+"assets/img/1641168885950.610631fe.png"}}]);