"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[609],{2578:(e,l,t)=>{t.r(l),t.d(l,{data:()=>a});const a={key:"v-0d490936",path:"/mq/summary.html",title:"1. summary",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 为什么要用消息队列",slug:"_1-1-为什么要用消息队列",children:[{level:3,title:"1.1.1. 异步",slug:"_1-1-1-异步",children:[]},{level:3,title:"1.1.2. 解耦",slug:"_1-1-2-解耦",children:[]},{level:3,title:"1.1.3. 削峰(限流)",slug:"_1-1-3-削峰-限流",children:[]},{level:3,title:"1.1.4. 使用消息队列带来的一些问题",slug:"_1-1-4-使用消息队列带来的一些问题",children:[]}]},{level:2,title:"1.2. JMS VS AMQP",slug:"_1-2-jms-vs-amqp",children:[{level:3,title:"1.2.1. JMS 简介",slug:"_1-2-1-jms-简介",children:[]},{level:3,title:"1.2.2. JMS 两种消息模型",slug:"_1-2-2-jms-两种消息模型",children:[]},{level:3,title:"1.2.3. JMS 五种不同的消息正文格式",slug:"_1-2-3-jms-五种不同的消息正文格式",children:[]},{level:3,title:"1.2.4. AMQP",slug:"_1-2-4-amqp",children:[]},{level:3,title:"1.2.5. AMQP 模型的几大组件?",slug:"_1-2-5-amqp-模型的几大组件",children:[]},{level:3,title:"1.2.6. JMS vs AMQP",slug:"_1-2-6-jms-vs-amqp",children:[]}]},{level:2,title:"1.3. 常见的消息队列对比",slug:"_1-3-常见的消息队列对比",children:[]},{level:2,title:"1.4. MQ如何保证分布式事务的最终一致性",slug:"_1-4-mq如何保证分布式事务的最终一致性",children:[{level:3,title:"1.4.1. MQ中要保证事务的最终一致性,需要做到",slug:"_1-4-1-mq中要保证事务的最终一致性-需要做到",children:[]}]},{level:2,title:"1.5. 设计一个高并发的消息中间件",slug:"_1-5-设计一个高并发的消息中间件",children:[{level:3,title:"1.5.1. 生产者消费者模型",slug:"_1-5-1-生产者消费者模型",children:[]},{level:3,title:"1.5.2. 数据的高可用",slug:"_1-5-2-数据的高可用",children:[]},{level:3,title:"1.5.3. 消息数据不丢失",slug:"_1-5-3-消息数据不丢失",children:[]}]}],filePathRelative:"mq/summary.md",git:{updatedTime:1649400266e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:15}]}}},4074:(e,l,t)=>{t.r(l),t.d(l,{default:()=>ce});var a=t(6252),n=t(5837),_=t(603),i=t(2162),r=t(3301);const d=(0,a._)("h1",{id:"_1-summary",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-summary","aria-hidden":"true"},"#"),(0,a.Uk)(" 1. summary")],-1),s=(0,a._)("h2",{id:"_1-1-为什么要用消息队列",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-为什么要用消息队列","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1. 为什么要用消息队列")],-1),u=(0,a._)("p",null,[(0,a._)("img",{src:"https://raw.githubusercontent.com/kuro-tsuchi/my-picgo/master/md/img/20220406181848.png",alt:"20220406181848"})],-1),h=(0,a._)("p",null,"消息队列是一个存放消息的容器. 使用消息队列主要是为了通过异步处理提高系统性能和削峰,降低系统耦合性.",-1),c=(0,a._)("p",null,"队列 Queue 是一种先进先出的数据结构,所以消费消息时也是按照顺序来消费.",-1),g=(0,a._)("h3",{id:"_1-1-1-异步",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-1-异步","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.1. 异步")],-1),p=(0,a._)("p",null,"通过异步处理可以提高系统性能,减少响应时间, 将用户的请求数据存储到消息队列之后就立即返回结果. 随后,系统再对消息队列中的消息进行消费.",-1),m=(0,a._)("p",null,"e.g. 用户的充值数据写入消息队列, 充值业务处理完后, 异步发送邮件或短信或站内信通知用户成功",-1),o=(0,a._)("h3",{id:"_1-1-2-解耦",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-2-解耦","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.2. 解耦")],-1),M=(0,a._)("p",null,[(0,a._)("img",{src:n,alt:"picture 2"})],-1),f=(0,a._)("p",null,"生产者和消费者之间没有直接耦合,生产者将消息发送至分布式消息队列即结束对消息的处理,消费者从分布式消息队列获取该消息后进行后续处理.",-1),b=(0,a._)("h4",{id:"_1-1-2-1-作用",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-2-1-作用","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.2.1. 作用")],-1),x=(0,a._)("p",null,"服务之间进行解耦,可以减少服务之间的影响,提高系统的稳定性和可扩展性. 另外,解耦之后可以实现数据分发.生产者发送一个消息后,可以由多个消费者来处理.",-1),k=(0,a._)("h3",{id:"_1-1-3-削峰-限流",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-3-削峰-限流","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.3. 削峰(限流)")],-1),v=(0,a._)("p",null,"将短时间高并发产生的事务消息存储在消息队列中, 后端服务再慢慢去消费这些消息, 避免高并发把后端服务打垮.",-1),Q=(0,a._)("blockquote",null,[(0,a._)("p",null,"在电子商务一些秒杀,促销活动中,合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击.")],-1),y=(0,a._)("h3",{id:"_1-1-4-使用消息队列带来的一些问题",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-1-4-使用消息队列带来的一些问题","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.1.4. 使用消息队列带来的一些问题")],-1),A=(0,a._)("ol",null,[(0,a._)("li",null,"系统可用性降低:需要去考虑消息丢失或者说消息队列宕机, 整个业务都会受到影响"),(0,a._)("li",null,"系统复杂性提高:需要考虑重复消费,消息丢失的情况,保证消息的顺序等问题"),(0,a._)("li",null,"系统一致性问题:消息的多个消费者如果没有正确消费消息就会导致数据不一致的情况")],-1),S=(0,a._)("h2",{id:"_1-2-jms-vs-amqp",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-jms-vs-amqp","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2. JMS VS AMQP")],-1),J=(0,a._)("h3",{id:"_1-2-1-jms-简介",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-1-jms-简介","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.1. JMS 简介")],-1),U=(0,a._)("p",null,"JMS(JAVA Message Service, java 消息服务),JMS 的客户端之间可以通过 JMS 进行异步的 消息传输.",-1),P=(0,a._)("p",null,"JMS 是一个消息服务的标准/规范,允许应用程序组件基于 JavaEE 平台创建,发送,接收和读 取消息.它使分布式通信耦合度更低,消息服务更加可靠以及异步性.",-1),q=(0,a._)("h3",{id:"_1-2-2-jms-两种消息模型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-2-jms-两种消息模型","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.2. JMS 两种消息模型")],-1),j=(0,a._)("h4",{id:"_1-2-2-1-点到点-p2p-模型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-2-1-点到点-p2p-模型","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.2.1. 点到点 (P2P) 模型")],-1),R=(0,a._)("p",null,[(0,a._)("img",{src:_,alt:"picture 5"})],-1),E=(0,a._)("p",null,"使用队列 (Queue) 作为消息通信载体; 满足生产者与消费者模式,一条消息只能被一个消费 者使用,未被消费的消息在队列中保留直到被消费或超时.",-1),K=(0,a._)("blockquote",null,[(0,a._)("p",null,"比如:生产者发送 100 条消息的话,两个消费者来消费一般情况下两个消费者会按照消息 发送的顺序各自消费一半")],-1),B=(0,a._)("h4",{id:"_1-2-2-2-发布-订阅-pub-sub-模型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-2-2-发布-订阅-pub-sub-模型","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.2.2. 发布/订阅 (Pub/Sub) 模型")],-1),C=(0,a._)("p",null,[(0,a._)("img",{src:i,alt:"picture 6"})],-1),w=(0,a._)("p",null,"发布订阅模型 (Pub/Sub) 使用主题 (Topic) 作为消息通信载体,类似于广播模式; 发布者 发布一条消息,该消息通过主题传递给所有的订阅者,在一条消息广播之后才订阅的用户则是 收不到该条消息的.",-1),T=(0,a._)("h3",{id:"_1-2-3-jms-五种不同的消息正文格式",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-3-jms-五种不同的消息正文格式","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.3. JMS 五种不同的消息正文格式")],-1),I=(0,a._)("p",null,"JMS 定义了五种不同的消息正文格式,以及调用的消息类型,允许发送并接收以一些不同形式 的数据,简单文本 (TextMessage), 可序列化的对象 (ObjectMessage), 键值对 (MapMessage), 字节流 (BytesMessage), 原始值流 (StreamMessage)",-1),V=(0,a._)("h3",{id:"_1-2-4-amqp",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-4-amqp","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.4. AMQP")],-1),D=(0,a._)("p",null,"AMQP (Advanced Message Queuing Protocol, 高级消息队列协议), 一个提供统一消息服务 的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计, 兼容 JMS. 基于此协议的客户端与消息中间件可传递消息,并不受客户端/中间件同产品,不 同的开发语言等条件的限制.",-1),O=(0,a._)("p",null,"生产者将消息发送给交换器,交换器和队列绑定,RabbitMQ 就是基于 AMQP 协议实现的.",-1),Z=(0,a._)("h3",{id:"_1-2-5-amqp-模型的几大组件",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-5-amqp-模型的几大组件","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.5. AMQP 模型的几大组件?")],-1),F=(0,a._)("ol",null,[(0,a._)("li",null,"交换器 (Exchange): 消息代理服务器中用于把消息路由到队列的组件."),(0,a._)("li",null,"队列 (Queue): 用来存储消息的数据结构,位于硬盘或内存中."),(0,a._)("li",null,"绑定 (Binding): 一套规则,告知交换器消息应该将消息投递给哪个队列.")],-1),H=(0,a._)("h3",{id:"_1-2-6-jms-vs-amqp",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-2-6-jms-vs-amqp","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.2.6. JMS vs AMQP")],-1),N=(0,a._)("table",null,[(0,a._)("thead",null,[(0,a._)("tr",null,[(0,a._)("th",{style:{"text-align":"left"}},"对比方向"),(0,a._)("th",{style:{"text-align":"left"}},"JMS"),(0,a._)("th",{style:{"text-align":"left"}},"AMQP")])]),(0,a._)("tbody",null,[(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"left"}},"定义"),(0,a._)("td",{style:{"text-align":"left"}},"Java API"),(0,a._)("td",{style:{"text-align":"left"}},"协议")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"left"}},"跨语言"),(0,a._)("td",{style:{"text-align":"left"}},"否"),(0,a._)("td",{style:{"text-align":"left"}},"是")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"left"}},"跨平台"),(0,a._)("td",{style:{"text-align":"left"}},"否"),(0,a._)("td",{style:{"text-align":"left"}},"是")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"left"}},"支持消息类型"),(0,a._)("td",{style:{"text-align":"left"}},"提供两种消息模型:1. 点对点 2. 发布/订阅"),(0,a._)("td",{style:{"text-align":"left"}},"提供了五种消息模型:①direct exchange; ②fanout exchange; ③topic change; ④headers exchange; ⑤system exchange.本质来讲,后四种和 JMS 的 pub/sub 模型没有太大差别,仅是在路由机制上做了更详细的划分;")]),(0,a._)("tr",null,[(0,a._)("td",{style:{"text-align":"left"}},"支持消息类型"),(0,a._)("td",{style:{"text-align":"left"}},"支持多种消息类型"),(0,a._)("td",{style:{"text-align":"left"}},[(0,a.Uk)("byte"),(0,a._)("a",{href:"%E4%BA%8C%E8%BF%9B%E5%88%B6"})])])])],-1),Y=(0,a._)("p",null,"总结:",-1),z=(0,a._)("ul",null,[(0,a._)("li",null,"AMQP 为消息定义了线路层 (wire-level protocol) 的协议,而 JMS 所定义的是 API 规 范.在 Java 体系中,多个 client 均可以通过 JMS 进行交互,不需要应用修改代码,但是 其对跨平台的支持较差.而 AMQP 天然具有跨平台,跨语言特性."),(0,a._)("li",null,"JMS 支持 TextMessage, MapMessage 等复杂的消息类型; 而 AMQP 仅支持 byte[] 消息 类型 (复杂的类型可序列化后发送)."),(0,a._)("li",null,"由于 Exchange 提供的路由算法,AMQP 可以提供多样化的路由方式来传递消息到消息队列 ,而 JMS 仅支持 队列 和 主题/订阅 方式两种.")],-1),G=(0,a._)("h2",{id:"_1-3-常见的消息队列对比",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-3-常见的消息队列对比","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.3. 常见的消息队列对比")],-1),L=(0,a._)("table",null,[(0,a._)("thead",null,[(0,a._)("tr",null,[(0,a._)("th",null,"对比方向"),(0,a._)("th",null,"概要")])]),(0,a._)("tbody",null,[(0,a._)("tr",null,[(0,a._)("td",null,"吞吐量"),(0,a._)("td",null,"万级的 ActiveMQ 和 RabbitMQ 的吞吐量 (ActiveMQ 的性能最差) 要比十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级.")]),(0,a._)("tr",null,[(0,a._)("td",null,"可用性"),(0,a._)("td",null,"都可以实现高可用.ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性.RocketMQ 基于分布式架构. kafka 也是分布式的,一个数据多个副本,少数机器宕机,不会丢失数据,不会导致不可用")]),(0,a._)("tr",null,[(0,a._)("td",null,"时效性"),(0,a._)("td",null,"RabbitMQ 基于 erlang 开发,所以并发能力很强,性能极其好,延时很低,达到微秒级.其他三个都是 ms 级.")]),(0,a._)("tr",null,[(0,a._)("td",null,"功能支持"),(0,a._)("td",null,"除了 Kafka,其他三个功能都较为完备. Kafka 功能较为简单,主要支持简单的 MQ 功能,在大数据领域的实时计算以及日志采集被大规模使用,是事实上的标准")]),(0,a._)("tr",null,[(0,a._)("td",null,"消息丢失"),(0,a._)("td",null,"ActiveMQ 和 RabbitMQ 丢失的可能性非常低,RocketMQ 和 Kafka 理论上不会丢失.")])])],-1),W=(0,a._)("h2",{id:"_1-4-mq如何保证分布式事务的最终一致性",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-mq如何保证分布式事务的最终一致性","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4. MQ如何保证分布式事务的最终一致性")],-1),X=(0,a._)("p",null,[(0,a._)("img",{src:r,alt:"picture 2"})],-1),$=(0,a._)("p",null,"分布式事务: 业务相关的多个操作,保证他们同时成功或者同时失败",-1),ee=(0,a._)("p",null,"最终一致性: 对于已改变数据的读取,最终都能获取已更新的数据,但不保证能立即获取已更新的数据",-1),le=(0,a._)("h3",{id:"_1-4-1-mq中要保证事务的最终一致性-需要做到",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-4-1-mq中要保证事务的最终一致性-需要做到","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.4.1. MQ中要保证事务的最终一致性,需要做到")],-1),te=(0,a._)("ol",null,[(0,a._)("li",null,"生产者要保证100%的消息投递.事务消息机制"),(0,a._)("li",null,"消费者这一端需要保证幂等消费.唯一ID+业务自己实现的幂等")],-1),ae=(0,a._)("h2",{id:"_1-5-设计一个高并发的消息中间件",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-设计一个高并发的消息中间件","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5. 设计一个高并发的消息中间件")],-1),ne=(0,a._)("h3",{id:"_1-5-1-生产者消费者模型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-1-生产者消费者模型","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5.1. 生产者消费者模型")],-1),_e=(0,a._)("p",null,"消息中间件能够使其他应用来生产消息，也能够使其他应用来消费相应的消息。如果生产者生产了消息，消息中间件存储相应的数据在内存和磁盘中",-1),ie=(0,a._)("h3",{id:"_1-5-2-数据的高可用",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-2-数据的高可用","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5.2. 数据的高可用")],-1),re=(0,a._)("p",null,"通过本地内存，分布式缓存，和一份数据在不同的服务器上都搞一个副本来实现的。此时，任何一个存储节点宕机，都不会影响整体的高可用。",-1),de=(0,a._)("h3",{id:"_1-5-3-消息数据不丢失",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#_1-5-3-消息数据不丢失","aria-hidden":"true"},"#"),(0,a.Uk)(" 1.5.3. 消息数据不丢失")],-1),se=(0,a._)("p",null,"一种 ACK 对应的是生产端。如果一直没有接收到 ACK 消息，则需要通过生产者来重新发送一条消息来保证生产消息成功。",-1),ue=(0,a._)("p",null,"另一种 ACK 对应的是消费端。一旦一条消息消费并处理成功，必须返回一个 ack 给消息中间件，然后消息中间件才能删除这条消息。否则一旦消费者宕机，就必须重发这条消息给其他的消费者实例，保证消息一定会被处理成功。",-1),he={},ce=(0,t(3744).Z)(he,[["render",function(e,l){return(0,a.wg)(),(0,a.iD)(a.HY,null,[d,s,u,h,c,g,p,m,o,M,f,b,x,k,v,Q,y,A,S,J,U,P,q,j,R,E,K,B,C,w,T,I,V,D,O,Z,F,H,N,Y,z,G,L,W,X,$,ee,le,te,ae,ne,_e,ie,re,de,se,ue],64)}]])},3744:(e,l)=>{l.Z=(e,l)=>{const t=e.__vccOpts||e;for(const[e,a]of l)t[e]=a;return t}},5837:(e,l,t)=>{e.exports=t.p+"assets/img/1640734855701.3af9f827.png"},603:(e,l,t)=>{e.exports=t.p+"assets/img/1640739519156.a6976603.png"},2162:(e,l,t)=>{e.exports=t.p+"assets/img/1640739602283.5521820f.png"},3301:(e,l,t)=>{e.exports=t.p+"assets/img/1644540373312.a42fff0a.png"}}]);