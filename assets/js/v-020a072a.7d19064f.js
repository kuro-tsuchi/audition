"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[175],{7929:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-020a072a",path:"/golang/basic.html",title:"1. basic",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. Go 和 Java 的区别有",slug:"_1-1-go-和-java-的区别有",children:[]},{level:2,title:"1.2. go 有什么优势或者特点?",slug:"_1-2-go-有什么优势或者特点",children:[]},{level:2,title:"1.3. golang数据类型",slug:"_1-3-golang数据类型",children:[{level:3,title:"1.3.1. 值类型",slug:"_1-3-1-值类型",children:[]},{level:3,title:"1.3.2. 引用类型",slug:"_1-3-2-引用类型",children:[]}]},{level:2,title:"1.4. go中new和make的区别",slug:"_1-4-go中new和make的区别",children:[{level:3,title:"1.4.1. make 函数",slug:"_1-4-1-make-函数",children:[]},{level:3,title:"1.4.2. new 函数",slug:"_1-4-2-new-函数",children:[]}]},{level:2,title:"1.5. go 语言如何高效的进行字符串拼接",slug:"_1-5-go-语言如何高效的进行字符串拼接",children:[{level:3,title:'1.5.1. 原生拼接方式"+"',slug:"_1-5-1-原生拼接方式",children:[]},{level:3,title:"1.5.2. Strings.builder",slug:"_1-5-2-strings-builder",children:[]},{level:3,title:"1.5.3. strings.join",slug:"_1-5-3-strings-join",children:[]},{level:3,title:"1.5.4. 字符串格式化函数 fmt.Sprintf",slug:"_1-5-4-字符串格式化函数-fmt-sprintf",children:[]},{level:3,title:"1.5.5. bytes.Buffer",slug:"_1-5-5-bytes-buffer",children:[]},{level:3,title:"1.5.6. 切片 append",slug:"_1-5-6-切片-append",children:[]}]},{level:2,title:"1.6. 数组(array)和切片(slice)的区别",slug:"_1-6-数组-array-和切片-slice-的区别",children:[]},{level:2,title:"1.7. 切片长度和容量区别",slug:"_1-7-切片长度和容量区别",children:[]},{level:2,title:"1.8. for-range 循环遍历 slice/map 有什么问题?",slug:"_1-8-for-range-循环遍历-slice-map-有什么问题",children:[{level:3,title:"1.8.1. slice 遍历",slug:"_1-8-1-slice-遍历",children:[]},{level:3,title:"1.8.2. map 遍历",slug:"_1-8-2-map-遍历",children:[]}]},{level:2,title:"1.9. golang中 int int8 int16 int32 int64的区别和取值",slug:"_1-9-golang中-int-int8-int16-int32-int64的区别和取值",children:[{level:3,title:"1.9.1. 区别",slug:"_1-9-1-区别",children:[]},{level:3,title:"1.9.2. 取值范围",slug:"_1-9-2-取值范围",children:[]}]},{level:2,title:"1.10. 介绍 rune 类型",slug:"_1-10-介绍-rune-类型",children:[]},{level:2,title:"1.11. golang 中解析 tag 是怎么实现的?反射原理是什么?",slug:"_1-11-golang-中解析-tag-是怎么实现的-反射原理是什么",children:[]},{level:2,title:"1.12. golang 传参是值传递还是引用传递?",slug:"_1-12-golang-传参是值传递还是引用传递",children:[]},{level:2,title:"1.13. struct 能不能进行比较?",slug:"_1-13-struct-能不能进行比较",children:[]},{level:2,title:"1.14. go 闭包",slug:"_1-14-go-闭包",children:[]},{level:2,title:"1.15. golang map 是线程安全的吗? go 如何解决 Map 并发读写安全问题 ?",slug:"_1-15-golang-map-是线程安全的吗-go-如何解决-map-并发读写安全问题",children:[{level:3,title:'1.15.1. 使用sync.Map或第三方包 "concurrent-map"',slug:"_1-15-1-使用sync-map或第三方包-concurrent-map",children:[]},{level:3,title:"1.15.2. 加锁",slug:"_1-15-2-加锁",children:[]}]},{level:2,title:"1.16. map 中删除一个 key, 它的内存会释放么?",slug:"_1-16-map-中删除一个-key-它的内存会释放么",children:[]},{level:2,title:"1.17. 空 map 和未初始化 map 注意事项",slug:"_1-17-空-map-和未初始化-map-注意事项",children:[{level:3,title:"1.17.1. 空 map (已初始化map)",slug:"_1-17-1-空-map-已初始化map",children:[]},{level:3,title:"1.17.2. 未初始化 map",slug:"_1-17-2-未初始化-map",children:[]}]},{level:2,title:"1.18. map 的数据结构是什么?是怎么实现扩容?",slug:"_1-18-map-的数据结构是什么-是怎么实现扩容",children:[]},{level:2,title:"1.19. map 如何顺序读取?",slug:"_1-19-map-如何顺序读取",children:[]},{level:2,title:"1.20. 简单描述 go 语言 GC(垃圾回收)的工作原理",slug:"_1-20-简单描述-go-语言-gc-垃圾回收-的工作原理",children:[{level:3,title:"1.20.1. 标记清除",slug:"_1-20-1-标记清除",children:[]},{level:3,title:"1.20.2. 三色标记",slug:"_1-20-2-三色标记",children:[]}]},{level:2,title:"1.21. 为什么小对象多了会造成GC压力",slug:"_1-21-为什么小对象多了会造成gc压力",children:[]},{level:2,title:"1.22. 请简述 go 是如何分配内存的?",slug:"_1-22-请简述-go-是如何分配内存的",children:[]},{level:2,title:"1.23. client 如何实现长连接?",slug:"_1-23-client-如何实现长连接",children:[{level:3,title:"1.23.1. Transport 的主要功能",slug:"_1-23-1-transport-的主要功能",children:[]}]},{level:2,title:"1.24. 分布式锁的问题吗?分布式锁的原理你清楚吗?",slug:"_1-24-分布式锁的问题吗-分布式锁的原理你清楚吗",children:[]},{level:2,title:"1.25. go 实现 set 类型",slug:"_1-25-go-实现-set-类型",children:[]},{level:2,title:"1.26. 了解空指针吗",slug:"_1-26-了解空指针吗",children:[]},{level:2,title:"1.27. 内存逃逸",slug:"_1-27-内存逃逸",children:[{level:3,title:"1.27.1. 什么是内存逃逸?",slug:"_1-27-1-什么是内存逃逸",children:[]},{level:3,title:"1.27.2. 逃逸是如何产生的?",slug:"_1-27-2-逃逸是如何产生的",children:[]},{level:3,title:"1.27.3. 总结",slug:"_1-27-3-总结",children:[]},{level:3,title:"1.27.4. 内存逃逸的危害",slug:"_1-27-4-内存逃逸的危害",children:[]},{level:3,title:"1.27.5. demo",slug:"_1-27-5-demo",children:[]}]},{level:2,title:"1.28. golang的init函数",slug:"_1-28-golang的init函数",children:[{level:3,title:"1.28.1. init函数的主要特点",slug:"_1-28-1-init函数的主要特点",children:[]}]},{level:2,title:"1.29. go语言局部变量分配在栈还是堆",slug:"_1-29-go语言局部变量分配在栈还是堆",children:[]},{level:2,title:"1.30. golang函数返回局部变量的指针是否安全",slug:"_1-30-golang函数返回局部变量的指针是否安全",children:[]},{level:2,title:"1.31. go中两个nil可能不相等吗",slug:"_1-31-go中两个nil可能不相等吗",children:[]},{level:2,title:"1.32. 非接口的任意类型 T() 能够调用 *T 的方法吗? 反过来呢?",slug:"_1-32-非接口的任意类型-t-能够调用-t-的方法吗-反过来呢",children:[]},{level:2,title:"1.33. golang判断map中key是否存在的方法",slug:"_1-33-golang判断map中key是否存在的方法",children:[]},{level:2,title:"1.34. golang比较两个字符串切片是否相等",slug:"_1-34-golang比较两个字符串切片是否相等",children:[]},{level:2,title:"1.35. go 打印结构体,  使用 %v %+v %#v 的区别",slug:"_1-35-go-打印结构体-使用-v-v-v-的区别",children:[]},{level:2,title:"1.36. golang的枚举类型",slug:"_1-36-golang的枚举类型",children:[]},{level:2,title:"1.37. go 空结构体 struct{} 的用途",slug:"_1-37-go-空结构体-struct-的用途",children:[]},{level:2,title:"1.38. go中的nil切片和空切片区别",slug:"_1-38-go中的nil切片和空切片区别",children:[]},{level:2,title:"1.39. go的defer原理是什么",slug:"_1-39-go的defer原理是什么",children:[{level:3,title:"1.39.1. 如何理解 defer 关键字",slug:"_1-39-1-如何理解-defer-关键字",children:[]},{level:3,title:"1.39.2. 多个 defer 的顺序",slug:"_1-39-2-多个-defer-的顺序",children:[]},{level:3,title:"1.39.3. defer 在什么时候会修改返回值?",slug:"_1-39-3-defer-在什么时候会修改返回值",children:[]},{level:3,title:"1.39.3. defer recover 的问题?",slug:"_1-39-3-defer-recover-的问题",children:[]}]},{level:2,title:"1.40. 闭包与匿名函数",slug:"_1-40-闭包与匿名函数",children:[]},{level:2,title:"1.41. go的 slice如何扩容",slug:"_1-41-go的-slice如何扩容",children:[]},{level:2,title:"1.42. 同步, 异步和阻塞, 非阻塞的区别?",slug:"_1-42-同步-异步和阻塞-非阻塞的区别",children:[{level:3,title:"1.42.1. 同步和异步的区别",slug:"_1-42-1-同步和异步的区别",children:[]},{level:3,title:"1.42.2. 阻塞与非阻塞的区别",slug:"_1-42-2-阻塞与非阻塞的区别",children:[]}]},{level:2,title:"1.43. golang 中切片去重",slug:"_1-43-golang-中切片去重",children:[{level:3,title:"1.43.1. 双重循环过滤",slug:"_1-43-1-双重循环过滤",children:[]},{level:3,title:"1.43.2. 通过字典(set)过滤",slug:"_1-43-2-通过字典-set-过滤",children:[]}]}],filePathRelative:"golang/basic.md",git:{updatedTime:165500109e4,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:9},{name:"root",email:"root@DESKTOP-VKU4PE6.localdomain",commits:1}]}}},787:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Oa});var e=a(6252),t=a(5586);const l=(0,e._)("h1",{id:"_1-basic",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-basic","aria-hidden":"true"},"#"),(0,e.Uk)(" 1. basic")],-1),o=(0,e._)("h2",{id:"_1-1-go-和-java-的区别有",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-1-go-和-java-的区别有","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.1. Go 和 Java 的区别有")],-1),c=(0,e._)("ol",null,[(0,e._)("li",null,"性能上: golang 的性能比 Java 更好,占用内存更少,使用 goroutine 避免内核态和用户态切换成本."),(0,e._)("li",null,"编译部署:Java 通过虚拟机编译,使用 JVM 跨平台编译;Go 中不存在虚拟机,针对不同的平台,编译对应的机器码;"),(0,e._)("li",null,"访问权限: java 使用 public,protected,private,默认等关键字;golang 通过大小写控制."),(0,e._)("li",null,"接口: java 等面向对象编程的接口是侵入式接口,需要明确声明自己实现了某个接口. 而 Golang 的非侵入式接口不需要通过任何关键字,只要一个类型实现了接口的所有方法,就是这个接口的实现."),(0,e._)("li",null,"异常处理:java 中错误(Error)和异常 (Exception) 被分类管理,golang 中只有 error,一旦发生错误逐层返回,直到被处理."),(0,e._)("li",null,"继承:Java 的继承通过 extends 关键字完成,不支持多继承;Go 语言的继承通过 Struct 的方式,子类只需要把基类作为成员放在子类的定义中,支持多继承."),(0,e._)("li",null,"多态:java 的多态,必须满足继承,重写,向上转型;在 Go 语言中通过接口实现多态,对接口的实现只需要某个类型 T 实现了接口中的方法,就相当于实现了该接口."),(0,e._)("li",null,"值传递和引用传递:java 中不存在显式的指针,而 Golang 中存在显式的指针操作.java 和 golang 都是只存在值传递."),(0,e._)("li",null,"并发:在 Java 中,通常借助于共享内存(全局变量)作为线程间通信的媒介,通常会有线程不安全问题,使用了加锁(同步化),使用原子类,使用 volatile 提升可见性等解决;但在 Golang 中使用的是通道(channel)作为协程间通信的媒介,多个 goroutine 之间通过 Channel 来通信,chan 的读取和写入操作为原子操作,所以是安全的."),(0,e._)("li",null,"垃圾回收和内存管理机制:Java 基于 JVM 虚拟机的分代收集算法完成 GC,golang 内存释放语言层面,对不再使用的内存资源进行自动回收,多级缓存,非分代,并发的三色标记算法.")],-1),p=(0,e._)("h2",{id:"_1-2-go-有什么优势或者特点",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-2-go-有什么优势或者特点","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.2. go 有什么优势或者特点?")],-1),_=(0,e._)("ol",null,[(0,e._)("li",null,"go 允许跨平台编译,编译出来的是二进制的可执行文件,部署在对应系统上即可运行"),(0,e._)("li",null,"go 天生支持高并发,通过 goroutine 和 channel 实现"),(0,e._)("li",null,"go 是静态类型语言,可以在编译的时候检查出来隐藏的大多数问题"),(0,e._)("li",null,"go 的代码风格是强制性的统一")],-1),u=(0,e._)("h2",{id:"_1-3-golang数据类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-3-golang数据类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.3. golang数据类型")],-1),k=(0,e._)("h3",{id:"_1-3-1-值类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-3-1-值类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.3.1. 值类型")],-1),i=(0,e._)("p",null,"int,float,bool,string,struct和array. 变量直接存储值,分配在栈区的内存空间,这些变量所占据的空间在函数被调用完后会自动释放.",-1),r=(0,e._)("h3",{id:"_1-3-2-引用类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-3-2-引用类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.3.2. 引用类型")],-1),b=(0,e._)("p",null,"slice,map,chan和 指针. 变量存储的是一个地址,使用指针指向内存中真正存储数据的首地址.内存通常在堆上分配,通过GC回收.对于引用类型的变量,不仅要声明变量,还需要手动分配空间.",-1),m=(0,e._)("h2",{id:"_1-4-go中new和make的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-4-go中new和make的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.4. go中new和make的区别")],-1),U=(0,e._)("p",null,"new 和 make 是两个内置函数,主要用来创建并分配内存.",-1),d=(0,e._)("h3",{id:"_1-4-1-make-函数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-4-1-make-函数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.4.1. make 函数")],-1),g=(0,e._)("p",null,"make 是用于内存分配的, make 只用于 chan, map, slice 的内存分配及初始化, 它返回的是类型本身, 而不是指针类型",-1),h=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// func make(t Type, size ...IntegerType) Type"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" v "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// [0 0 0 0 0]"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),f=(0,e._)("h3",{id:"_1-4-2-new-函数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-4-2-new-函数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.4.2. new 函数")],-1),y=(0,e._)("p",null,"new 函数根据传入的类型分配内存空间,并返回指向该类型内存地址的指针, 同时 new 函数会把分配的内存置为零值",-1),v=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// func new(Type) *Type"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" sum "),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\n    sum "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"new"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"//分配空间"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("sum"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 0"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("sum"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 0xc0000aa058"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),w=(0,e._)("h2",{id:"_1-5-go-语言如何高效的进行字符串拼接",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-go-语言如何高效的进行字符串拼接","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5. go 语言如何高效的进行字符串拼接")],-1),x=(0,e._)("p",null,"通过基准测试 benchmark 对比, 使用 strings.builder 进行字符串拼接都是最高效的; 如果进行少量的字符串拼接时,直接使用+操作符是最方便也是性能最高的",-1),P=(0,e._)("h3",{id:"_1-5-1-原生拼接方式",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-1-原生拼接方式","aria-hidden":"true"},"#"),(0,e.Uk)(' 1.5.1. 原生拼接方式"+"')],-1),S=(0,e._)("p",null,"go 语言原生支持使用+操作符直接对两个字符串进行拼接, 会对字符串进行遍历,计算并开辟一个新的空间来存储原来的两个字符串.",-1),T=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" s "),(0,e._)("span",{class:"token builtin"},"string"),(0,e.Uk)("\ns "),(0,e._)("span",{class:"token operator"},"+="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"asong"'),(0,e.Uk)("\ns "),(0,e._)("span",{class:"token operator"},"+="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"真帅"'),(0,e.Uk)("\nfmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),C=(0,e._)("h3",{id:"_1-5-2-strings-builder",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-2-strings-builder","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5.2. Strings.builder")],-1),G=(0,e._)("p",null,"go 语言提供了一个专门操作字符串的库 strings,使用 strings.Builder 可以进行字符串拼接,提供了 writeString 方法拼接字符串,使用方式如下:",-1),M=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" builder strings"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Builder\n builder"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"WriteString"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"asong"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n builder"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"WriteString"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'" hello"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n s "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" builder"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"String"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),j=(0,e._)("h3",{id:"_1-5-3-strings-join",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-3-strings-join","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5.3. strings.join")],-1),L=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)("baseSlice "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token string"},'"asong"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"真帅"'),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\nstrings"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("baseSlice"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'""'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),R=(0,e._)("h3",{id:"_1-5-4-字符串格式化函数-fmt-sprintf",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-4-字符串格式化函数-fmt-sprintf","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5.4. 字符串格式化函数 fmt.Sprintf")],-1),B=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)("str "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"asong"'),(0,e.Uk)("\nstr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Sprintf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"%s%s"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),E=(0,e._)("p",null,"fmt.Sprintf 实现原理主要是使用到了反射,反射会产生性能的损耗,影响性能",-1),J=(0,e._)("h3",{id:"_1-5-5-bytes-buffer",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-5-bytes-buffer","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5.5. bytes.Buffer")],-1),H=(0,e._)("p",null,"因为 string 类型底层就是一个 byte 数组,所以我们就可以 go 语言的 bytes.Buffer 进行字符串拼接.bytes.Buffer 是一个一个缓冲 byte 类型的缓冲器,这个缓冲器里存放着都是 byte.",-1),I=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)("buf "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"new"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("bytes"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Buffer"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nbuf"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"WriteString"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"asong"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nbuf"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"String"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br")])],-1),D=(0,e._)("h3",{id:"_1-5-6-切片-append",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-5-6-切片-append","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.5.6. 切片 append")],-1),F=(0,e._)("p",null,"因为 string 类型底层也是 byte 类型数组,所以我们可以重新声明一个切片,使用 append 进行字符串拼接,使用方式如下:",-1),W=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)("a "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"Hello,"'),(0,e.Uk)("\nb "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"World!"'),(0,e.Uk)("\ns "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"string"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"append"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token function"},"byte"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token function"},"byte"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"..."),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nfmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),A=(0,e._)("p",null,"如果想减少内存分配,在将[]byte 转换为 string 类型时可以考虑使用强制转换.",-1),K=(0,e._)("h2",{id:"_1-6-数组-array-和切片-slice-的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-6-数组-array-和切片-slice-的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.6. 数组(array)和切片(slice)的区别")],-1),N=(0,e._)("ol",null,[(0,e._)("li",null,"数组的长度不可变, 数组是值类型, 数组作为参数在函数中传递时, 传递的是数组的副本"),(0,e._)("li",null,"slice是不定长的, slice是引用类型,切片的底层结构体保存着切片的容量,长度以及指向数组的指针")],-1),V=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" slice "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("  \n    array unsafe"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Pointer\n    "),(0,e._)("span",{class:"token builtin"},"len"),(0,e.Uk)("   "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token builtin"},"cap"),(0,e.Uk)("   "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),q=(0,e._)("h2",{id:"_1-7-切片长度和容量区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-7-切片长度和容量区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.7. 切片长度和容量区别")],-1),z=(0,e._)("p",null,[(0,e._)("code",null,"make([]int, 0, 5)")],-1),O=(0,e._)("ol",null,[(0,e._)("li",null,"切片的长度是它所包含的元素个数."),(0,e._)("li",null,"切片的容量是它的底层数组元素的个数.当切片的底层数组不足以容纳所有给定值时,它就会分配一个更大的数组.返回的切片会指向这个新分配的数组."),(0,e._)("li",null,"切片的长度和容量可通过 len() 和 cap() 来获取")],-1),Z=(0,e._)("h2",{id:"_1-8-for-range-循环遍历-slice-map-有什么问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-8-for-range-循环遍历-slice-map-有什么问题","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.8. for-range 循环遍历 slice/map 有什么问题?")],-1),Y=(0,e._)("p",null,"for-range 遍历slice/map, 迭代变量的值是值拷贝,而不是元素的引用, 迭代变量总是指向同一个内存地址, 所以不能用来修改原 slice/map 中值, 可以通过索引直接修改值.",-1),Q=(0,e._)("h3",{id:"_1-8-1-slice-遍历",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-8-1-slice-遍历","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.8.1. slice 遍历")],-1),X=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n slice "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"_"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("v "),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" slice"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" v"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   v"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"100"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("v "),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" slice"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"k:"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"v:"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// k: 0 v: 0"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// k: 1 v: 1"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// k: 2 v: 2"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// k: 3 v: 3"),(0,e.Uk)("\n\n\n"),(0,e._)("span",{class:"token comment"},"// 使用 k根据索引直接修改值."),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("v "),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" slice"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" v"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   slice"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"100"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br")])],-1),$=(0,e._)("h3",{id:"_1-8-2-map-遍历",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-8-2-map-遍历","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.8.2. map 遍历")],-1),nn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n s "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n m "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" v "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" s "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("v\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" m "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"map[%v]=%v\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// map[2]=4"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// map[3]=4"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// map[0]=4"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// map[1]=4"),(0,e.Uk)("\n\n\n"),(0,e._)("span",{class:"token comment"},"// 声明一个中间变量,保存value,并且复制给map即可"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n s "),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n m "),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("v"),(0,e._)("span",{class:"token operator"},":="),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  n"),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)("v\n  m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("n\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" m "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"map[%v]=%v\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br")])],-1),sn=(0,e._)("h2",{id:"_1-9-golang中-int-int8-int16-int32-int64的区别和取值",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-9-golang中-int-int8-int16-int32-int64的区别和取值","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.9. golang中 int int8 int16 int32 int64的区别和取值")],-1),an=(0,e._)("h3",{id:"_1-9-1-区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-9-1-区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.9.1. 区别")],-1),en=(0,e._)("table",null,[(0,e._)("thead",null,[(0,e._)("tr",null,[(0,e._)("th",{style:{"text-align":"left"}},"int"),(0,e._)("th",{style:{"text-align":"right"}},"类型大小为 4/8 字节")])]),(0,e._)("tbody",null,[(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int8"),(0,e._)("td",{style:{"text-align":"right"}},"类型大小为 1 字节")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int16"),(0,e._)("td",{style:{"text-align":"right"}},"类型大小为 2 字节")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int32"),(0,e._)("td",{style:{"text-align":"right"}},"类型大小为 4 字节")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int64"),(0,e._)("td",{style:{"text-align":"right"}},"类型大小为 8 字节")])])],-1),tn=(0,e._)("p",null,"int的大小是和操作系统位数相关的,如果是32位操作系统,int类型的大小就是4字节; 如果是64位操作系统,int类型的大小就是8个字节",-1),ln=(0,e._)("h3",{id:"_1-9-2-取值范围",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-9-2-取值范围","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.9.2. 取值范围")],-1),on=(0,e._)("table",null,[(0,e._)("thead",null,[(0,e._)("tr",null,[(0,e._)("th",{style:{"text-align":"left"}},"int8"),(0,e._)("th",{style:{"text-align":"right"}},"-128 ~ 127")])]),(0,e._)("tbody",null,[(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int16"),(0,e._)("td",{style:{"text-align":"right"}},"-32768 ~ 32767")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int32"),(0,e._)("td",{style:{"text-align":"right"}},"-2147483648 ~ 2147483647")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"int64"),(0,e._)("td",{style:{"text-align":"right"}},"-9223372036854775808 ~ 9223372036854775807")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}}),(0,e._)("td",{style:{"text-align":"right"}})]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"uint8"),(0,e._)("td",{style:{"text-align":"right"}},"0 ~ 255")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"uint16"),(0,e._)("td",{style:{"text-align":"right"}},"0 ~ 65535")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"uint32"),(0,e._)("td",{style:{"text-align":"right"}},"0 ~ 4294967295")]),(0,e._)("tr",null,[(0,e._)("td",{style:{"text-align":"left"}},"uint64"),(0,e._)("td",{style:{"text-align":"right"}},"0 ~ 18446744073709551615")])])],-1),cn=(0,e._)("h2",{id:"_1-10-介绍-rune-类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-10-介绍-rune-类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.10. 介绍 rune 类型")],-1),pn=(0,e._)("p",null,"rune 是 int32 的别名,用于区分字符值和整数值.rune代表一个utf-8字符. 当需要处理中文,日文或者其他复合字符时,则需要用到rune类型",-1),_n=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" s "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"你好吗"'),(0,e.Uk)("\nrunes "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token function"},"rune"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nrunes"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'啊'"),(0,e.Uk)("\nfmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"string"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("runes"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),un=(0,e._)("h2",{id:"_1-11-golang-中解析-tag-是怎么实现的-反射原理是什么",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-11-golang-中解析-tag-是怎么实现的-反射原理是什么","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.11. golang 中解析 tag 是怎么实现的?反射原理是什么?")],-1),kn=(0,e._)("p",null,"声明struct结构体的时候,属性的右侧还有反引号括起来的内容, 在golang中叫标签(Tag),在转换成其它数据格式的时候,会使用其中特定的字段作为键值",-1),rn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" User "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("     UserId   "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("    "),(0,e._)("span",{class:"token string"},'`json:"user_id" gorm:"user_id"`'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("     UserName "),(0,e._)("span",{class:"token builtin"},"string"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'`json:"user_name" gorm:"user_name"`'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),bn=(0,e._)("h2",{id:"_1-12-golang-传参是值传递还是引用传递",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-12-golang-传参是值传递还是引用传递","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.12. golang 传参是值传递还是引用传递?")],-1),mn=(0,e._)("p",null,"go语言中所有的传参都是值传递,值的副本或引用类型的副本.无论是值类型的变量还是引用类型的变量作为参数传递都会发生值拷贝,开辟新的内存空间.",-1),Un=(0,e._)("h2",{id:"_1-13-struct-能不能进行比较",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-13-struct-能不能进行比较","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.13. struct 能不能进行比较?")],-1),dn=(0,e._)("ol",null,[(0,e._)("li",null,"不同类型的 struct 不能进行比较,编译期就会报错"),(0,e._)("li",null,[(0,e.Uk)("同类型的struct 分两种情况: "),(0,e._)("ol",null,[(0,e._)("li",null,"struct 的所有成员都是可以比较的,则该 strcut 的不同实例可以比较"),(0,e._)("li",null,"struct 中含有不可比较的成员,则该 struct 不可以比较")])])],-1),gn=(0,e._)("blockquote",null,[(0,e._)("p",null,"golang 中 Slice,Map,Function 这三种数据类型是不可比较的")],-1),hn=(0,e._)("h2",{id:"_1-14-go-闭包",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-14-go-闭包","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.14. go 闭包")],-1),fn=(0,e._)("p",null,"闭包是一个函数内引用了外部的局部变量, 闭包中引用的外部局部变量并不会随着函数的返回而被从栈上销毁.",-1),yn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"adder"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    sum "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 闭包, 匿名函数"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x "),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        sum "),(0,e._)("span",{class:"token operator"},"+="),(0,e.Uk)(" x\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" sum\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n     valueFunc"),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"adder"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n     fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"valueFunc"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("     "),(0,e._)("span",{class:"token comment"},"// output: 2"),(0,e.Uk)("\n     fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"valueFunc"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("   "),(0,e._)("span",{class:"token comment"},"// output: 4"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br")])],-1),vn=(0,e._)("h2",{id:"_1-15-golang-map-是线程安全的吗-go-如何解决-map-并发读写安全问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-golang-map-是线程安全的吗-go-如何解决-map-并发读写安全问题","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15. golang map 是线程安全的吗? go 如何解决 Map 并发读写安全问题 ?")],-1),wn=(0,e._)("p",null,"map不是线程安全的, map 变量为引用类型变量,并发写时,多个协程同时操作一个内存会发生竞争关系",-1),xn=(0,e._)("h3",{id:"_1-15-1-使用sync-map或第三方包-concurrent-map",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-1-使用sync-map或第三方包-concurrent-map","aria-hidden":"true"},"#"),(0,e.Uk)(' 1.15.1. 使用sync.Map或第三方包 "concurrent-map"')],-1),Pn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"sync"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"time"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" m1 sync"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Map\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    i"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"go"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n            m1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Store"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"go"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Load"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br")])],-1),Sn=(0,e._)("h3",{id:"_1-15-2-加锁",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-15-2-加锁","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.15.2. 加锁")],-1),Tn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 同时只能有一个 goroutine 能够获得写锁定, 同时可以有任意多个 gorouinte 获得读锁定, 同时只能存在写锁定或读锁定(读写互斥)."),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n rwL "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" sync"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("RWMutex"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n m   "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//不加锁的话 有可能是读的错误的值"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" rwL"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"RUnlock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n rwL"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"RLock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"read "'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//如果不加锁 会报错 fatal error: concurrent map writes"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"write"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" rwL"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Unlock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n rwL"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Lock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"rwLock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10000"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"go"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10000"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"go"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"write"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token comment"},"//vari()"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token comment"},"//mp()"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token function"},"rwLock"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Sleep"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Second"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br")])],-1),Cn=(0,e._)("h2",{id:"_1-16-map-中删除一个-key-它的内存会释放么",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-16-map-中删除一个-key-它的内存会释放么","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.16. map 中删除一个 key, 它的内存会释放么?")],-1),Gn=(0,e._)("ol",null,[(0,e._)("li",null,"如果删除的元素是值类型,如 int,float,bool,string,array, struct, 则 map 的内存不会自动释放"),(0,e._)("li",null,"如果删除的元素是引用类型,如指针,slice,map,chan 等, 则 map 的内存会自动释放,但释放的内存是子元素应用类型的内存占用"),(0,e._)("li",null,"将 map 设置为 nil 后,内存被回收")],-1),Mn=(0,e._)("h2",{id:"_1-17-空-map-和未初始化-map-注意事项",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-空-map-和未初始化-map-注意事项","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17. 空 map 和未初始化 map 注意事项")],-1),jn=(0,e._)("h3",{id:"_1-17-1-空-map-已初始化map",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-1-空-map-已初始化map","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.1. 空 map (已初始化map)")],-1),Ln=(0,e._)("p",null,"空map可以正常取赋值, 断定 map 是空还是 nil, 需要通过 map == nil 来判断. 因为通过 fmt 打印 map 时,空 map 和 nil map 结果是一样的",-1),Rn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 使用make函数初始化map"),(0,e.Uk)("\nm1 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" m1 "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"空map, 不是nil"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),Bn=(0,e._)("h3",{id:"_1-17-2-未初始化-map",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-17-2-未初始化-map","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.17.2. 未初始化 map")],-1),En=(0,e._)("ol",null,[(0,e._)("li",null,"对未初始化的 map 取值, 值为空:"),(0,e._)("li",null,"对未初始化的 map 赋值, 抛出异常")],-1),Jn=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" m1 "),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e.Uk)("\nfmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"空map 取值: %v\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" m1"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"1"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// "),(0,e.Uk)("\nm1"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"1"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"1"'),(0,e.Uk)("                        "),(0,e._)("span",{class:"token comment"},"//   panic: assignment to entry in nil map"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),Hn=(0,e._)("h2",{id:"_1-18-map-的数据结构是什么-是怎么实现扩容",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-18-map-的数据结构是什么-是怎么实现扩容","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.18. map 的数据结构是什么?是怎么实现扩容?")],-1),In=(0,e._)("p",null,"go 中的 map 在底层是用哈希表实现的, 哈希表示的是键值对之间映射关系.",-1),Dn=(0,e._)("p",null,"随着 Map 中元素的增加,发生哈希冲突的概率会增加,Map 的读写性能也会下降,所以需要更大的内存来保证 Map 的读写性能. 当装载因子超过某个阈值(6.5)时,会动态地增加 Map 长度,实现自动扩容.",-1),Fn=(0,e._)("h2",{id:"_1-19-map-如何顺序读取",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-19-map-如何顺序读取","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.19. map 如何顺序读取?")],-1),Wn=(0,e._)("p",null,"map 不能顺序读取, 想要有序读取, 所以可以把key 放入切片进行排序",-1),An=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"sort"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    m "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"b"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"2"'),(0,e.Uk)("\n    m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"a"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"1"'),(0,e.Uk)("\n    m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"c"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"3"'),(0,e.Uk)("\n\n    keys "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"_"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" m "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        keys "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"append"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("keys"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//  排序"),(0,e.Uk)("\n    sort"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Strings"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("keys"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"_"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" keys "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"Key:%+v, Value:%+v\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br")])],-1),Kn=(0,e._)("h2",{id:"_1-20-简单描述-go-语言-gc-垃圾回收-的工作原理",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-简单描述-go-语言-gc-垃圾回收-的工作原理","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20. 简单描述 go 语言 GC(垃圾回收)的工作原理")],-1),Nn=(0,e._)("p",null,"垃圾回收(GC)是在后台运行一个守护线程,监控各个对象的状态,识别并且丢弃不再使用的对象, 来释放和重用资源.",-1),Vn=(0,e._)("p",null,"golang使用的垃圾回收机制是三色标记法,是对标记清除法的改进.",-1),qn=(0,e._)("h3",{id:"_1-20-1-标记清除",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-1-标记清除","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20.1. 标记清除")],-1),zn=(0,e._)("ol",null,[(0,e._)("li",null,"标记阶段 - 从根对象出发标记堆中存活的对象"),(0,e._)("li",null,"清除阶段 - 遍历堆中所有对象,回收未被标记的垃圾对象")],-1),On=(0,e._)("h4",{id:"_1-20-1-1-缺点",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-1-1-缺点","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20.1.1. 缺点")],-1),Zn=(0,e._)("p",null,"GC 执行期间需要把整个程序完全暂停,不能异步进行 GC 操作",-1),Yn=(0,e._)("h3",{id:"_1-20-2-三色标记",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-2-三色标记","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20.2. 三色标记")],-1),Qn=(0,e._)("p",null,"三色标记优点是可以异步执行,从而可以以中断时间极少的代价或者完全没有中断操作来进行整个GC.",-1),Xn=(0,e._)("p",null,"三色标记算法将程序中的对象分成白色,黑色和灰色三类,初始都是白色",-1),$n=(0,e._)("ol",null,[(0,e._)("li",null,"白色,初始值.本次回收没被扫描过的对象默认都是白色的.而确认不可达的对象也是白色,但是会被标记「不可达」."),(0,e._)("li",null,"灰色,中间状态.本对象有被外部引用,但是本对象引用的其它对象尚未全部检测完."),(0,e._)("li",null,"黑色,本对象有被其它对象引用,且已检测完本对象引用的其它对象.")],-1),ns=(0,e._)("h4",{id:"_1-20-2-1-垃圾回收过程",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-2-1-垃圾回收过程","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20.2.1. 垃圾回收过程")],-1),ss=(0,e._)("ol",null,[(0,e._)("li",null,"垃圾回收开始时,将程序所有对象,包括新创建的对象,全部标记为白色,并将白色对象放入到白色标记表集合中;"),(0,e._)("li",null,'每次GC回收开始, 然后从根节点开始遍历所有对象,把遍历到的对象从白色集合放入"灰色"集合.'),(0,e._)("li",null,"遍历灰色集合,将灰色对象引用的对象从白色集合放入灰色集合,之后将此灰色对象放入黑色集合"),(0,e._)("li",null,"重复上一步, 直到灰色中无任何对象."),(0,e._)("li",null,"回收所有的白色标记表的对象. 也就是回收垃圾.")],-1),as=(0,e._)("h4",{id:"_1-20-2-2-触发条件",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-20-2-2-触发条件","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.20.2.2. 触发条件")],-1),es=(0,e._)("ol",null,[(0,e._)("li",null,"手动触发: 一般很少用,主要由开发者通过调用 runtime.GC()"),(0,e._)("li",null,[(0,e.Uk)("系统触发: "),(0,e._)("ol",null,[(0,e._)("li",null,"当前分配的内存达到一定阈值时触发,这个阈值在每次GC过后都会根据堆内存的增长情况和CPU占用率来调整"),(0,e._)("li",null,"自从上次GC后, 间隔时间达到了2分钟,将启动GC")])])],-1),ts=(0,e._)("h2",{id:"_1-21-为什么小对象多了会造成gc压力",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-21-为什么小对象多了会造成gc压力","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.21. 为什么小对象多了会造成GC压力")],-1),ls=(0,e._)("p",null,"通常小对象过多会导致GC三色法消耗过多的GPU.优化思路是,减少对象分配.",-1),os=(0,e._)("h2",{id:"_1-22-请简述-go-是如何分配内存的",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-22-请简述-go-是如何分配内存的","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.22. 请简述 go 是如何分配内存的?")],-1),cs=(0,e._)("ol",null,[(0,e._)("li",null,"栈内存由编译器自动分配和释放,开发者无法控制.栈内存一般存储函数中的局部变量,参数等,函数创建的时候,这些内存会被自动创建;函数返回的时候,这些内存会被自动释放."),(0,e._)("li",null,"堆内存的生命周期比栈内存要长,如果函数返回的值还会在其他地方使用,那么这个值就会被编译器自动分配到堆上."),(0,e._)("li",null,"堆内存相比栈内存来说,不能自动被编译器释放,只能通过垃圾回收器才能释放,所以栈内存效率会很高.")],-1),ps=(0,e._)("h2",{id:"_1-23-client-如何实现长连接",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-23-client-如何实现长连接","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.23. client 如何实现长连接?")],-1),_s=(0,e._)("p",null,"在 golang 中使用持久化连接发起 HTTP 请求,主要依赖 Transport,官方封装的 net 库中已经支持,在实际应用中,需要在初始化 HTTP 的 client 时传入 transport,",-1),us=(0,e._)("h3",{id:"_1-23-1-transport-的主要功能",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-23-1-transport-的主要功能","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.23.1. Transport 的主要功能")],-1),ks=(0,e._)("ol",null,[(0,e._)("li",null,"缓存了长连接,用于大量 http 请求场景下的连接复用"),(0,e._)("li",null,"对连接做一些限制,连接超时时间,每个 host 的最大连接数")],-1),is=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"package"),(0,e.Uk)(" main\n\n"),(0,e._)("span",{class:"token keyword"},"import"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"fmt"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"io/ioutil"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"net"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"net/http"'),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token string"},'"time"'),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" HTTPTransport "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("http"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Transport"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    DialContext"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("net"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Dialer"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        Timeout"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)("   "),(0,e._)("span",{class:"token number"},"30"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Second"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 连接超时时间"),(0,e.Uk)("\n        KeepAlive"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"60"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Second"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 保持长连接的时间"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("DialContext"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 设置连接的参数"),(0,e.Uk)("\n    MaxIdleConns"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)("          "),(0,e._)("span",{class:"token number"},"500"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 最大空闲连接"),(0,e.Uk)("\n    IdleConnTimeout"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)("       "),(0,e._)("span",{class:"token number"},"60"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Second"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 空闲连接的超时时间"),(0,e.Uk)("\n    ExpectContinueTimeout"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"30"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Second"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 等待服务第一个响应的超时时间"),(0,e.Uk)("\n    MaxIdleConnsPerHost"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)("   "),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 每个host保持的空闲连接数"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    times "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"50"),(0,e.Uk)("\n    uri "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"http://local.test.com/t.php"'),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token comment"},"// 短连接的情况"),(0,e.Uk)("\n    start "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Now"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    client "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" http"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Client"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 初始化http的client"),(0,e.Uk)("\n\n\n    "),(0,e._)("span",{class:"token comment"},"// 长连接的情况"),(0,e.Uk)("\n    start2 "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" time"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Now"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 初始化一个带有transport的http的client"),(0,e.Uk)("\n    client2 "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" http"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Client"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("Transport"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(" HTTPTransport"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br")])],-1),rs=(0,e._)("h2",{id:"_1-24-分布式锁的问题吗-分布式锁的原理你清楚吗",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-24-分布式锁的问题吗-分布式锁的原理你清楚吗","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.24. 分布式锁的问题吗?分布式锁的原理你清楚吗?")],-1),bs=(0,e._)("p",null,"golang 中的分布式锁可使用 etcd 进行实现,实现原理如下:",-1),ms=(0,e._)("ol",null,[(0,e._)("li",null,"利用租约在 etcd 集群中创建一个 key,这个 key 有两种形态,存在和不存在,而这两种 形态就是互斥量."),(0,e._)("li",null,"如果这个 key 不存在,那么线程创建 key,成功则获取到锁,该 key 就为存在状态."),(0,e._)("li",null,"如果该 key 已经存在,那么线程就不能创建 key,则获取锁失败.")],-1),Us=(0,e._)("h2",{id:"_1-25-go-实现-set-类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-25-go-实现-set-类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.25. go 实现 set 类型")],-1),ds=(0,e._)("p",null,"go 没有Set 类型的,Set 可以看做元素不能重复的list, go 提供了 map 类型, map 类型的 key 是不能重复的, 可以来实现一个 set.value 可以用一个常量来代替,比如一个空结构体,空结构体不占任何内存",-1),gs=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" Empty "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//set类型"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" Set "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    m "),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("Empty\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//返回一个set"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"SetFactory"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        m"),(0,e._)("span",{class:"token punctuation"},":"),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("Empty"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//添加元素"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Add"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("val "),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("val"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" empty\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//删除元素"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Remove"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("val "),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"delete"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//获取长度"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//清空set"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Clear"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("Empty"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//遍历set"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Traverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" v "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"//排序输出 "),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("Set"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"SortTraverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    vals "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" v "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("m "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        vals "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"append"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("vals"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token comment"},"//排序"),(0,e.Uk)("\n    sort"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Ints"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("vals"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"_"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" v "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" vals "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br")])],-1),hs=(0,e._)("h2",{id:"_1-26-了解空指针吗",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-26-了解空指针吗","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.26. 了解空指针吗")],-1),fs=(0,e._)("p",null,[(0,e._)("code",null,"var ptr *int")],-1),ys=(0,e._)("p",null,"当一个指针被声明而未初始化时,它的值为 nil, 即为空指针. nil代表零值或空值.",-1),vs=(0,e._)("h2",{id:"_1-27-内存逃逸",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-内存逃逸","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27. 内存逃逸")],-1),ws=(0,e._)("h3",{id:"_1-27-1-什么是内存逃逸",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-1-什么是内存逃逸","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27.1. 什么是内存逃逸?")],-1),xs=(0,e._)("p",null,'在程序中,每个函数块都会有自己的内存区域用来存自己的局部变量(内存占用少),返回地址,返回值之类的数据,这一块内存区域有特定的结构和寻址方式,寻址起来十分迅速,开销很少.这一块内存地址称为栈.栈是线程级别的,大小在创建的时候已经确定,当变量太大的时候,会"逃逸"到堆上,这种现象称为内存逃逸.简单来说,局部变量通过堆分配和回收,就叫内存逃逸.',-1),Ps=(0,e._)("h3",{id:"_1-27-2-逃逸是如何产生的",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-2-逃逸是如何产生的","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27.2. 逃逸是如何产生的?")],-1),Ss=(0,e._)("p",null,"如果一个函数返回对一个变量的引用,那么它就会发生逃逸.即任何时候,一个值被分享到函数栈范围之外,它都会在堆上被重新分配.在这里有一个例外,就是如果编译器可以证明在函数返回后不会再被引用的,那么就会分配到栈上,这个证明的过程叫做逃逸分析.",-1),Ts=(0,e._)("h3",{id:"_1-27-3-总结",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-3-总结","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27.3. 总结")],-1),Cs=(0,e._)("p",null,"如果函数外部没有引用,则优先放到栈中; 如果函数外部存在引用,则必定放到堆中;",-1),Gs=(0,e._)("h3",{id:"_1-27-4-内存逃逸的危害",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-4-内存逃逸的危害","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27.4. 内存逃逸的危害")],-1),Ms=(0,e._)("p",null,'堆是一块没有特定结构,也没有固定大小的内存区域,可以根据需要进行调整.全局变量,内存占用较大的局部变量,函数调用结束后不能立刻回收的局部变量都会存在堆里面.变量在堆上的分配和回收都比在栈上开销大的多.对于 go 这种带 GC 的语言来说,会增加 gc 压力,同时也容易造成内存碎片(采用分区式存储管理的系统,在储存分配过程中产生的,不能供用户作业使用的主存里的小分区称成"内存碎片".内存碎片分为内部碎片和外部碎片).',-1),js=(0,e._)("h3",{id:"_1-27-5-demo",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-27-5-demo","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.27.5. demo")],-1),Ls=(0,e._)("p",null,[(0,e._)("code",null,'go run -gcflags "-m -l" main.go')],-1),Rs=(0,e._)("p",null,[(0,e.Uk)("使用 go run 运行程序时,-gcflags 参数是编译参数.其中 -m 表示进行内存分配分析,-l 表示避免程序内联,也就是避免进行程序优化. "),(0,e._)("img",{src:t,alt:"picture 8"})],-1),Bs=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"demo"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("user "),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//声名一个变量并赋值"),(0,e.Uk)("\n     "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" admin "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(" \n     admin "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" user\n     "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" admin\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//空的没啥用的方法"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"void"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token comment"},"// 声明user变量并打印"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" user "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(" \n    "),(0,e._)("span",{class:"token function"},"void"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 存在内存逃逸"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("user"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"demo"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br")])],-1),Es=(0,e._)("h2",{id:"_1-28-golang的init函数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-28-golang的init函数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.28. golang的init函数")],-1),Js=(0,e._)("p",null,"初始化每个包后,会自动执行 init()函数,init函数执行优先级高于main函数的执行优先级",-1),Hs=(0,e._)("h3",{id:"_1-28-1-init函数的主要特点",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-28-1-init函数的主要特点","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.28.1. init函数的主要特点")],-1),Is=(0,e._)("ol",null,[(0,e._)("li",null,"init函数先于main函数自动执行,不能被其他函数调用;"),(0,e._)("li",null,"init函数没有入参, 返回值;"),(0,e._)("li",null,"每个包可以有多个init函数;"),(0,e._)("li",null,"包的每个源文件也可以有多个init函数, init()调用顺序是从上到下"),(0,e._)("li",null,'同包的不同文件按文件名字符串比较, "从小到大"顺序调用各文件中的init()函数.'),(0,e._)("li",null,"不同包的init函数按照包导入的依赖关系决定执行顺序.")],-1),Ds=(0,e._)("h2",{id:"_1-29-go语言局部变量分配在栈还是堆",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-29-go语言局部变量分配在栈还是堆","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.29. go语言局部变量分配在栈还是堆")],-1),Fs=(0,e._)("p",null,"函数内局部变量,它会被分配在堆还是栈,是由编译器做逃逸分析之后自动做出的决定.",-1),Ws=(0,e._)("h2",{id:"_1-30-golang函数返回局部变量的指针是否安全",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-30-golang函数返回局部变量的指针是否安全","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.30. golang函数返回局部变量的指针是否安全")],-1),As=(0,e._)("p",null,"安全, go 编译器将会对每个局部变量进行逃逸分析.如果发现局部变量的作用域超出该函数,则不会将内存分配在栈上,而是分配在堆上",-1),Ks=(0,e._)("h2",{id:"_1-31-go中两个nil可能不相等吗",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-31-go中两个nil可能不相等吗","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.31. go中两个nil可能不相等吗")],-1),Ns=(0,e._)("p",null,"两个nil只有在类型相同时才相等.",-1),Vs=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" p "),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token keyword"},"interface"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("p "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// false"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),qs=(0,e._)("h2",{id:"_1-32-非接口的任意类型-t-能够调用-t-的方法吗-反过来呢",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-32-非接口的任意类型-t-能够调用-t-的方法吗-反过来呢","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.32. 非接口的任意类型 T() 能够调用 *T 的方法吗? 反过来呢?")],-1),zs=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e.Uk)("一个T类型的值可以调用为"),(0,e._)("code",null,"*T"),(0,e.Uk)("类型声明的方法,但是仅当此T的值是可寻址的情况下.编译器在调用指针属主方法前,会自动取此T值的地址.因为不是任何T值都是可寻址的,所以并非任何T值都能够调用为类型*T声明的方法.")]),(0,e._)("li",null,[(0,e.Uk)("一个"),(0,e._)("code",null,"*T"),(0,e.Uk)("类型的值可以调用为类型T声明的方法,这是因为解引用指针总是合法的.")])],-1),Os=(0,e._)("h2",{id:"_1-33-golang判断map中key是否存在的方法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-33-golang判断map中key是否存在的方法","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.33. golang判断map中key是否存在的方法")],-1),Zs=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    dict "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token string"},'"key1"'),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"key2"'),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" value"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" ok "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(" dict"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"key1"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" ok "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"key1 不存在"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),Ys=(0,e._)("h2",{id:"_1-34-golang比较两个字符串切片是否相等",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-34-golang比较两个字符串切片是否相等","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.34. golang比较两个字符串切片是否相等")],-1),Qs=(0,e._)("p",null,"遍历比较切片中的每一个元素",-1),Xs=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"CompareSlice"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" b "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"string"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"bool"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" a "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(" b"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("key"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br")])],-1),$s=(0,e._)("h2",{id:"_1-35-go-打印结构体-使用-v-v-v-的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-35-go-打印结构体-使用-v-v-v-的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.35. go 打印结构体, 使用 %v %+v %#v 的区别")],-1),na=(0,e._)("ol",null,[(0,e._)("li",null,"%v 输出所有的值"),(0,e._)("li",null,"%+v 输出结构体(字段名字+字段的值)"),(0,e._)("li",null,"%#v 先输出结构体变量名,再输出结构体(字段名字+字段的值)")],-1),sa=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" student "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n id   "),(0,e._)("span",{class:"token builtin"},"int32"),(0,e.Uk)("\n name "),(0,e._)("span",{class:"token builtin"},"string"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n \n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    a "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("student"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("id"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" name"),(0,e._)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"xiaoming"'),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"%v \\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" a"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"%+v \\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" a"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Printf"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"%#v \\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" a"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// output:"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// &{1 xiaoming} "),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// &{id:1 name:xiaoming} "),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},'// &main.student{id:1, name:"xiaoming"} '),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br")])],-1),aa=(0,e._)("h2",{id:"_1-36-golang的枚举类型",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-36-golang的枚举类型","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.36. golang的枚举类型")],-1),ea=(0,e._)("p",null,"go语言并没有提供enum的定义,可以使用const来模拟枚举类型.",-1),ta=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("\n    Running "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"iota"),(0,e.Uk)("\n    Pending\n    Stopped\n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"State running: "'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" Running"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"State pending: "'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" Pending"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"State Stoped: "'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" Stopped"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br")])],-1),la=(0,e._)("h2",{id:"_1-37-go-空结构体-struct-的用途",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-37-go-空结构体-struct-的用途","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.37. go 空结构体 struct{} 的用途")],-1),oa=(0,e._)("p",null,"空结构体 struct{} 不占据内存空间, 通常作为占位符使用.",-1),ca=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n s "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"struct"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("unsafe"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Sizeof"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 0 "),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),pa=(0,e._)("h2",{id:"_1-38-go中的nil切片和空切片区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-38-go中的nil切片和空切片区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.38. go中的nil切片和空切片区别")],-1),_a=(0,e._)("ol",null,[(0,e._)("li",null,"nil slice 未分配内存, 只是声明了slice"),(0,e._)("li",null,"empty slice 已分配内存")],-1),ua=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" slice "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\nslice"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"//err"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),ka=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e.Uk)("slice "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"make"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nslice "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),ia=(0,e._)("h2",{id:"_1-39-go的defer原理是什么",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-39-go的defer原理是什么","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.39. go的defer原理是什么")],-1),ra=(0,e._)("h3",{id:"_1-39-1-如何理解-defer-关键字",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-39-1-如何理解-defer-关键字","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.39.1. 如何理解 defer 关键字")],-1),ba=(0,e._)("p",null,"defer 用于延迟执行一个函数. 常用于处理如资源释放,连接关闭等问题, 会在函数返回之前进行调用",-1),ma=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"A"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"B"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"C"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// A"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// C"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// B"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br")])],-1),Ua=(0,e._)("h3",{id:"_1-39-2-多个-defer-的顺序",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-39-2-多个-defer-的顺序","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.39.2. 多个 defer 的顺序")],-1),da=(0,e._)("p",null,"如果有多个defer 表达式,执行顺序为先进后出, 类似于栈.",-1),ga=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"a"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"b"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(" fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"c"'),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// c"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// b"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// a"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),ha=(0,e._)("h3",{id:"_1-39-3-defer-在什么时候会修改返回值",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-39-3-defer-在什么时候会修改返回值","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.39.3. defer 在什么时候会修改返回值?")],-1),fa=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"main"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"return:"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"b"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 打印结果为 return: 2"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"b"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 提前声明了返回值i"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n  fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"defer2:"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 打印结果为 defer: 2"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n  fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"defer1:"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 打印结果为 defer: 1"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token comment"},"// 或者直接 return 效果相同"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 函数的返回值提前声明,这使得defer可以直接访问该返回值,  return最先执行,return负责"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 将结果写入返回值中;接着defer开始执行一些收尾工作;最后函数携带当前返回值退出."),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),ya=(0,e._)("h3",{id:"_1-39-3-defer-recover-的问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-39-3-defer-recover-的问题","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.39.3. defer recover 的问题?")],-1),va=(0,e._)("p",null,"不建议在编写普通函数时也经常性使用这种特性",-1),wa=(0,e._)("p",null,"panic 终止程序的运行,recover 捕获异常,程序在发生错误后,我们能够做一些处理,保证程序可以继续运行,那么这时候,我们就需要使用异常恢复,即 recover.golang 中的 recover 一般都是配套 defer 一起使用.",-1),xa=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"defer"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"recover"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"nil"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fmt"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Println"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"Recovered in f"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),Pa=(0,e._)("h2",{id:"_1-40-闭包与匿名函数",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-40-闭包与匿名函数","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.40. 闭包与匿名函数")],-1),Sa=(0,e._)("p",null,"defer 经常使用到闭包与匿名函数.",-1),Ta=(0,e._)("ol",null,[(0,e._)("li",null,"匿名函数:没有函数名的函数."),(0,e._)("li",null,"闭包:可以使用另外一个函数作用域中的变量的函数.")],-1),Ca=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"intSeq"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    i "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"//  闭包, 匿名函数"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"func"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" i\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),Ga=(0,e._)("h2",{id:"_1-41-go的-slice如何扩容",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-41-go的-slice如何扩容","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.41. go的 slice如何扩容")],-1),Ma=(0,e._)("p",null,"slice是可以看做是一个长度可变的数组.",-1),ja=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"type"),(0,e.Uk)(" slice "),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 指向一个数组的指针"),(0,e.Uk)("\n array unsafe"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("Pointer\n"),(0,e._)("span",{class:"token comment"},"// 切片的长度"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token builtin"},"len"),(0,e.Uk)("   "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//  切片的容量"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token builtin"},"cap"),(0,e.Uk)("   "),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),La=(0,e._)("p",null,"在对slice进行append等操作时,可能会造成slice的自动扩容.",-1),Ra=(0,e._)("ol",null,[(0,e._)("li",null,"如果切片的容量小于1024个元素,那么扩容的时候slice的cap就乘以2;一旦元素个数超过1024个元素,增长因子就变成1.25,即每次增加原来容量的四分之一."),(0,e._)("li",null,"slice 扩容后,还没有触及到原数组的容量,那么 slice 中的数组指针依然指向原数组."),(0,e._)("li",null,"slice 扩容后,超过了原数组的容量,那么 Go 会开辟一块新的内存,把原数组拷贝进去,slice 中的数组指针指向新数组.")],-1),Ba=(0,e._)("h2",{id:"_1-42-同步-异步和阻塞-非阻塞的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-42-同步-异步和阻塞-非阻塞的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.42. 同步, 异步和阻塞, 非阻塞的区别?")],-1),Ea=(0,e._)("p",null,"同步是个过程,阻塞是线程的一种状态",-1),Ja=(0,e._)("h3",{id:"_1-42-1-同步和异步的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-42-1-同步和异步的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.42.1. 同步和异步的区别")],-1),Ha=(0,e._)("p",null,"同步与异步是线程之间的关系,两个线程之间要么是同步的,要么是异步的.",-1),Ia=(0,e._)("ol",null,[(0,e._)("li",null,"同步: 发起一个请求, 必须要等到响应结果才能发起下一个请求."),(0,e._)("li",null,"异步: 发起一个请求, 不需要等到响应结果就能发起下一个请求.")],-1),Da=(0,e._)("h3",{id:"_1-42-2-阻塞与非阻塞的区别",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-42-2-阻塞与非阻塞的区别","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.42.2. 阻塞与非阻塞的区别")],-1),Fa=(0,e._)("p",null,"阻塞与非阻塞是是程序在等待响应结果时的状态, 对同一个线程来说的,在某个时刻,线程要么处于阻塞,要么处于非阻塞",-1),Wa=(0,e._)("ol",null,[(0,e._)("li",null,"阻塞:调用结果返回之前,当前线程会被挂起,一直处于等待消息通知,不能够执行其他业务,函数只有在得到结果之后才会返回."),(0,e._)("li",null,"非阻塞:在不能立刻得到结果之前,该函数不会阻塞当前线程,而会立刻返回.")],-1),Aa=(0,e._)("h2",{id:"_1-43-golang-中切片去重",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-43-golang-中切片去重","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.43. golang 中切片去重")],-1),Ka=(0,e._)("h3",{id:"_1-43-1-双重循环过滤",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-43-1-双重循环过滤","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.43.1. 双重循环过滤")],-1),Na=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 通过两重循环过滤重复元素"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"RemoveRepByLoop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("slc "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n result "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 存放结果"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" slc "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  flag "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" result "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" slc"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    flag "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 存在重复元素,标识为false"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n   "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(" flag "),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 标识为false,不添加进结果"),(0,e.Uk)("\n   result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"append"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" slc"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),Va=(0,e._)("h3",{id:"_1-43-2-通过字典-set-过滤",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-43-2-通过字典-set-过滤","aria-hidden":"true"},"#"),(0,e.Uk)(" 1.43.2. 通过字典(set)过滤")],-1),qa=(0,e._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,e._)("pre",{class:"language-go"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 通过map主键唯一的特性过滤重复元素"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"func"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"RemoveRepByMap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("slc "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    result "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    tempMap "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token builtin"},"int"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token builtin"},"byte"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 存放不重复主键"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"_"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" e "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"range"),(0,e.Uk)(" slc"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        l "),(0,e._)("span",{class:"token operator"},":="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tempMap"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        tempMap"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"len"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tempMap"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(" l"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 加入map后,map长度变化,则元素不重复"),(0,e.Uk)("\n            result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"append"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),za={},Oa=(0,a(3744).Z)(za,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,o,c,p,_,u,k,i,r,b,m,U,d,g,h,f,y,v,w,x,P,S,T,C,G,M,j,L,R,B,E,J,H,I,D,F,W,A,K,N,V,q,z,O,Z,Y,Q,X,$,nn,sn,an,en,tn,ln,on,cn,pn,_n,un,kn,rn,bn,mn,Un,dn,gn,hn,fn,yn,vn,wn,xn,Pn,Sn,Tn,Cn,Gn,Mn,jn,Ln,Rn,Bn,En,Jn,Hn,In,Dn,Fn,Wn,An,Kn,Nn,Vn,qn,zn,On,Zn,Yn,Qn,Xn,$n,ns,ss,as,es,ts,ls,os,cs,ps,_s,us,ks,is,rs,bs,ms,Us,ds,gs,hs,fs,ys,vs,ws,xs,Ps,Ss,Ts,Cs,Gs,Ms,js,Ls,Rs,Bs,Es,Js,Hs,Is,Ds,Fs,Ws,As,Ks,Ns,Vs,qs,zs,Os,Zs,Ys,Qs,Xs,$s,na,sa,aa,ea,ta,la,oa,ca,pa,_a,ua,ka,ia,ra,ba,ma,Ua,da,ga,ha,fa,ya,va,wa,xa,Pa,Sa,Ta,Ca,Ga,Ma,ja,La,Ra,Ba,Ea,Ja,Ha,Ia,Da,Fa,Wa,Aa,Ka,Na,Va,qa],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},5586:(n,s,a)=>{n.exports=a.p+"assets/img/1647688069247.ef9559d4.png"}}]);