"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[463],{9710:(l,e,a)=>{a.r(e),a.d(e,{data:()=>n});const n={key:"v-e5db5942",path:"/java/basic.html",title:"1. Java 基础",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. 面向对象和面向过程的区别",slug:"_1-1-面向对象和面向过程的区别",children:[]},{level:2,title:"1.2. Java 语言有哪些特点?",slug:"_1-2-java-语言有哪些特点",children:[]},{level:2,title:"1.3. Java 虚拟机 (JVM)",slug:"_1-3-java-虚拟机-jvm",children:[{level:3,title:"1.3.1. 什么是字节码?采用字节码的好处是什么?",slug:"_1-3-1-什么是字节码-采用字节码的好处是什么",children:[]}]},{level:2,title:"1.4. JDK 和 JRE",slug:"_1-4-jdk-和-jre",children:[]},{level:2,title:"1.5. 字符型常量 (char) 和字符串常量 (string) 的区别?",slug:"_1-5-字符型常量-char-和字符串常量-string-的区别",children:[{level:3,title:"1.5.1. 形式上",slug:"_1-5-1-形式上",children:[]},{level:3,title:"1.5.2. 含义上",slug:"_1-5-2-含义上",children:[]},{level:3,title:"1.5.3. 占内存大小",slug:"_1-5-3-占内存大小",children:[]}]},{level:2,title:"1.6. String 创建对象问题",slug:"_1-6-string-创建对象问题",children:[]},{level:2,title:"1.7. 构造器 Constructor 是否可被 override?",slug:"_1-7-构造器-constructor-是否可被-override",children:[]},{level:2,title:"1.8. 重载和重写的区别",slug:"_1-8-重载和重写的区别",children:[{level:3,title:"1.8.1. 重载",slug:"_1-8-1-重载",children:[]},{level:3,title:"1.8.2. 重写",slug:"_1-8-2-重写",children:[]}]},{level:2,title:"1.9. Java 面向对象编程三大特性:封装 继承 多态",slug:"_1-9-java-面向对象编程三大特性-封装-继承-多态",children:[{level:3,title:"1.9.1. 封装",slug:"_1-9-1-封装",children:[]},{level:3,title:"1.9.2. 继承",slug:"_1-9-2-继承",children:[]},{level:3,title:"1.9.3. 多态",slug:"_1-9-3-多态",children:[]}]},{level:2,title:"1.10. String, StringBuffer 和 StringBuilder 的区别是什么?String 为什么是不可变的?",slug:"_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的",children:[{level:3,title:"1.10.1. 可变性",slug:"_1-10-1-可变性",children:[]},{level:3,title:"1.10.2. 线程安全性",slug:"_1-10-2-线程安全性",children:[]},{level:3,title:"1.10.3. 性能",slug:"_1-10-3-性能",children:[]}]},{level:2,title:"1.11. 自动装箱与拆箱",slug:"_1-11-自动装箱与拆箱",children:[]},{level:2,title:"1.12. 在一个静态方法内调用一个非静态成员为什么是非法的?",slug:"_1-12-在一个静态方法内调用一个非静态成员为什么是非法的",children:[]},{level:2,title:"1.13. 在 Java 中定义一个不做事且没有参数的构造方法的作用",slug:"_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用",children:[]},{level:2,title:"1.14. 接口和抽象类的区别是什么?",slug:"_1-14-接口和抽象类的区别是什么",children:[]},{level:2,title:"1.15. 成员变量与局部变量的区别有哪些?",slug:"_1-15-成员变量与局部变量的区别有哪些",children:[{level:3,title:"1.15.1. 从语法形式上看",slug:"_1-15-1-从语法形式上看",children:[]},{level:3,title:"1.15.2. 从变量在内存中的存储方式来看",slug:"_1-15-2-从变量在内存中的存储方式来看",children:[]},{level:3,title:"1.15.3. 从变量在内存中的生存时间上看",slug:"_1-15-3-从变量在内存中的生存时间上看",children:[]},{level:3,title:"1.15.4. 成员变量如果没有被赋初值",slug:"_1-15-4-成员变量如果没有被赋初值",children:[]}]},{level:2,title:"1.16. 创建一个对象用什么运算符? 对象实体与对象引用有何不同?",slug:"_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同",children:[]},{level:2,title:"1.17. 什么是方法的返回值?返回值在类的方法里的作用是什么?",slug:"_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么",children:[]},{level:2,title:"1.18. 一个类的构造方法的作用是什么?若一个类没有声明构造方法, 该程序能正确执行吗?为什么?",slug:"_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么",children:[]},{level:2,title:"1.19. 构造方法有哪些特性?",slug:"_1-19-构造方法有哪些特性",children:[]},{level:2,title:"1.20. 静态方法和实例方法有何不同",slug:"_1-20-静态方法和实例方法有何不同",children:[]},{level:2,title:"1.21. 对象的相等与指向他们的引用相等, 两者有什么不同?",slug:"_1-21-对象的相等与指向他们的引用相等-两者有什么不同",children:[]},{level:2,title:"1.22. 在调用子类构造方法之前会先调用父类没有参数的构造方法, 其目的是?",slug:"_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是",children:[]},{level:2,title:"1.23. hashCode 与 equals (重要)",slug:"_1-23-hashcode-与-equals-重要",children:[{level:3,title:"1.23.1. hashCode() 介绍",slug:"_1-23-1-hashcode-介绍",children:[]},{level:3,title:"1.23.2. 为什么要有 hashCode?",slug:"_1-23-2-为什么要有-hashcode",children:[]},{level:3,title:"1.23.3. 为什么重写 equals 时必须重写 hashCode 方法?",slug:"_1-23-3-为什么重写-equals-时必须重写-hashcode-方法",children:[]},{level:3,title:"1.23.4. 为什么两个对象有相同的 hashcode 值, 它们也不一定是相等的?",slug:"_1-23-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的",children:[]}]},{level:2,title:"1.24. 为什么 Java 中只有值传递?",slug:"_1-24-为什么-java-中只有值传递",children:[]},{level:2,title:"1.25. 关于 final 关键字的一些总结",slug:"_1-25-关于-final-关键字的一些总结",children:[]},{level:2,title:"1.26. java 访问修饰符",slug:"_1-26-java-访问修饰符",children:[]},{level:2,title:"1.27. Java 中的异常处理",slug:"_1-27-java-中的异常处理",children:[{level:3,title:"1.27.1. Java 异常类层次结构图",slug:"_1-27-1-java-异常类层次结构图",children:[]},{level:3,title:"1.27.2. Throwable 类常用方法",slug:"_1-27-2-throwable-类常用方法",children:[]},{level:3,title:"1.27.3. 异常处理总结",slug:"_1-27-3-异常处理总结",children:[]}]},{level:2,title:"1.28. Java 序列化中如果有些字段不想进行序列化, 怎么办?",slug:"_1-28-java-序列化中如果有些字段不想进行序列化-怎么办",children:[]},{level:2,title:"1.29. Java 中 IO 流",slug:"_1-29-java-中-io-流",children:[{level:3,title:"1.29.1. Java 中 IO 流分为几种?",slug:"_1-29-1-java-中-io-流分为几种",children:[]},{level:3,title:"1.29.2. 既然有了字节流, 为什么还要有字符流?",slug:"_1-29-2-既然有了字节流-为什么还要有字符流",children:[]},{level:3,title:"1.29.3. BIO, NIO, AIO 有什么区别?",slug:"_1-29-3-bio-nio-aio-有什么区别",children:[]}]},{level:2,title:"1.30. 深拷贝 vs 浅拷贝",slug:"_1-30-深拷贝-vs-浅拷贝",children:[]},{level:2,title:"1.31. servlet 特性",slug:"_1-31-servlet-特性",children:[]},{level:2,title:"1.32. servlet 是单实例的吗?",slug:"_1-32-servlet-是单实例的吗",children:[]},{level:2,title:"1.33. servlet 是线程安全的吗?为什么?",slug:"_1-33-servlet-是线程安全的吗-为什么",children:[]},{level:2,title:"1.34. servlet 生命周期",slug:"_1-34-servlet-生命周期",children:[]},{level:2,title:"1.35. 谈谈过滤器的作用",slug:"_1-35-谈谈过滤器的作用",children:[]},{level:2,title:"1.36. 谈谈拦截器的作用",slug:"_1-36-谈谈拦截器的作用",children:[]},{level:2,title:"1.37. 拦截器和过滤器有什么区别",slug:"_1-37-拦截器和过滤器有什么区别",children:[]},{level:2,title:"1.38. 拦截器和过滤器的执行顺序",slug:"_1-38-拦截器和过滤器的执行顺序",children:[]}],filePathRelative:"java/basic.md",git:{updatedTime:1654691348e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:16},{name:"kuro-tsuchi",email:"kurotsuchi33@gmail.com",commits:3}]}}},8384:(l,e,a)=>{a.r(e),a.d(e,{default:()=>va});var n=a(6252),i=a(2173),r=a(9786),t=a(3717),_=a(2838),s=a(910),d=a(938);const h=(0,n._)("h1",{id:"_1-java-基础",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-java-基础","aria-hidden":"true"},"#"),(0,n.Uk)(" 1. Java 基础")],-1),u=(0,n._)("h2",{id:"_1-1-面向对象和面向过程的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-1-面向对象和面向过程的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.1. 面向对象和面向过程的区别")],-1),c=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,"面向过程: 把程序视为一组函数的顺序执行")]),(0,n._)("li",null,[(0,n._)("p",null,"面向对象: 把程序视为一组对象的集合,而每个对象都可以接收其他对象发过来的消息,并处理这些消息"),(0,n._)("p",null,"面向对象易维护, 易复用, 易扩展.因为面向对象有封装, 继承, 多态性的特性, 可以设计出低耦合的系统, 使系统更加灵活, 更加易于维护. 面向过程性能比面向对象高.类调用时需要实例化, 比较消耗资源, 所以当性能是最重要的考量因素的时候, 比如单片机, 嵌入式开发, Linux/Unix 等一般采用面向过程开发.")])],-1),o=(0,n._)("h2",{id:"_1-2-java-语言有哪些特点",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-2-java-语言有哪些特点","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.2. Java 语言有哪些特点?")],-1),v=(0,n._)("ol",null,[(0,n._)("li",null,"简单易学;"),(0,n._)("li",null,"面向对象, 三大特性封装, 继承, 多态;"),(0,n._)("li",null,"Java 虚拟机实现平台无关性;"),(0,n._)("li",null,"可靠性;"),(0,n._)("li",null,"安全性;"),(0,n._)("li",null,"支持多线程"),(0,n._)("li",null,"支持网络编程"),(0,n._)("li",null,"编译与解释并存;")],-1),p=(0,n._)("h2",{id:"_1-3-java-虚拟机-jvm",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-3-java-虚拟机-jvm","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.3. Java 虚拟机 (JVM)")],-1),g=(0,n._)("p",null,"JVM 是运行 Java 字节码的虚拟机. JVM 针对不同操作系统 (Windows, Linux, macOS) 有不同的实现, 目的是使用相同的字节码, 它们都会给出相同的结果.",-1),k=(0,n._)("h3",{id:"_1-3-1-什么是字节码-采用字节码的好处是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-3-1-什么是字节码-采用字节码的好处是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.3.1. 什么是字节码?采用字节码的好处是什么?")],-1),b=(0,n._)("p",null,"字节码(.class)是Java编译器编译Java源文件（.java）产生的二进制文件。",-1),f=(0,n._)("p",null,"Java 源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行。",-1),U=(0,n._)("p",null,"java 语言通过字节码的方式, 在一定程度上解决了传统解释型语言执行效率低的问题, 同时又保留了解释型语言可移植的特点.所以 Java 程序运行时比较高效, 而且, 由于字节码并不针对一种特定的机器, 因此, Java 程序无须重新编译便可在多种不同操作系统的计算机上运行.",-1),x=(0,n._)("h2",{id:"_1-4-jdk-和-jre",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-4-jdk-和-jre","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.4. JDK 和 JRE")],-1),S=(0,n._)("p",null,"JDK (Java Development Kit) , 它是功能齐全的 Java SDK.它拥有 JRE 所拥有的一切, 还有编译器 (javac) 和工具 (如 javadoc 和 jdb). 它能够创建和编译程序.",-1),m=(0,n._)("p",null,"JRE (Java Runtime Environment, Java 运行时环境), JRE 可以让计算机系统运行 Java应用程序, 包括 Java 虚拟机 (JVM), Java 类库, java 命令和其他的一些基础构件.但是,它不能用于创建新程序.",-1),J=(0,n._)("h2",{id:"_1-5-字符型常量-char-和字符串常量-string-的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-5-字符型常量-char-和字符串常量-string-的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.5. 字符型常量 (char) 和字符串常量 (string) 的区别?")],-1),j=(0,n._)("h3",{id:"_1-5-1-形式上",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-5-1-形式上","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.5.1. 形式上")],-1),O=(0,n._)("p",null,"字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符",-1),I=(0,n._)("h3",{id:"_1-5-2-含义上",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-5-2-含义上","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.5.2. 含义上")],-1),y=(0,n._)("p",null,"字符常量相当于一个整型值 ( ASCII 值), 可以参加表达式运算; 字符串常量代表一个地址值",-1),w=(0,n._)("h3",{id:"_1-5-3-占内存大小",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-5-3-占内存大小","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.5.3. 占内存大小")],-1),C=(0,n._)("p",null,"字符常量只占 2 个字节; 字符串常量占若干个字节",-1),E=(0,n._)("h2",{id:"_1-6-string-创建对象问题",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-6-string-创建对象问题","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.6. String 创建对象问题")],-1),N=(0,n._)("ol",null,[(0,n._)("li",null,'String s = "abc" 在创建这个对象时, 会在常量池中看有没有 abc 这个字符串; 如果没有, 则会在常量池中创建一个; 如果有则不创建.'),(0,n._)("li",null,'String s1 = "a" +"b"+"c" 在字符串常量相加时, 编译器编译时产生的字节码, 会把如"a" +"b"+"c" 优化为 "abc".所以只会产生一个对象'),(0,n._)("li",null,'String s = new String ("abc"); 在创建这个对象时因为使用了 new 关键字, 所以肯定会在堆中创建一个对象.然后会在常量池中看有没有 abc 这个字符串; 如果没有 此时还会在常量池中创建一个; 如果有 则不创建.所以一共会产生两个对象'),(0,n._)("li",null,[(0,n.Uk)('String s = "abc"; String s1= s + "ab"; 在变量与常量进行相加时, \'+\'可以理解:为 利用加号进行拼接字符串. '),(0,n._)("ul",null,[(0,n._)("li",null,'在底层内部中会生成新的 StringBuilder 对象, 调用 SringBuilder 中的 append 方 法进行拼接, new StringBuilder.append(s).append("ab");'),(0,n._)("li",null,'拼接完成之后会调用 StringBuilder.toString()方法返回一个 String 的对象 "abcab". new StringBuilder.append(s).append("ab").toString();')])])],-1),B=(0,n._)("h2",{id:"_1-7-构造器-constructor-是否可被-override",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-7-构造器-constructor-是否可被-override","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.7. 构造器 Constructor 是否可被 override?")],-1),q=(0,n._)("p",null,"Constructor 不能被 override(重写), 但是可以 overload(重载), 一个类中有多个构造函数.",-1),A=(0,n._)("h2",{id:"_1-8-重载和重写的区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-重载和重写的区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8. 重载和重写的区别")],-1),M=(0,n._)("h3",{id:"_1-8-1-重载",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-1-重载","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8.1. 重载")],-1),Y=(0,n._)("p",null,"发生在同一个类中, 方法名必须相同, 参数类型, 个数, 顺序不同, 方法返回值和访问修饰符可以不同.",-1),R=(0,n._)("h3",{id:"_1-8-2-重写",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-8-2-重写","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.8.2. 重写")],-1),D=(0,n._)("p",null,"重写发生在运行期, 是子类对父类的允许访问的方法进行重写.",-1),H=(0,n._)("ol",null,[(0,n._)("li",null,"返回值类型, 方法名, 参数列表必须相同, 返回值类型应小于等于父类, 抛出的异常范围小于等于父类, 访问修饰符范围大于等于父类."),(0,n._)("li",null,"如果父类方法访问修饰符为 private/final/static 则子类不能重写该方法, 但是被static 修饰的方法能够被再次声明."),(0,n._)("li",null,"构造方法无法被重写")],-1),T=(0,n._)("blockquote",null,[(0,n._)("p",null,"重写的返回值类型:如果方法的返回类型是 void 和基本数据类型, 则返回值重写时不可修改.但是如果方法的返回值是引用类型, 重写时是可以返回该引用类型的子类的.")],-1),V=(0,n._)("h2",{id:"_1-9-java-面向对象编程三大特性-封装-继承-多态",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-java-面向对象编程三大特性-封装-继承-多态","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9. Java 面向对象编程三大特性:封装 继承 多态")],-1),K=(0,n._)("h3",{id:"_1-9-1-封装",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-1-封装","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.1. 封装")],-1),P=(0,n._)("p",null,"封装是把一个对象的属性私有化,实现细节部分隐藏起来, 同时提供一些可以被外界访问的属性的方法",-1),L=(0,n._)("h3",{id:"_1-9-2-继承",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-2-继承","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.2. 继承")],-1),F=(0,n._)("p",null,"继承是使用已存在的类作为基础建立新类",-1),W=(0,n._)("ol",null,[(0,n._)("li",null,"子类拥有父类对象所有的属性和方法 (包括私有属性和私有方法), 但是父类中的私有属性和方法子类是无法访问, 只是拥有."),(0,n._)("li",null,"子类可以拥有自己属性和方法, 即子类可以对父类进行扩展."),(0,n._)("li",null,"子类可以用自己的方式实现父类的方法.")],-1),Z=(0,n._)("h3",{id:"_1-9-3-多态",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-9-3-多态","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.9.3. 多态")],-1),z=(0,n._)("p",null,"多态是指程序中定义的引用变量所指向的具体类和通过该引用变量发出的方法调用在编译时并不确定, 而是在程序运行期间才确定",-1),Q=(0,n._)("p",null,"在 Java 中有两种形式可以实现多态:继承 (多个子类对同一方法的重写) 和接口 (实现接口并覆盖接口中同一方法).",-1),G=(0,n._)("h2",{id:"_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10. String, StringBuffer 和 StringBuilder 的区别是什么?String 为什么是不可变的?")],-1),X=(0,n._)("h3",{id:"_1-10-1-可变性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-1-可变性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.1. 可变性")],-1),$=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("String 不可变, String 类中使用 final 关键字修饰字符数组来保存字符串, "),(0,n._)("code",null,"private final char value[]"),(0,n.Uk)(", 所以 String 对象是不可变的.")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("StringBuilder 与 StringBuffer 可变, 他们都继承自 AbstractStringBuilder 类, 在AbstractStringBuilder 中也是使用字符数组保存字符串 "),(0,n._)("code",null,"char[]value"),(0,n.Uk)(", 但是没有用final 关键字修饰")])])],-1),ll=(0,n._)("h3",{id:"_1-10-2-线程安全性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-2-线程安全性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.2. 线程安全性")],-1),el=(0,n._)("ol",null,[(0,n._)("li",null,"String 中的对象是不可变的, 也就可以理解为常量, 线程安全."),(0,n._)("li",null,"StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁, 所以是线程安全的."),(0,n._)("li",null,"StringBuilder 并没有对方法进行加同步锁, 所以是非线程安全的.")],-1),al=(0,n._)("h3",{id:"_1-10-3-性能",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-10-3-性能","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.10.3. 性能")],-1),nl=(0,n._)("ol",null,[(0,n._)("li",null,"操作少量的数据:适用 String, 每次对 String 类型进行改变的时候, 都会生成一个新的 String 对象, 然后将指针指向新的 String 对象."),(0,n._)("li",null,"StringBuffer 适用于多线程操作字符串缓冲区下操作大量数据, StringBuffer 每次都 会对 StringBuffer 对象本身进行操作, 而不是生成新的对象并改变对象引用."),(0,n._)("li",null,"StringBuilder 适用于单线程操作字符串缓冲区下操作大量数据,StringBuilder 相比使 用 StringBuffer 仅能获得 10%~15% 左右的性能提升, 但却要冒多线程不安全的风险.")],-1),il=(0,n._)("h2",{id:"_1-11-自动装箱与拆箱",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-11-自动装箱与拆箱","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.11. 自动装箱与拆箱")],-1),rl=(0,n._)("ol",null,[(0,n._)("li",null,"装箱:将基本数据类型转换为包装类型;"),(0,n._)("li",null,"拆箱:将包装类型转换为基本数据类型;")],-1),tl=(0,n._)("p",null,[(0,n._)("img",{src:i,alt:"picture 1"})],-1),_l=(0,n._)("h2",{id:"_1-12-在一个静态方法内调用一个非静态成员为什么是非法的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-12-在一个静态方法内调用一个非静态成员为什么是非法的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.12. 在一个静态方法内调用一个非静态成员为什么是非法的?")],-1),sl=(0,n._)("p",null,"静态成员 (变量或方法) 属于类本身, 在类加载的时候就会分配内存, 可以通过类名直接访问",-1),dl=(0,n._)("p",null,"非静态成员 (变量或方法) 属于类的对象, 只有在类实例化时才会分配内存, 然后通过类的对象 (实例) 去访问",-1),hl=(0,n._)("p",null,"所以, 如果一个类的静态方法去调用非静态方法或变量的时候, 当类的静态方法存在的时候, 类的非静态成员可能不存在",-1),ul=(0,n._)("h2",{id:"_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-13-在-java-中定义一个不做事且没有参数的构造方法的作用","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.13. 在 Java 中定义一个不做事且没有参数的构造方法的作用")],-1),cl=(0,n._)("p",null,"Java 程序在执行子类的构造方法之前, 如果没有用 super() 来调用父类特定的构造方法,则会调用父类中无参构造方法. 如果父类中只定义了有参数的构造方法, 而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法, 则编译时将发生错误, 因为 Java 程序在父类中找不到没有参数的构造方法可供执行.解决办法是在父类里加上一个无参的构造方法.",-1),ol=(0,n._)("h2",{id:"_1-14-接口和抽象类的区别是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-14-接口和抽象类的区别是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.14. 接口和抽象类的区别是什么?")],-1),vl=(0,n._)("ol",null,[(0,n._)("li",null,"接口的方法默认是 public, 所有方法在接口中不能有实现 (Java 8 开始接口方法可以有默认实现), 而抽象类可以有非抽象的方法."),(0,n._)("li",null,"接口中除了 static, final 变量, 不能有其他变量, 而抽象类中则不一定."),(0,n._)("li",null,"一个类可以实现多个接口, 但只能实现一个抽象类.接口自己本身可以通过 extends 关键字扩展多个接口."),(0,n._)("li",null,"接口方法默认修饰符是 public, 抽象方法可以有 public, protected 和 default 这些修饰符 (抽象方法就是为了被重写所以不能使用 private 关键字修饰!)."),(0,n._)("li",null,"从设计层面来说, 抽象是对类的抽象, 是一种模板设计, 而接口是对行为的抽象, 是一种行为的规范.")],-1),pl=(0,n._)("h2",{id:"_1-15-成员变量与局部变量的区别有哪些",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-成员变量与局部变量的区别有哪些","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15. 成员变量与局部变量的区别有哪些?")],-1),gl=(0,n._)("h3",{id:"_1-15-1-从语法形式上看",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-1-从语法形式上看","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15.1. 从语法形式上看")],-1),kl=(0,n._)("p",null,"成员变量是属于类的, 而局部变量是在方法中定义的变量或是方法的参数; 成员变量可以被 public, private, static 等修饰符所修饰, 而局部变量不能被访问控制修饰符及static 所修饰; 但是, 成员变量和局部变量都能被 final 所修饰.",-1),bl=(0,n._)("h3",{id:"_1-15-2-从变量在内存中的存储方式来看",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-2-从变量在内存中的存储方式来看","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15.2. 从变量在内存中的存储方式来看")],-1),fl=(0,n._)("p",null,"如果成员变量是使用 static 修饰的, 那么这个成员变量是属于类的, 如果没有使用static 修饰, 这个成员变量是属于实例的.对象存于堆内存, 如果局部变量类型为基本数据类型, 那么存储在栈内存, 如果为引用数据类型, 那存放的是指向堆内存对象的引用或者是指向常量池中的地址.",-1),Ul=(0,n._)("h3",{id:"_1-15-3-从变量在内存中的生存时间上看",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-3-从变量在内存中的生存时间上看","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15.3. 从变量在内存中的生存时间上看")],-1),xl=(0,n._)("p",null,"成员变量是对象的一部分, 它随着对象的创建而存在, 而局部变量随着方法的调用而自动消失.",-1),Sl=(0,n._)("h3",{id:"_1-15-4-成员变量如果没有被赋初值",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-15-4-成员变量如果没有被赋初值","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.15.4. 成员变量如果没有被赋初值")],-1),ml=(0,n._)("p",null,"自动以类型的默认值而赋值, 而局部变量则不会自动赋值.例外:被 final 修饰的成员变量也必须显式地赋值",-1),Jl=(0,n._)("h2",{id:"_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-16-创建一个对象用什么运算符-对象实体与对象引用有何不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.16. 创建一个对象用什么运算符? 对象实体与对象引用有何不同?")],-1),jl=(0,n._)("p",null,"new 运算符创建对象实例, 对象实例在堆内存中, 对象引用存放在栈内存中, 对象引用指向对象实例.",-1),Ol=(0,n._)("p",null,"一个对象引用可以指向 0 个或 1 个对象; 一个对象可以有 n 个引用指向它",-1),Il=(0,n._)("h2",{id:"_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-17-什么是方法的返回值-返回值在类的方法里的作用是什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.17. 什么是方法的返回值?返回值在类的方法里的作用是什么?")],-1),yl=(0,n._)("p",null,"方法的返回值是指获取到的某个方法体中的代码执行后产生的结果!",-1),wl=(0,n._)("p",null,"返回值的作用:接收出结果, 使得它可以用于其他的操作!",-1),Cl=(0,n._)("h2",{id:"_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.18. 一个类的构造方法的作用是什么?若一个类没有声明构造方法, 该程序能正确执行吗?为什么?")],-1),El=(0,n._)("p",null,"构造方法的主要作用是完成对类对象的初始化工作,若一个类没有声明构造方法也可以执行. 因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法.",-1),Nl=(0,n._)("h2",{id:"_1-19-构造方法有哪些特性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-19-构造方法有哪些特性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.19. 构造方法有哪些特性?")],-1),Bl=(0,n._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,n._)("pre",{class:"language-java"},[(0,n._)("code",null,[(0,n._)("span",{class:"token keyword"},"class"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"Person"),(0,n.Uk)(),(0,n._)("span",{class:"token punctuation"},"{"),(0,n.Uk)("\n    "),(0,n._)("span",{class:"token keyword"},"private"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"String"),(0,n.Uk)(" name"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n    "),(0,n._)("span",{class:"token keyword"},"private"),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"int"),(0,n.Uk)(" age"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n    "),(0,n._)("span",{class:"token keyword"},"public"),(0,n.Uk)(),(0,n._)("span",{class:"token class-name"},"Person"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token class-name"},"String"),(0,n.Uk)(" name"),(0,n._)("span",{class:"token punctuation"},","),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"int"),(0,n.Uk)(" age"),(0,n._)("span",{class:"token punctuation"},")"),(0,n.Uk)(),(0,n._)("span",{class:"token punctuation"},"{"),(0,n.Uk)("\n        "),(0,n._)("span",{class:"token keyword"},"this"),(0,n._)("span",{class:"token punctuation"},"."),(0,n.Uk)("name "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(" name"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n        "),(0,n._)("span",{class:"token keyword"},"this"),(0,n._)("span",{class:"token punctuation"},"."),(0,n.Uk)("age "),(0,n._)("span",{class:"token operator"},"="),(0,n.Uk)(" age"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n    "),(0,n._)("span",{class:"token punctuation"},"}"),(0,n.Uk)("\n"),(0,n._)("span",{class:"token punctuation"},"}"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"3"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"4"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"5"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"6"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"7"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"8"),(0,n._)("br")])],-1),ql=(0,n._)("ol",null,[(0,n._)("li",null,"构造方法名与类名相同."),(0,n._)("li",null,"没有返回值, 但不能用 void 声明构造函数."),(0,n._)("li",null,"生成类的对象时自动执行, 无需调用.")],-1),Al=(0,n._)("h2",{id:"_1-20-静态方法和实例方法有何不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-20-静态方法和实例方法有何不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.20. 静态方法和实例方法有何不同")],-1),Ml=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,'在外部调用静态方法时, 可以使用"类名.方法名"的方式, 也可以使用"对象名.方法名" 的方式.而实例方法只有后面这种方式.也就是说, 调用静态方法可以无需创建对象.')]),(0,n._)("li",null,[(0,n._)("p",null,"静态方法在访问本类的成员时, 只允许访问静态成员 (即静态成员变量和静态方法), 而 不允许访问实例成员变量和实例方法; 实例方法则无此限制.")])],-1),Yl=(0,n._)("h2",{id:"_1-21-对象的相等与指向他们的引用相等-两者有什么不同",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-21-对象的相等与指向他们的引用相等-两者有什么不同","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.21. 对象的相等与指向他们的引用相等, 两者有什么不同?")],-1),Rl=(0,n._)("ol",null,[(0,n._)("li",null,"对象的相等, 比较的是内存中存放的内容是否相等."),(0,n._)("li",null,"引用相等, 比较的是他们指向的内存地址是否相等.")],-1),Dl=(0,n._)("h2",{id:"_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.22. 在调用子类构造方法之前会先调用父类没有参数的构造方法, 其目的是?")],-1),Hl=(0,n._)("p",null,"帮助子类做初始化工作.",-1),Tl=(0,n._)("h2",{id:"_1-23-hashcode-与-equals-重要",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-hashcode-与-equals-重要","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23. hashCode 与 equals (重要)")],-1),Vl=(0,n._)("h3",{id:"_1-23-1-hashcode-介绍",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-1-hashcode-介绍","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23.1. hashCode() 介绍")],-1),Kl=(0,n._)("p",null,"hashCode() 的作用是获取哈希码(散列码); 它实际上是返回一个 int 整数. 哈希码的作用 是确定该对象在哈希表中的索引位置.",-1),Pl=(0,n._)("p",null,"hashCode() 定义在 JDK 的 Object 类中, Java 中的任何类都包含有 hashCode() 函数.",-1),Ll=(0,n._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,n._)("pre",{class:"language-java"},[(0,n._)("code",null,[(0,n._)("span",{class:"token keyword"},"public"),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"native"),(0,n.Uk)(),(0,n._)("span",{class:"token keyword"},"int"),(0,n.Uk)(),(0,n._)("span",{class:"token function"},"hashCode"),(0,n._)("span",{class:"token punctuation"},"("),(0,n._)("span",{class:"token punctuation"},")"),(0,n._)("span",{class:"token punctuation"},";"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br")])],-1),Fl=(0,n._)("p",null,"哈希表 (散列表) 存储的是键值对 (key-value), 能根据键快速的检索出对应的值.",-1),Wl=(0,n._)("h3",{id:"_1-23-2-为什么要有-hashcode",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-2-为什么要有-hashcode","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23.2. 为什么要有 hashCode?")],-1),Zl=(0,n._)("blockquote",null,[(0,n._)("p",null,"以 HashSet 如何检查重复为例子来说明为什么要有 hashCode?")],-1),zl=(0,n._)("p",null,"当把对象加入 HashSet 时, HashSet 会先计算对象的 hashcode 值, 来判断对象加入的位 置, 同时也会与其他已经加入的对象的 hashcode 值作比较, 如果没有相符的 hashcode, HashSet 会假设对象没有重复出现.但是如果发现有相同 hashcode 值的对象, 这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同.如果两者相同, HashSet 就不会 让其加入操作成功.如果不同的话, 就会重新散列到其他位置.这样就大大减少了 equals 的 次数, 相应就大大提高了执行速度.",-1),Ql=(0,n._)("h3",{id:"_1-23-3-为什么重写-equals-时必须重写-hashcode-方法",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-3-为什么重写-equals-时必须重写-hashcode-方法","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23.3. 为什么重写 equals 时必须重写 hashCode 方法?")],-1),Gl=(0,n._)("p",null,"如果两个对象相等, 则 hashcode 一定也是相同的.两个对象相等, 对两个对象分别调用 equals 方法都返回 true.但是, 两个对象有相同的 hashcode 值, 它们也不一定是相等的 .因此, equals 方法被覆盖过, 则 hashCode 方法也必须被覆盖.",-1),Xl=(0,n._)("h3",{id:"_1-23-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-23-4-为什么两个对象有相同的-hashcode-值-它们也不一定是相等的","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.23.4. 为什么两个对象有相同的 hashcode 值, 它们也不一定是相等的?")],-1),$l=(0,n._)("p",null,"因为 hashCode() 所使用的散列算法存在多个对象传回相同的散列值的情况. 越糟糕的散列算法越容易碰撞, 但这也与数据值域分布的特性有关",-1),le=(0,n._)("p",null,"比如 HashSet, 如果 HashSet 在对比的时候, 同样的 hashcode 有多个对象, 它会使用equals() 来判断是否真的相同.也就是说 hashcode 只是用来缩小查找成本.",-1),ee=(0,n._)("blockquote",null,[(0,n._)("p",null,"碰撞: 不同的对象得到相同的 hashCode.")],-1),ae=(0,n._)("h2",{id:"_1-24-为什么-java-中只有值传递",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-24-为什么-java-中只有值传递","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.24. 为什么 Java 中只有值传递?")],-1),ne=(0,n._)("p",null,"Java 程序设计语言总是采用按值调用. 方法得到的是所有参数值的一个拷贝, 如果参数是 基本类型,传递的是基本类型的字面量值的拷贝.如果参数是引用类型,传递的是该参量所引 用的对象在堆中地址值的拷贝.",-1),ie=(0,n._)("p",null,"按值调用 (call by value) 表示方法接收的是调用者提供的值, 而按引用调用 (call by reference) 表示方法接收的是调用者提供的变量地址.一个方法可以修改传递引用所对应的 变量值, 而不能修改传递值调用所对应的变量值.",-1),re=(0,n._)("h2",{id:"_1-25-关于-final-关键字的一些总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-25-关于-final-关键字的一些总结","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.25. 关于 final 关键字的一些总结")],-1),te=(0,n._)("p",null,"final 关键字主要用在三个地方:变量, 方法, 类.",-1),_e=(0,n._)("ol",null,[(0,n._)("li",null,"当用 final 修饰一个类时, 表明这个类不能被继承. final 类中的所有成员方法都会被 隐式地指定为 final 方法."),(0,n._)("li",null,[(0,n.Uk)("使用 final 修饰方法的原因有两个: "),(0,n._)("ul",null,[(0,n._)("li",null,"把方法锁定, 以防任何继承类修改它的含义;"),(0,n._)("li",null,"效率, final 方法比非 final 方法要快, 因为在编译的时候已经静态绑定了, 不需要 在运行时再动态绑定. (类的 private 方法会隐式地被指定为 final 方法)")])]),(0,n._)("li",null,"当用 final 修饰一个变量时, 如果是基本数据类型的变量, 则其数值一旦在初始化之后 便不能更改; 如果是引用类型的变量, 则在对其初始化之后便不能再让其指向另一个对 象.")],-1),se=(0,n._)("h2",{id:"_1-26-java-访问修饰符",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-26-java-访问修饰符","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.26. java 访问修饰符")],-1),de=(0,n._)("ol",null,[(0,n._)("li",null,"public: 可以被所有其他类所访问."),(0,n._)("li",null,"protected: 自身, 子类及同一个包中类可以访问."),(0,n._)("li",null,"default( 默认) : 同一包中的类可以访问, 声明时没有加修饰符, 认为是 friendly."),(0,n._)("li",null,"private: 只能被自身类访问和修改.")],-1),he=(0,n._)("table",null,[(0,n._)("thead",null,[(0,n._)("tr",null,[(0,n._)("th",null,"修饰符"),(0,n._)("th",null,"类"),(0,n._)("th",null,"包"),(0,n._)("th",null,"子类"),(0,n._)("th",null,"其他包")])]),(0,n._)("tbody",null,[(0,n._)("tr",null,[(0,n._)("td",null,"public"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y")]),(0,n._)("tr",null,[(0,n._)("td",null,"protected"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N")]),(0,n._)("tr",null,[(0,n._)("td",null,"default"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N")]),(0,n._)("tr",null,[(0,n._)("td",null,"private"),(0,n._)("td",null,"Y"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N"),(0,n._)("td",null,"N")])])],-1),ue=(0,n._)("p",null,"Java 中, 可以使用访问控制符来保护对类, 变量, 方法和构造方法的访问",-1),ce=(0,n._)("h2",{id:"_1-27-java-中的异常处理",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-java-中的异常处理","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27. Java 中的异常处理")],-1),oe=(0,n._)("p",null,[(0,n._)("img",{src:r,alt:"picture 1"}),(0,n._)("br"),(0,n._)("img",{src:t,alt:"picture 2"})],-1),ve=(0,n._)("h3",{id:"_1-27-1-java-异常类层次结构图",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-1-java-异常类层次结构图","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.1. Java 异常类层次结构图")],-1),pe=(0,n._)("p",null,"在 Java 中, 所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类.Throwable 类有两个重要的子类 Exception(异常) 和 Error(错误).Exception 能被程序本身处理 (try-catch), Error 是无法处理的 (只能尽量避免).",-1),ge=(0,n._)("p",null,"Exception 和 Error 二者都是 Java 异常处理的重要子类, 各自都包含大量子类.",-1),ke=(0,n._)("ul",null,[(0,n._)("li",null,"Exception :程序本身可以处理的异常, 可以通过 catch 来进行捕获.Exception 又可以 分为 受检查异常 (必须处理) 和 不受检查异常 (可以不处理)."),(0,n._)("li",null,"Error :Error 属于程序无法处理的错误 , 没办法通过 catch 来进行捕获 .例如, Java 虚拟机运行错误 (Virtual MachineError), 虚拟机内存不够错误 (OutOfMemoryError), 类定义错误 (NoClassDefFoundError) 等 .这些异常发生时, Java 虚拟机 (JVM) 一般会 选择线程终止.")],-1),be=(0,n._)("h4",{id:"_1-27-1-1-受检查异常",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-1-1-受检查异常","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.1.1. 受检查异常")],-1),fe=(0,n._)("p",null,"Java 代码在编译过程中, 如果受检查异常没有被 catch/throw 处理的话, 就没办法通过编 译 .比如下面这段 IO 操作的代码.",-1),Ue=(0,n._)("p",null,"除了 RuntimeException 及其子类以外, 其他的 Exception 类及其子类都属于检查异常 . 常见的受检查异常有: IO 相关的异常, ClassNotFoundException , SQLException....",-1),xe=(0,n._)("h4",{id:"_1-27-1-2-不受检查异常",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-1-2-不受检查异常","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.1.2. 不受检查异常")],-1),Se=(0,n._)("p",null,"Java 代码在编译过程中 , 即使不处理不受检查异常也可以正常通过编译.",-1),me=(0,n._)("p",null,"RuntimeException 及其子类都统称为非受检查异常, 例如:NullPoin​terException, NumberFormatException(字符串转换为数字), ArrayIndexOutOfBoundsException(数组越界 ), ClassCastException(类型转换错误), ArithmeticException(算术错误) 等.",-1),Je=(0,n._)("h3",{id:"_1-27-2-throwable-类常用方法",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-2-throwable-类常用方法","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.2. Throwable 类常用方法")],-1),je=(0,n._)("ul",null,[(0,n._)("li",null,"public string getMessage():返回异常发生时的简要描述"),(0,n._)("li",null,"public string toString():返回异常发生时的详细信息"),(0,n._)("li",null,"public string getLocalizedMessage():返回异常对象的本地化信息.使用 Throwable 的 子类覆盖这个方法, 可以生成本地化信息.如果子类没有覆盖该方法, 则该方法返回的信 息与 getMessage() 返回的结果相同"),(0,n._)("li",null,"public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息")],-1),Oe=(0,n._)("h3",{id:"_1-27-3-异常处理总结",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-3-异常处理总结","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.3. 异常处理总结")],-1),Ie=(0,n._)("ul",null,[(0,n._)("li",null,"try 块:用于捕获异常.其后可接零个或多个 catch 块, 如果没有 catch 块, 则必须跟一 个 finally 块."),(0,n._)("li",null,"catch 块:用于处理 try 捕获到的异常."),(0,n._)("li",null,"finally 块:无论是否捕获或处理异常, finally 块里的语句都会被执行.当在 try 块或 catch 块中遇到 return 语句时, finally 语句块将在方法返回之前被执行.")],-1),ye=(0,n._)("h4",{id:"_1-27-3-1-在以下-3-种特殊情况下-finally-块不会被执行",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-27-3-1-在以下-3-种特殊情况下-finally-块不会被执行","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.27.3.1. 在以下 3 种特殊情况下, finally 块不会被执行")],-1),we=(0,n._)("ol",null,[(0,n._)("li",null,"在 try 或 finally 块中用了 System.exit(int) 退出程序.但是, 如果 System.exit(int) 在异常语句之后, finally 还是会被执行"),(0,n._)("li",null,"程序所在的线程死亡."),(0,n._)("li",null,"关闭 CPU.")],-1),Ce=(0,n._)("h2",{id:"_1-28-java-序列化中如果有些字段不想进行序列化-怎么办",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-28-java-序列化中如果有些字段不想进行序列化-怎么办","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.28. Java 序列化中如果有些字段不想进行序列化, 怎么办?")],-1),Ee=(0,n._)("p",null,"对于不想进行序列化的变量, 使用 transient 关键字修饰.",-1),Ne=(0,n._)("p",null,"transient 关键字的作用是:阻止实例中那些用此关键字修饰的的变量序列化; 当对象被反 序列化时, 被 transient 修饰的变量值不会被持久化和恢复.transient 只能修饰变量, 不 能修饰类和方法.",-1),Be=(0,n._)("h2",{id:"_1-29-java-中-io-流",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-29-java-中-io-流","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.29. Java 中 IO 流")],-1),qe=(0,n._)("h3",{id:"_1-29-1-java-中-io-流分为几种",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-29-1-java-中-io-流分为几种","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.29.1. Java 中 IO 流分为几种?")],-1),Ae=(0,n._)("ul",null,[(0,n._)("li",null,"按照流的流向分, 可以分为输入流和输出流;"),(0,n._)("li",null,"按照操作单元划分, 可以划分为字节流和字符流;"),(0,n._)("li",null,"按照流的角色划分为节点流和处理流.")],-1),Me=(0,n._)("p",null,"Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的.",-1),Ye=(0,n._)("ul",null,[(0,n._)("li",null,"InputStream/Reader: 所有的输入流的基类, 前者是字节输入流, 后者是字符输入流."),(0,n._)("li",null,"OutputStream/Writer: 所有输出流的基类, 前者是字节输出流, 后者是字符输出流.")],-1),Re=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("按操作方式分类结构图: "),(0,n._)("img",{src:_,alt:"picture 3"})])]),(0,n._)("li",null,[(0,n._)("p",null,"按操作对象分类结构图:")])],-1),De=(0,n._)("p",null,[(0,n._)("img",{src:s,alt:"picture 4"})],-1),He=(0,n._)("h3",{id:"_1-29-2-既然有了字节流-为什么还要有字符流",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-29-2-既然有了字节流-为什么还要有字符流","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.29.2. 既然有了字节流, 为什么还要有字符流?")],-1),Te=(0,n._)("p",null,"不管是文件读写还是网络发送接收, 信息的最小存储单元都是字节, 那为什么 I/O 流操作 要分为字节流操作和字符流操作呢?",-1),Ve=(0,n._)("p",null,"字符流是由 Java 虚拟机将字节转换得到的, 问题就出在这个过程还算是非常耗时, 并且, 如果不知道编码类型就很容易出现乱码问题.所以, I/O 流就干脆提供了一个直接操作字符 的接口, 方便平时对字符进行流操作.如果音频文件, 图片等媒体文件用字节流比较好, 如 果涉及到字符的话使用字符流比较好.",-1),Ke=(0,n._)("h3",{id:"_1-29-3-bio-nio-aio-有什么区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-29-3-bio-nio-aio-有什么区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.29.3. BIO, NIO, AIO 有什么区别?")],-1),Pe=(0,n._)("ol",null,[(0,n._)("li",null,"BIO (Blocking I/O): 同步阻塞 I/O 模式, 数据的读取写入必须阻塞在一个线程内等待 其完成.在活动连接数不是特别高 (小于单机 1000) 的情况下, 这种模型是比较不错的, 可以让每一个连接专注于自己的 I/O 并且编程模型简单, 也不用过多考虑系统的过载, 限流等问题.线程池本身就是一个天然的漏斗, 可以缓冲一些系统处理不了的连接或请求 .但是, 当面对十万甚至百万级连接的时候, 传统的 BIO 模型是无能为力的.因此, 需要 一种更高效的 I/O 处理模型来应对更高的并发量."),(0,n._)("li",null,"NIO (Non-blocking/New I/O): NIO 是一种同步非阻塞的 I/O 模型, 在 Java 1.4 中引 入了 NIO 框架, 对应 java.nio 包, 提供了 Channel , Selector, Buffer 等抽象.NIO 中的 N 可以理解为 Non-blocking, 不单纯是 New.它支持面向缓冲的, 基于通道的 I/O 操作方法. NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现, 两种通道都支持 阻塞和非阻塞两种模式.阻塞模式使用就像传统中的支持一样, 比较简单, 但是性能和可 靠性都不好; 非阻塞模式正好与之相反.对于低负载, 低并发的应用程序, 可以使用同步 阻塞 I/O 来提升开发速率和更好的维护性; 对于高负载, 高并发的 (网络) 应用, 应使 用 NIO 的非阻塞模式来开发"),(0,n._)("li",null,"AIO (Asynchronous I/O): AIO 也就是 NIO 2.在 Java 7 中引入了 NIO 的改进版 NIO 2, 它是异步非阻塞的 IO 模型.异步 IO 是基于事件和回调机制实现的, 也就是应用操 作之后会直接返回, 不会堵塞在那里, 当后台处理完成, 操作系统会通知相应的线程进 行后续的操作.AIO 是异步 IO 的缩写, 虽然 NIO 在网络操作中, 提供了非阻塞的方法, 但是 NIO 的 IO 行为还是同步的.对于 NIO 来说, 的业务线程是在 IO 操作准备好时, 得到通知, 接着就由这个线程自行进行 IO 操作, IO 操作本身是同步的.")],-1),Le=(0,n._)("h2",{id:"_1-30-深拷贝-vs-浅拷贝",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-30-深拷贝-vs-浅拷贝","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.30. 深拷贝 vs 浅拷贝")],-1),Fe=(0,n._)("p",null,[(0,n._)("img",{src:d,alt:"picture 4"})],-1),We=(0,n._)("ol",null,[(0,n._)("li",null,"浅拷贝:对基本数据类型进行值传递, 对引用数据类型进行引用传递般的拷贝, 此为浅拷 贝."),(0,n._)("li",null,"深拷贝:对基本数据类型进行值传递, 对引用数据类型, 创建一个新的对象, 并复制其内 容, 此为深拷贝.")],-1),Ze=(0,n._)("h2",{id:"_1-31-servlet-特性",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-31-servlet-特性","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.31. servlet 特性")],-1),ze=(0,n._)("p",null,"单例多线程",-1),Qe=(0,n._)("h2",{id:"_1-32-servlet-是单实例的吗",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-32-servlet-是单实例的吗","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.32. servlet 是单实例的吗?")],-1),Ge=(0,n._)("p",null,"servlet 是单实例的",-1),Xe=(0,n._)("h2",{id:"_1-33-servlet-是线程安全的吗-为什么",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-33-servlet-是线程安全的吗-为什么","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.33. servlet 是线程安全的吗?为什么?")],-1),$e=(0,n._)("p",null,"Servlet 对象并不是一个线程安全的对象.",-1),la=(0,n._)("p",null,"Servlet 第一次被调用的时候,init()方法会被调用,然后调用 service() 方法,从第二次被 请求开始,就直接调用 service()方法.",-1),ea=(0,n._)("p",null,"因为 servlet 是单实例的,所以后面再次请求同一个 Servlet 的时候都不会创建 Servlet 实例,而且 web 容器会针对每个请求创建一个独立的线程,这样多个并发请求会导致多个线 程同时调用 service() 方法,这样就会存在线程不安全的问题.",-1),aa=(0,n._)("h2",{id:"_1-34-servlet-生命周期",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-34-servlet-生命周期","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.34. servlet 生命周期")],-1),na=(0,n._)("p",null,"Servlet 加载—>实例化(init)—>服务(service)—>销毁(destroy)",-1),ia=(0,n._)("h2",{id:"_1-35-谈谈过滤器的作用",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-35-谈谈过滤器的作用","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.35. 谈谈过滤器的作用")],-1),ra=(0,n._)("p",null,"过滤器,是在 java web 中,你传入的 request,response 提前过滤掉一些信息,或者提前设 置一些参数,然后再传入 servlet 或者 struts 的 action 进行业务逻辑,比如过滤掉非法 url(不是 login.do 的地址请求,如果用户没有登陆都过滤掉),或者在传入 servlet 或者 struts 的 action 前统一设置字符集,或者去除掉一些非法字符",-1),ta=(0,n._)("h2",{id:"_1-36-谈谈拦截器的作用",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-36-谈谈拦截器的作用","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.36. 谈谈拦截器的作用")],-1),_a=(0,n._)("p",null,"拦截器,是在面向切面编程的就是在你的 service 或者一个方法,前调用一个方法,或者在方 法后调用一个方法比如动态代理就是拦截器的简单实现,在你调用方法前打印出字符串(或者 做其它业务逻辑的操作),也可以在你调用方法后打印出字符串,甚至在你抛出异常的时候做 业务逻辑的操作.",-1),sa=(0,n._)("h2",{id:"_1-37-拦截器和过滤器有什么区别",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-37-拦截器和过滤器有什么区别","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.37. 拦截器和过滤器有什么区别")],-1),da=(0,n._)("p",null,"拦截器基于反射机制,而过滤器基于函数回调拦截器基于 Strust2 或 SpringMVC 这样的表 述层框架,而过滤器基于 Servlet 容器拦截器只能在框架内部生效,而过滤器可以对所有请 求生效拦截器可以访问框架内的资源对象(例如 Spring IOC 容器中的对象),而过滤器不能 直接访问框架内的资源对象",-1),ha=(0,n._)("h2",{id:"_1-38-拦截器和过滤器的执行顺序",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_1-38-拦截器和过滤器的执行顺序","aria-hidden":"true"},"#"),(0,n.Uk)(" 1.38. 拦截器和过滤器的执行顺序")],-1),ua=(0,n._)("p",null,"过滤前 – 拦截前 – Action 处理 – 拦截后 – 过滤后.",-1),ca=(0,n._)("p",null,"过滤是一个横向的过程,首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页 面的处理);过滤通过后,拦截器将检查用户提交数据的验证,做一些前期的数据处理,接着把 处理后的数据发给对应的 Action;Action 处理完成返回后,拦截器还可以做其他过程(还没 想到要做啥),再向上返回到过滤器的后续操作.",-1),oa={},va=(0,a(3744).Z)(oa,[["render",function(l,e){return(0,n.wg)(),(0,n.iD)(n.HY,null,[h,u,c,o,v,p,g,k,b,f,U,x,S,m,J,j,O,I,y,w,C,E,N,B,q,A,M,Y,R,D,H,T,V,K,P,L,F,W,Z,z,Q,G,X,$,ll,el,al,nl,il,rl,tl,_l,sl,dl,hl,ul,cl,ol,vl,pl,gl,kl,bl,fl,Ul,xl,Sl,ml,Jl,jl,Ol,Il,yl,wl,Cl,El,Nl,Bl,ql,Al,Ml,Yl,Rl,Dl,Hl,Tl,Vl,Kl,Pl,Ll,Fl,Wl,Zl,zl,Ql,Gl,Xl,$l,le,ee,ae,ne,ie,re,te,_e,se,de,he,ue,ce,oe,ve,pe,ge,ke,be,fe,Ue,xe,Se,me,Je,je,Oe,Ie,ye,we,Ce,Ee,Ne,Be,qe,Ae,Me,Ye,Re,De,He,Te,Ve,Ke,Pe,Le,Fe,We,Ze,ze,Qe,Ge,Xe,$e,la,ea,aa,na,ia,ra,ta,_a,sa,da,ha,ua,ca],64)}]])},3744:(l,e)=>{e.Z=(l,e)=>{const a=l.__vccOpts||l;for(const[l,n]of e)a[l]=n;return a}},9786:(l,e,a)=>{l.exports=a.p+"assets/img/1640343884805.075416b8.png"},3717:(l,e,a)=>{l.exports=a.p+"assets/img/1640343893506.7cfa7397.png"},2838:(l,e,a)=>{l.exports=a.p+"assets/img/1640344046679.e9a2e9a3.png"},910:(l,e,a)=>{l.exports=a.p+"assets/img/1640344068818.20e746d9.png"},938:(l,e,a)=>{l.exports=a.p+"assets/img/1641168727606.815df252.png"},2173:(l,e,a)=>{l.exports=a.p+"assets/img/1645063198632.ed273b33.png"}}]);