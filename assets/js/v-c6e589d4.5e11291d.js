"use strict";(self.webpackChunkaudition=self.webpackChunkaudition||[]).push([[442],{4487:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-c6e589d4",path:"/golang/distributed.html",title:"1. distributed",lang:"en-EN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1. encryption",slug:"_1-1-encryption",children:[{level:3,title:"1.1.1. 数字签名(不可逆)",slug:"_1-1-1-数字签名-不可逆",children:[]},{level:3,title:"1.1.2. 对称加密",slug:"_1-1-2-对称加密",children:[]},{level:3,title:"1.1.3. 非对称加密",slug:"_1-1-3-非对称加密",children:[]},{level:3,title:"1.1.4. MD5",slug:"_1-1-4-md5",children:[]},{level:3,title:"1.1.5. SHA1",slug:"_1-1-5-sha1",children:[]},{level:3,title:"1.1.6. AES",slug:"_1-1-6-aes",children:[]},{level:3,title:"1.1.7. DES",slug:"_1-1-7-des",children:[]},{level:3,title:"1.1.8. RSA",slug:"_1-1-8-rsa",children:[]},{level:3,title:"1.1.9. Base64",slug:"_1-1-9-base64",children:[]}]},{level:2,title:"1.2. rpc",slug:"_1-2-rpc",children:[{level:3,title:"1.2.1. 定义",slug:"_1-2-1-定义",children:[]}]},{level:2,title:"1.3. 为什么选择 grpc",slug:"_1-3-为什么选择-grpc",children:[]},{level:2,title:"1.4. rpc 架构",slug:"_1-4-rpc-架构",children:[]},{level:2,title:"1.5. gRPC 有哪些类型",slug:"_1-5-grpc-有哪些类型",children:[{level:3,title:"1.5.1. 单项 RPC",slug:"_1-5-1-单项-rpc",children:[]},{level:3,title:"1.5.2. 服务端流式 RPC",slug:"_1-5-2-服务端流式-rpc",children:[]},{level:3,title:"1.5.3. 客户端流式 RPC",slug:"_1-5-3-客户端流式-rpc",children:[]},{level:3,title:"1.5.4. 双向流 RPC",slug:"_1-5-4-双向流-rpc",children:[]}]},{level:2,title:"1.6. protocolBuffer",slug:"_1-6-protocolbuffer",children:[{level:3,title:"1.6.1. 使用步骤",slug:"_1-6-1-使用步骤",children:[]}]},{level:2,title:"1.7. etcd的简介",slug:"_1-7-etcd的简介",children:[]},{level:2,title:"1.8. etcd特点",slug:"_1-8-etcd特点",children:[]},{level:2,title:"1.9. 简述 ETCD 适应的场景？",slug:"_1-9-简述-etcd-适应的场景",children:[{level:3,title:"1.9.1. 服务发现 (Service Discovery)",slug:"_1-9-1-服务发现-service-discovery",children:[]},{level:3,title:"1.9.2. 配置中心 (消息发布与订阅)",slug:"_1-9-2-配置中心-消息发布与订阅",children:[]},{level:3,title:"1.9.3. 负载均衡",slug:"_1-9-3-负载均衡",children:[]},{level:3,title:"1.9.4. 分布式通知与协调",slug:"_1-9-4-分布式通知与协调",children:[]},{level:3,title:"1.9.6. 集群监控与 Leader 竞选",slug:"_1-9-6-集群监控与-leader-竞选",children:[]}]}],filePathRelative:"golang/distributed.md",git:{updatedTime:1655120116e3,contributors:[{name:"shorestraydog",email:"shorestraydog@protonmail.com",commits:1}]}}},1843:(n,a,e)=>{e.r(a),e.d(a,{default:()=>mn});var s=e(6252),t=e(4597);const l=(0,s._)("h1",{id:"_1-distributed",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-distributed","aria-hidden":"true"},"#"),(0,s.Uk)(" 1. distributed")],-1),r=(0,s._)("h2",{id:"_1-1-encryption",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-encryption","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1. encryption")],-1),c=(0,s._)("p",null,"常用加解密分为:对称加密,非对称加密和数字签名.",-1),o=(0,s._)("h3",{id:"_1-1-1-数字签名-不可逆",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-1-数字签名-不可逆","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.1. 数字签名(不可逆)")],-1),i=(0,s._)("p",null,"如MD5,SHA1(中文发音:沙万),HMAC等, 主要用于密码存储, 生成信息的摘要,校验数据的完整性",-1),_=(0,s._)("h3",{id:"_1-1-2-对称加密",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-2-对称加密","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.2. 对称加密")],-1),u=(0,s._)("p",null,"加密和解密使用相同密钥的加密算法. 其中的代表就是 AES,DES,RC5,RC6, 由于算法效率较高,一般用于对效率有要求的实时数据加密通信.比如 VPN 加密通信",-1),p=(0,s._)("h3",{id:"_1-1-3-非对称加密",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-3-非对称加密","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.3. 非对称加密")],-1),d=(0,s._)("p",null,"加密和解密使用不同密钥的加密算法,其中的代表就是RSA, 共有两个密钥,通常使用公钥加密,私钥解密",-1),k=(0,s._)("h3",{id:"_1-1-4-md5",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-4-md5","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.4. MD5")],-1),h=(0,s._)("p",null,"MD5信息摘要算法是一种被广泛使用的密码散列函数,可以产生出一个128位(16进制,32个字符)的散列值(hash value),用于确保信息传输完整一致.",-1),b=(0,s._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,s._)("pre",{class:"language-go"},[(0,s._)("code",null,[(0,s.Uk)("h "),(0,s._)("span",{class:"token operator"},":="),(0,s.Uk)(" md5"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"New"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\nh"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Write"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},"["),(0,s._)("span",{class:"token punctuation"},"]"),(0,s._)("span",{class:"token function"},"byte"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("s"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"return"),(0,s.Uk)(" hex"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"EncodeToString"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("h"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Sum"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token boolean"},"nil"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br")])],-1),U=(0,s._)("h3",{id:"_1-1-5-sha1",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-5-sha1","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.5. SHA1")],-1),g=(0,s._)("p",null,"SHA1可以生成一个被称为消息摘要的160位(20字节)散列值,散列值通常的呈现形式为40个十六进制数.",-1),m=(0,s._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,s._)("pre",{class:"language-go"},[(0,s._)("code",null,[(0,s.Uk)("sha1 "),(0,s._)("span",{class:"token operator"},":="),(0,s.Uk)(" sha1"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"New"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\nsha1"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Write"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},"["),(0,s._)("span",{class:"token punctuation"},"]"),(0,s._)("span",{class:"token function"},"byte"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("data"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"return"),(0,s.Uk)(" hex"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"EncodeToString"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("sha1"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Sum"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},"["),(0,s._)("span",{class:"token punctuation"},"]"),(0,s._)("span",{class:"token function"},"byte"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'""'),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},")"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br")])],-1),f=(0,s._)("h3",{id:"_1-1-6-aes",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-6-aes","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.6. AES")],-1),v=(0,s._)("p",null,"AES,即高级加密标准(Advanced Encryption Standard),是一个对称分组密码算法,旨在取代DES成为广泛使用的标准.AES中常见的有三种解决方案,分别为AES-128,AES-192和AES-256.",-1),x=(0,s._)("h3",{id:"_1-1-7-des",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-7-des","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.7. DES")],-1),C=(0,s._)("p",null,"美国数据加密标准.DES加密时以64位分组对数据进行加密,加密和解密都使用的是同一个长度为64位的密钥,实际上只用到了其中的56位,密钥中的第8,16…64位用来作奇偶校验.DES有ECB(电子密码本)和CBC(加密块)等加密模式.",-1),S=(0,s._)("h3",{id:"_1-1-8-rsa",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-8-rsa","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.8. RSA")],-1),P=(0,s._)("p",null,"RSA加密算法是一种非对称加密算法, 常用于加密和签名(hash验签)",-1),R=(0,s._)("h3",{id:"_1-1-9-base64",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-1-9-base64","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.1.9. Base64")],-1),y=(0,s._)("p",null,"Base64不是加密算法, Base64 是一种任意二进制到文本字符串的编码方法,常用于在URL,Cookie,网页中传输少量二进制数据",-1),E=(0,s._)("h2",{id:"_1-2-rpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-rpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2. rpc")],-1),A=(0,s._)("h3",{id:"_1-2-1-定义",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-2-1-定义","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.2.1. 定义")],-1),w=(0,s._)("p",null,"gRPC 是 google 开源的高性能RPC远程服务调用框架，基于 ProtoBuf(Protocol Buffers) 序列化协议开发",-1),D=(0,s._)("h2",{id:"_1-3-为什么选择-grpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-3-为什么选择-grpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.3. 为什么选择 grpc")],-1),T=(0,s._)("ol",null,[(0,s._)("li",null,"protobuf是二进制消息，性能好/效率高"),(0,s._)("li",null,"通过在服务器和客户端之间共享 .proto 文件，可以端到端生成消息和客户端代码。 节约开发时间。并且有严格的规范。"),(0,s._)("li",null,"基于HTTP2，与 HTTP 1.x 相比，HTTP2 具有巨大性能优势。"),(0,s._)("li",null,"支持流式处理"),(0,s._)("li",null,"截止时间/超时和取消, gRPC 允许客户端指定等待 RPC 完成的超时时间。")],-1),B=(0,s._)("h2",{id:"_1-4-rpc-架构",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-4-rpc-架构","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.4. rpc 架构")],-1),H=(0,s._)("p",null,"一个完整的 RPC 架构里面包含了四个核心的组件,分别是 Client,Server,ClientOptions以及 ServerOptions,这个 Options 就是 RPC 需要设计实现的东西.",-1),M=(0,s._)("p",null,[(0,s._)("img",{src:t,alt:"picture 2"})],-1),O=(0,s._)("ol",null,[(0,s._)("li",null,"客户端(Client):服务的调用方."),(0,s._)("li",null,"服务端(Server):真正的服务提供方."),(0,s._)("li",null,"客户端存根(ClientOption):socket 管理,网络收发包的序列化."),(0,s._)("li",null,"服务端存根(ServerOption):socket管理,提醒 server 层 rpc 方法调用,以及网络收发包的序列化.")],-1),z=(0,s._)("h2",{id:"_1-5-grpc-有哪些类型",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-grpc-有哪些类型","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5. gRPC 有哪些类型")],-1),N=(0,s._)("p",null,"RPC 调用通常根据双端是否流式交互,分为了单项 RPC,服务端流式 RPC,客户端流式 RPC,双向流 PRC 四种方式",-1),j=(0,s._)("h3",{id:"_1-5-1-单项-rpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-1-单项-rpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.1. 单项 RPC")],-1),L=(0,s._)("p",null,"客户端传入一个请求对象，服务端返回一个结果对象",-1),W=(0,s._)("h3",{id:"_1-5-2-服务端流式-rpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-2-服务端流式-rpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.2. 服务端流式 RPC")],-1),F=(0,s._)("p",null,"客户端发起一个请求到服务端，服务端返回一段连续的数据流响应",-1),V=(0,s._)("h3",{id:"_1-5-3-客户端流式-rpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-3-客户端流式-rpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.3. 客户端流式 RPC")],-1),Z=(0,s._)("p",null,"客户端连续发送数据流，服务端返回一个响应；",-1),G=(0,s._)("h3",{id:"_1-5-4-双向流-rpc",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-5-4-双向流-rpc","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.5.4. 双向流 RPC")],-1),I=(0,s._)("p",null,"客户端和服务端可同时向对方发送数据流，同时也可以接收数据",-1),K=(0,s._)("h2",{id:"_1-6-protocolbuffer",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-protocolbuffer","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6. protocolBuffer")],-1),Y=(0,s._)("p",null,"protocolBuffer 是Google出品的序列化工具, 采用了二进制字节的序列化方式, 特别适合对数据大小和传输速率比较敏感的场合使用。",-1),q=(0,s._)("h3",{id:"_1-6-1-使用步骤",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-1-使用步骤","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6.1. 使用步骤")],-1),J=(0,s._)("h4",{id:"_1-6-1-1-定义-proto文件",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-1-1-定义-proto文件","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6.1.1. 定义.proto文件")],-1),Q=(0,s._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,s._)("pre",{class:"language-go"},[(0,s._)("code",null,[(0,s._)("span",{class:"token comment"},"// proto文件 messages.proto"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"package"),(0,s.Uk)(" zxwj"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\nsyntax "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(),(0,s._)("span",{class:"token string"},'"proto3"'),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n\nmessage helloworld"),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n   "),(0,s._)("span",{class:"token builtin"},"string"),(0,s.Uk)(" zzuid "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(),(0,s._)("span",{class:"token number"},"123"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("  \n   "),(0,s._)("span",{class:"token builtin"},"string"),(0,s.Uk)(" zzstatus "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(),(0,s._)("span",{class:"token number"},"0"),(0,s._)("span",{class:"token punctuation"},";"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br")])],-1),X=(0,s._)("h4",{id:"_1-6-1-2-编译-proto文件",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-1-2-编译-proto文件","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6.1.2. 编译.proto文件")],-1),$=(0,s._)("p",null,[(0,s.Uk)("使用protobuf.js命令行工具编译 "),(0,s._)("code",null,"protoc --js_out=import_style=commonjs,binary:. messages.proto")],-1),nn=(0,s._)("h4",{id:"_1-6-1-3-code",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-6-1-3-code","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.6.1.3. code")],-1),an=(0,s._)("div",{class:"language-go ext-go line-numbers-mode"},[(0,s._)("pre",{class:"language-go"},[(0,s._)("code",null,[(0,s._)("span",{class:"token keyword"},"package"),(0,s.Uk)(" main\n\n"),(0,s._)("span",{class:"token keyword"},"import"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token string"},'"fmt"'),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token string"},'"log"'),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token string"},'"github.com/golang/protobuf/proto"'),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n\n"),(0,s._)("span",{class:"token keyword"},"func"),(0,s.Uk)(),(0,s._)("span",{class:"token function"},"main"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n\n    elliot "),(0,s._)("span",{class:"token operator"},":="),(0,s.Uk)(),(0,s._)("span",{class:"token operator"},"&"),(0,s.Uk)("Person"),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n        Name"),(0,s._)("span",{class:"token punctuation"},":"),(0,s.Uk)(),(0,s._)("span",{class:"token string"},'"Elliot"'),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)("\n        Age"),(0,s._)("span",{class:"token punctuation"},":"),(0,s.Uk)("  "),(0,s._)("span",{class:"token number"},"24"),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n\n    data"),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)(" err "),(0,s._)("span",{class:"token operator"},":="),(0,s.Uk)(" proto"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Marshal"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("elliot"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"if"),(0,s.Uk)(" err "),(0,s._)("span",{class:"token operator"},"!="),(0,s.Uk)(),(0,s._)("span",{class:"token boolean"},"nil"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n        log"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Fatal"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'"marshaling error: "'),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)(" err"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n\n    fmt"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Println"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("data"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n\n    newElliot "),(0,s._)("span",{class:"token operator"},":="),(0,s.Uk)(),(0,s._)("span",{class:"token operator"},"&"),(0,s.Uk)("Person"),(0,s._)("span",{class:"token punctuation"},"{"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n    err "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(" proto"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Unmarshal"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("data"),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)(" newElliot"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token keyword"},"if"),(0,s.Uk)(" err "),(0,s._)("span",{class:"token operator"},"!="),(0,s.Uk)(),(0,s._)("span",{class:"token boolean"},"nil"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n        log"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"Fatal"),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token string"},'"unmarshaling error: "'),(0,s._)("span",{class:"token punctuation"},","),(0,s.Uk)(" err"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n  "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n\n")])]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br")])],-1),en=(0,s._)("h2",{id:"_1-7-etcd的简介",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-7-etcd的简介","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.7. etcd的简介")],-1),sn=(0,s._)("p",null,"ETCD 是用于共享配置和服务发现的分布式，一致性的 KV 存储系统",-1),tn=(0,s._)("h2",{id:"_1-8-etcd特点",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-8-etcd特点","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.8. etcd特点")],-1),ln=(0,s._)("ol",null,[(0,s._)("li",null,"简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单"),(0,s._)("li",null,"安全：支持SSL证书验证"),(0,s._)("li",null,"快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作"),(0,s._)("li",null,"可靠：采用raft算法，实现分布式系统数据的可用性和一致性")],-1),rn=(0,s._)("h2",{id:"_1-9-简述-etcd-适应的场景",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-简述-etcd-适应的场景","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9. 简述 ETCD 适应的场景？")],-1),cn=(0,s._)("h3",{id:"_1-9-1-服务发现-service-discovery",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-1-服务发现-service-discovery","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.1. 服务发现 (Service Discovery)")],-1),on=(0,s._)("p",null,"服务发现主要解决在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 udp 或 tcp 端口，并且通过名字就可以查找和连接",-1),_n=(0,s._)("h3",{id:"_1-9-2-配置中心-消息发布与订阅",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-2-配置中心-消息发布与订阅","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.2. 配置中心 (消息发布与订阅)")],-1),un=(0,s._)("p",null,"在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个配置共享中心，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。应用中用到的一些配置信息放到 etcd 上进行集中管理。",-1),pn=(0,s._)("h3",{id:"_1-9-3-负载均衡",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-3-负载均衡","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.3. 负载均衡")],-1),dn=(0,s._)("p",null,"在分布式系统中，为了保证服务的高可用以及数据的一致性，通常都会把数据和服务部署多份，以此达到对等服务，即使其中的某一个服务失效了，也不影响使用。etcd 本身分布式架构存储的信息访问支持负载均衡。etcd 集群化以后，每个 etcd 的核心节点都可以处理用户的请求。所以，把数据量小但是访问频繁的消息数据直接存储到 etcd 中也可以实现负载均衡的效果",-1),kn=(0,s._)("h3",{id:"_1-9-4-分布式通知与协调",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-4-分布式通知与协调","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.4. 分布式通知与协调")],-1),hn=(0,s._)("p",null,"与消息发布和订阅类似，都用到了 etcd 中的 Watcher 机制，通过注册与异步通知机制，实现分布式环境下不同系统之间的通知与协调，从而对数据变更做到实时处理。",-1),bn=(0,s._)("h3",{id:"_1-9-6-集群监控与-leader-竞选",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-9-6-集群监控与-leader-竞选","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.9.6. 集群监控与 Leader 竞选")],-1),Un=(0,s._)("p",null,"通过 etcd 来进行监控实现起来非常简单并且实时性强。",-1),gn={},mn=(0,e(3744).Z)(gn,[["render",function(n,a){return(0,s.wg)(),(0,s.iD)(s.HY,null,[l,r,c,o,i,_,u,p,d,k,h,b,U,g,m,f,v,x,C,S,P,R,y,E,A,w,D,T,B,H,M,O,z,N,j,L,W,F,V,Z,G,I,K,Y,q,J,Q,X,$,nn,an,en,sn,tn,ln,rn,cn,on,_n,un,pn,dn,kn,hn,bn,Un],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{const e=n.__vccOpts||n;for(const[n,s]of a)e[n]=s;return e}},4597:(n,a,e)=>{n.exports=e.p+"assets/img/1646790660971.bebab37d.png"}}]);